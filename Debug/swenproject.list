
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08001aa0  08001aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c50  08001c50  00027b24  2**0
                  CONTENTS
  4 .ARM          00000000  08001c50  08001c50  00027b24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c50  08001c50  00027b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007b24  20000000  08001c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20007b24  0800977c  00027b24  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007d2c  0800977c  00027d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027b24  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027b54  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020a5  00000000  00000000  00027b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bc3  00000000  00000000  00029c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  0002a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000183  00000000  00000000  0002aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d2b8  00000000  00000000  0002abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000044be  00000000  00000000  00047e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3d8e  00000000  00000000  0004c349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b58  00000000  00000000  001400d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00140c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007b24 	.word	0x20007b24
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001a88 	.word	0x08001a88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007b28 	.word	0x20007b28
 80001cc:	08001a88 	.word	0x08001a88

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <read_and_echo_byte>:
#include "printf.h"
#include "UART.h"

static char BUFFER [80];

char read_and_echo_byte(){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
    uint8_t byte = USART_Read(USART2); 
 8000296:	480a      	ldr	r0, [pc, #40]	; (80002c0 <read_and_echo_byte+0x30>)
 8000298:	f000 f9ce 	bl	8000638 <USART_Read>
 800029c:	4603      	mov	r3, r0
 800029e:	71fb      	strb	r3, [r7, #7]
    putchar (byte);
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 fa8a 	bl	80007bc <putchar>
    if (byte == '\r'){
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b0d      	cmp	r3, #13
 80002ac:	d102      	bne.n	80002b4 <read_and_echo_byte+0x24>
        putchar('\n');
 80002ae:	200a      	movs	r0, #10
 80002b0:	f000 fa84 	bl	80007bc <putchar>
    }
    return byte;
 80002b4:	79fb      	ldrb	r3, [r7, #7]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40004400 	.word	0x40004400

080002c4 <readline>:

char* readline() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
    char byte;
    int i = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]

    while (1) {
        byte = read_and_echo_byte();
 80002ce:	f7ff ffdf 	bl	8000290 <read_and_echo_byte>
 80002d2:	4603      	mov	r3, r0
 80002d4:	70fb      	strb	r3, [r7, #3]
        if (byte == '\r') {
 80002d6:	78fb      	ldrb	r3, [r7, #3]
 80002d8:	2b0d      	cmp	r3, #13
 80002da:	d00f      	beq.n	80002fc <readline+0x38>
            break;  // Exit the loop when newline is encountered
        }
        BUFFER[i++] = byte;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	607a      	str	r2, [r7, #4]
 80002e2:	490c      	ldr	r1, [pc, #48]	; (8000314 <readline+0x50>)
 80002e4:	78fa      	ldrb	r2, [r7, #3]
 80002e6:	54ca      	strb	r2, [r1, r3]
        if (i >= sizeof(BUFFER) - 1) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b4e      	cmp	r3, #78	; 0x4e
 80002ec:	d9ef      	bls.n	80002ce <readline+0xa>
            // Buffer overflow protection
            BUFFER[i] = '\0';
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <readline+0x50>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4413      	add	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
            return BUFFER;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <readline+0x50>)
 80002fa:	e006      	b.n	800030a <readline+0x46>
            break;  // Exit the loop when newline is encountered
 80002fc:	bf00      	nop
        }
    }
    BUFFER[i] = '\0';
 80002fe:	4a05      	ldr	r2, [pc, #20]	; (8000314 <readline+0x50>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4413      	add	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]

    return BUFFER;
 8000308:	4b02      	ldr	r3, [pc, #8]	; (8000314 <readline+0x50>)
}
 800030a:	4618      	mov	r0, r3
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20007b40 	.word	0x20007b40

08000318 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000320:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <LED_Init+0xb8>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000324:	4a2a      	ldr	r2, [pc, #168]	; (80003d0 <LED_Init+0xb8>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));  
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	2103      	movs	r1, #3
 8000338:	fa01 f303 	lsl.w	r3, r1, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000342:	4013      	ands	r3, r2
 8000344:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800035a:	4313      	orrs	r3, r2
 800035c:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 800035e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	2103      	movs	r1, #3
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43db      	mvns	r3, r3
 8000370:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000374:	4013      	ands	r3, r2
 8000376:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	689a      	ldr	r2, [r3, #8]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	2103      	movs	r1, #3
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800038c:	4313      	orrs	r3, r2
 800038e:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	2101      	movs	r1, #1
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003a4:	4013      	ands	r3, r2
 80003a6:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 80003a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ac:	68da      	ldr	r2, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	2103      	movs	r1, #3
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	43db      	mvns	r3, r3
 80003ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003be:	4013      	ands	r3, r2
 80003c0:	60cb      	str	r3, [r1, #12]
	
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(int pin){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	GPIOA->ODR |= (1UL<<pin);
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	2101      	movs	r1, #1
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ee:	4313      	orrs	r3, r2
 80003f0:	614b      	str	r3, [r1, #20]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(int pin){
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1UL<<pin);
 8000406:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040a:	695a      	ldr	r2, [r3, #20]
 800040c:	2101      	movs	r1, #1
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	43db      	mvns	r3, r3
 8000416:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800041a:	4013      	ands	r3, r2
 800041c:	614b      	str	r3, [r1, #20]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 8000432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2101      	movs	r1, #1
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000444:	4053      	eors	r3, r2
 8000446:	614b      	str	r3, [r1, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <UART2_Init+0x40>)
 800045a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <UART2_Init+0x40>)
 800045e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000462:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <UART2_Init+0x40>)
 8000466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <UART2_Init+0x40>)
 800046c:	f023 030c 	bic.w	r3, r3, #12
 8000470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <UART2_Init+0x40>)
 8000476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800047a:	4a06      	ldr	r2, [pc, #24]	; (8000494 <UART2_Init+0x40>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000484:	f000 f80a 	bl	800049c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000488:	4803      	ldr	r0, [pc, #12]	; (8000498 <UART2_Init+0x44>)
 800048a:	f000 f84f 	bl	800052c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40004400 	.word	0x40004400

0800049c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <UART2_GPIO_Init+0x8c>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a4:	4a20      	ldr	r2, [pc, #128]	; (8000528 <UART2_GPIO_Init+0x8c>)
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80004ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80004bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004c6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80004ca:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d0:	6a1b      	ldr	r3, [r3, #32]
 80004d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80004da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e0:	6a1b      	ldr	r3, [r3, #32]
 80004e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004e6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80004ea:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80004ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004f6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80004fa:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800050a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 800050c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000516:	f023 030c 	bic.w	r3, r3, #12
 800051a:	6053      	str	r3, [r2, #4]
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f023 0201 	bic.w	r2, r3, #1
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f242 028d 	movw	r2, #8333	; 0x208d
 800056a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f043 020c 	orr.w	r2, r3, #12
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a2c      	ldr	r2, [pc, #176]	; (800062c <USART_Init+0x100>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d129      	bne.n	80005d4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f043 0220 	orr.w	r2, r3, #32
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f023 0210 	bic.w	r2, r3, #16
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f023 0201 	bic.w	r2, r3, #1
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <USART_Init+0x104>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d10b      	bne.n	80005f4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <USART_Init+0x108>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <USART_Init+0x108>)
 80005ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005f2:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f043 0201 	orr.w	r2, r3, #1
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000600:	bf00      	nop
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800060e:	bf00      	nop
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f9      	beq.n	8000610 <USART_Init+0xe4>
}
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40004c00 	.word	0x40004c00
 8000630:	40004400 	.word	0x40004400
 8000634:	40013800 	.word	0x40013800

08000638 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000640:	bf00      	nop
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000652:	b29b      	uxth	r3, r3
 8000654:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b086      	sub	sp, #24
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e014      	b.n	800069e <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000674:	bf00      	nop
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b29a      	uxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000690:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000694:	f000 f818 	bl	80006c8 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	3301      	adds	r3, #1
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d8e6      	bhi.n	8000674 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80006a6:	bf00      	nop
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0f9      	beq.n	80006a8 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	61da      	str	r2, [r3, #28]
}   
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2264      	movs	r2, #100	; 0x64
 80006d4:	fb03 f202 	mul.w	r2, r3, r2
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <USART_Delay+0x3c>)
 80006da:	fba3 1302 	umull	r1, r3, r3, r2
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	0852      	lsrs	r2, r2, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	089b      	lsrs	r3, r3, #2
 80006e6:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80006e8:	bf00      	nop
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f9      	bne.n	80006ea <USART_Delay+0x22>
}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	24924925 	.word	0x24924925

08000708 <init_systick>:
 * @brief Initialization function for systick
 * 
 * @return struct systick* 
 */
void init_systick()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

    //clear csr register

    // SysTick->CSR &= ~(1 << 0);

    systick->CSR = 0;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <init_systick+0x38>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]

    //set timer to 10 ms
    systick->RVR = 7999999;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <init_systick+0x38>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <init_systick+0x3c>)
 800071a:	605a      	str	r2, [r3, #4]

    //set to internal clock
    systick->CSR = (1 << 2);
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <init_systick+0x38>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2204      	movs	r2, #4
 8000722:	601a      	str	r2, [r3, #0]

    //start timer
    systick->CSR |= 1;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <init_systick+0x38>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <init_systick+0x38>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f042 0201 	orr.w	r2, r2, #1
 8000732:	601a      	str	r2, [r3, #0]

}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000000 	.word	0x20000000
 8000744:	007a11ff 	.word	0x007a11ff

08000748 <delay_systick>:

// This fuction is to create delay using SysTick timer counter
void delay_systick()
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
    // register in a loop. When that bit is set exit this inner loop
    // to do another pass in the outer loop of 10.



    for( int count=0; count <1; count++){
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e00a      	b.n	800076a <delay_systick+0x22>

        while (!(systick->CSR & (1 << 16)));
 8000754:	bf00      	nop
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <delay_systick+0x38>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f8      	beq.n	8000756 <delay_systick+0xe>
    for( int count=0; count <1; count++){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	ddf1      	ble.n	8000754 <delay_systick+0xc>
        //     }
        // }
    }


 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000

08000784 <puts>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[80];

int puts (const char* str) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    int ret = sprintf (buffer, "%s\r\n", str);
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <puts+0x2c>)
 8000790:	4808      	ldr	r0, [pc, #32]	; (80007b4 <puts+0x30>)
 8000792:	f000 fcb5 	bl	8001100 <siprintf>
 8000796:	60f8      	str	r0, [r7, #12]
    USART_Write (USART2, (unsigned char*) buffer, ret);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	461a      	mov	r2, r3
 800079c:	4905      	ldr	r1, [pc, #20]	; (80007b4 <puts+0x30>)
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <puts+0x34>)
 80007a0:	f7ff ff5f 	bl	8000662 <USART_Write>
    return ret;
 80007a4:	68fb      	ldr	r3, [r7, #12]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08001aa0 	.word	0x08001aa0
 80007b4:	20007b90 	.word	0x20007b90
 80007b8:	40004400 	.word	0x40004400

080007bc <putchar>:
	USART_Write (USART2, (unsigned char*) "\r\n", 2);
	return ret;
}


int putchar (int c) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    USART_Write (USART2, (unsigned char*) &c, 1);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <putchar+0x20>)
 80007cc:	f7ff ff49 	bl	8000662 <USART_Write>
    return c;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40004400 	.word	0x40004400

080007e0 <printf>:

int printf (const char *format, ...) {
 80007e0:	b40f      	push	{r0, r1, r2, r3}
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
   va_list aptr;
   int ret;

   va_start(aptr, format);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	603b      	str	r3, [r7, #0]
   ret = vsprintf(buffer, format, aptr);
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <printf+0x68>)
 80007f4:	f000 fcba 	bl	800116c <vsiprintf>
 80007f8:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   if (buffer [ret - 1] == '\n') {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <printf+0x68>)
 8000800:	5cd3      	ldrb	r3, [r2, r3]
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d111      	bne.n	800082a <printf+0x4a>
       buffer [ret - 1] = '\r';
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <printf+0x68>)
 800080c:	210d      	movs	r1, #13
 800080e:	54d1      	strb	r1, [r2, r3]
       buffer [ret] = '\n';
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <printf+0x68>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	220a      	movs	r2, #10
 8000818:	701a      	strb	r2, [r3, #0]
       buffer [ret + 1] = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <printf+0x68>)
 8000820:	2100      	movs	r1, #0
 8000822:	54d1      	strb	r1, [r2, r3]
       ret++;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
   }

   USART_Write (USART2, (unsigned char*) buffer, ret);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	461a      	mov	r2, r3
 800082e:	4906      	ldr	r1, [pc, #24]	; (8000848 <printf+0x68>)
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <printf+0x6c>)
 8000832:	f7ff ff16 	bl	8000662 <USART_Write>

   return(ret);
 8000836:	687b      	ldr	r3, [r7, #4]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000842:	b004      	add	sp, #16
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20007b90 	.word	0x20007b90
 800084c:	40004400 	.word	0x40004400

08000850 <printPrompt>:
#include "song.h"
#include "Activity_8.h"

static int currentTask = -1; //negative one so we start at track 0 when we increment by 1

void printPrompt() {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    printf("***REMOTE LED CONTROL MENU***\n");
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <printPrompt+0x38>)
 8000856:	f7ff ff95 	bl	8000784 <puts>
    printf("Available User Commands\n");
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <printPrompt+0x3c>)
 800085c:	f7ff ff92 	bl	8000784 <puts>
    printf("NEXT – Show next song info\n");
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <printPrompt+0x40>)
 8000862:	f7ff ff8f 	bl	8000784 <puts>
    printf("PLAY – Play the song (LED on)\n");
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <printPrompt+0x44>)
 8000868:	f7ff ff8c 	bl	8000784 <puts>
    printf("PAUSE – Pause the song (LED flash)\n");
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <printPrompt+0x48>)
 800086e:	f7ff ff89 	bl	8000784 <puts>
    printf("STOP – Stop the song (LED off)\n");
 8000872:	480a      	ldr	r0, [pc, #40]	; (800089c <printPrompt+0x4c>)
 8000874:	f7ff ff86 	bl	8000784 <puts>
    printf("HELP – Show this menu\n");
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <printPrompt+0x50>)
 800087a:	f7ff ff83 	bl	8000784 <puts>
    printf("QUIT – Exit the program\n");
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <printPrompt+0x54>)
 8000880:	f7ff ff80 	bl	8000784 <puts>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08001ab4 	.word	0x08001ab4
 800088c:	08001ad4 	.word	0x08001ad4
 8000890:	08001aec 	.word	0x08001aec
 8000894:	08001b0c 	.word	0x08001b0c
 8000898:	08001b2c 	.word	0x08001b2c
 800089c:	08001b54 	.word	0x08001b54
 80008a0:	08001b78 	.word	0x08001b78
 80008a4:	08001b90 	.word	0x08001b90

080008a8 <LED_ToggleInBackground>:

/**
 * @brief - Run when the user selects the pause command it will toggle the LED in the background
 */
void LED_ToggleInBackground() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
    init_systick();
 80008ae:	f7ff ff2b 	bl	8000708 <init_systick>
    for (int i=0;i<70;i++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e007      	b.n	80008c8 <LED_ToggleInBackground+0x20>
        delay_systick();
 80008b8:	f7ff ff46 	bl	8000748 <delay_systick>
        LED_Toggle(LED_PIN);
 80008bc:	2007      	movs	r0, #7
 80008be:	f7ff fdb4 	bl	800042a <LED_Toggle>
    for (int i=0;i<70;i++) {
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3301      	adds	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b45      	cmp	r3, #69	; 0x45
 80008cc:	ddf4      	ble.n	80008b8 <LED_ToggleInBackground+0x10>
    }
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <nextSong>:

/**
 * @brief - function uses the song struct fron song.h to get the next song and print the song details
 * like the title, copyright, and tempo
 */
void nextSong() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0cc      	sub	sp, #304	; 0x130
 80008dc:	af00      	add	r7, sp, #0
    currentTask = (currentTask + 1) % 6; // if it gets to 5, we want to go back to 0
 80008de:	4ba2      	ldr	r3, [pc, #648]	; (8000b68 <nextSong+0x290>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	1c59      	adds	r1, r3, #1
 80008e4:	4ba1      	ldr	r3, [pc, #644]	; (8000b6c <nextSong+0x294>)
 80008e6:	fb83 3201 	smull	r3, r2, r3, r1
 80008ea:	17cb      	asrs	r3, r1, #31
 80008ec:	1ad2      	subs	r2, r2, r3
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	1aca      	subs	r2, r1, r3
 80008f8:	4b9b      	ldr	r3, [pc, #620]	; (8000b68 <nextSong+0x290>)
 80008fa:	601a      	str	r2, [r3, #0]
    char songTitle[128] = {};
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000902:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000906:	227c      	movs	r2, #124	; 0x7c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fc38 	bl	8001180 <memset>
    char songCopyright[128] = {};
 8000910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000914:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	3304      	adds	r3, #4
 800091e:	227c      	movs	r2, #124	; 0x7c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fc2c 	bl	8001180 <memset>
    int titleIndex = 0, copyrightIndex = 0, mtrkCount = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    song currentSong = get_song(currentTask);
 800093a:	4b8b      	ldr	r3, [pc, #556]	; (8000b68 <nextSong+0x290>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fa3e 	bl	8000dcc <get_song>


    int i = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    while (1) { // Parse for title
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 3) { // Title meta event
 8000956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800095a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2bff      	cmp	r3, #255	; 0xff
 800096a:	d10b      	bne.n	8000984 <nextSong+0xac>
 800096c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800097a:	3301      	adds	r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d039      	beq.n	80009f8 <nextSong+0x120>
            break;
        }
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 && 
 8000984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b4d      	cmp	r3, #77	; 0x4d
 8000998:	d128      	bne.n	80009ec <nextSong+0x114>
 800099a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800099e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009a8:	3301      	adds	r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b54      	cmp	r3, #84	; 0x54
 80009b0:	d11c      	bne.n	80009ec <nextSong+0x114>
 80009b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009c0:	3302      	adds	r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b72      	cmp	r3, #114	; 0x72
 80009c8:	d110      	bne.n	80009ec <nextSong+0x114>
            currentSong.p_song[i + 3] == 107) { // MTrk
 80009ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009d8:	3303      	adds	r3, #3
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 && 
 80009de:	2b6b      	cmp	r3, #107	; 0x6b
 80009e0:	d104      	bne.n	80009ec <nextSong+0x114>
            mtrkCount++;
 80009e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009e6:	3301      	adds	r3, #1
 80009e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        }
        i++;
 80009ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009f0:	3301      	adds	r3, #1
 80009f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 3) { // Title meta event
 80009f6:	e7ae      	b.n	8000956 <nextSong+0x7e>
            break;
 80009f8:	bf00      	nop
    }
    // If we don't find the second mtrk that means that the title exists
    if (mtrkCount != 2) { 
 80009fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d039      	beq.n	8000a76 <nextSong+0x19e>
        int numToCount = currentSong.p_song[i + 2];
 8000a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a10:	3302      	adds	r3, #2
 8000a12:	4413      	add	r3, r2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        i++;
 8000a1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a1e:	3301      	adds	r3, #1
 8000a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for (int p = i; p <= numToCount + i + 1; p++) {
 8000a24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000a2c:	e019      	b.n	8000a62 <nextSong+0x18a>
            songTitle[titleIndex] = (char) (currentSong.p_song[p]);
 8000a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a3c:	4413      	add	r3, r2
 8000a3e:	7819      	ldrb	r1, [r3, #0]
 8000a40:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a48:	4413      	add	r3, r2
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
            titleIndex++;
 8000a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a52:	3301      	adds	r3, #1
 8000a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        for (int p = i; p <= numToCount + i + 1; p++) {
 8000a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000a62:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000a66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000a72:	429a      	cmp	r2, r3
 8000a74:	dddb      	ble.n	8000a2e <nextSong+0x156>
        }
    }

    i = 0; //reset index to 0
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    mtrkCount = 0; //reset mtrk count to 0
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    while (1) { // Parse for copyright
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 2) { // Title meta event
 8000a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2bff      	cmp	r3, #255	; 0xff
 8000a96:	d10b      	bne.n	8000ab0 <nextSong+0x1d8>
 8000a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d03d      	beq.n	8000b2c <nextSong+0x254>
            break;
        }
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 &&
 8000ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000abe:	4413      	add	r3, r2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b4d      	cmp	r3, #77	; 0x4d
 8000ac4:	d128      	bne.n	8000b18 <nextSong+0x240>
 8000ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b54      	cmp	r3, #84	; 0x54
 8000adc:	d11c      	bne.n	8000b18 <nextSong+0x240>
 8000ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aec:	3302      	adds	r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b72      	cmp	r3, #114	; 0x72
 8000af4:	d110      	bne.n	8000b18 <nextSong+0x240>
            currentSong.p_song[i + 3] == 107) { // MTrk
 8000af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b04:	3303      	adds	r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 &&
 8000b0a:	2b6b      	cmp	r3, #107	; 0x6b
 8000b0c:	d104      	bne.n	8000b18 <nextSong+0x240>
            mtrkCount++;
 8000b0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b12:	3301      	adds	r3, #1
 8000b14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        }
        i++;
 8000b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (mtrkCount == 2) { // If we find the second mtrk, break
 8000b22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d002      	beq.n	8000b30 <nextSong+0x258>
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 2) { // Title meta event
 8000b2a:	e7aa      	b.n	8000a82 <nextSong+0x1aa>
            break;
 8000b2c:	bf00      	nop
 8000b2e:	e000      	b.n	8000b32 <nextSong+0x25a>
            break;
 8000b30:	bf00      	nop
        }
    }

    if (mtrkCount != 2) { // If we don't find the second mtrk that means that the title exists
 8000b32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d040      	beq.n	8000bbc <nextSong+0x2e4>
        int numToCount = currentSong.p_song[i + 2];
 8000b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b48:	3302      	adds	r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        i++;
 8000b52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for (int p = i + 2; p <= numToCount + i + 1; p++) {
 8000b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b60:	3302      	adds	r3, #2
 8000b62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000b66:	e01f      	b.n	8000ba8 <nextSong+0x2d0>
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	2aaaaaab 	.word	0x2aaaaaab
            songCopyright[copyrightIndex] = (char) (currentSong.p_song[p]);
 8000b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b7e:	4413      	add	r3, r2
 8000b80:	7819      	ldrb	r1, [r3, #0]
 8000b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b86:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8000b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000b8e:	4413      	add	r3, r2
 8000b90:	460a      	mov	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
            copyrightIndex++;
 8000b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000b98:	3301      	adds	r3, #1
 8000b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        for (int p = i + 2; p <= numToCount + i + 1; p++) {
 8000b9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000ba8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000bac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	ddd9      	ble.n	8000b70 <nextSong+0x298>
        }
    }

    i = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    mtrkCount = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    int tempo = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    while (1) { // Parse for tempo
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 81) { // Tempo meta event, we break
 8000bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d10b      	bne.n	8000bfc <nextSong+0x324>
 8000be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b51      	cmp	r3, #81	; 0x51
 8000bfa:	d03d      	beq.n	8000c78 <nextSong+0x3a0>
            break; 
        } 
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 && 
 8000bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b4d      	cmp	r3, #77	; 0x4d
 8000c10:	d128      	bne.n	8000c64 <nextSong+0x38c>
 8000c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c20:	3301      	adds	r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b54      	cmp	r3, #84	; 0x54
 8000c28:	d11c      	bne.n	8000c64 <nextSong+0x38c>
 8000c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c38:	3302      	adds	r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b72      	cmp	r3, #114	; 0x72
 8000c40:	d110      	bne.n	8000c64 <nextSong+0x38c>
            currentSong.p_song[i + 3] == 107) { 
 8000c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c50:	3303      	adds	r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
        if (currentSong.p_song[i] == 77 && currentSong.p_song[i + 1] == 84 && currentSong.p_song[i + 2] == 114 && 
 8000c56:	2b6b      	cmp	r3, #107	; 0x6b
 8000c58:	d104      	bne.n	8000c64 <nextSong+0x38c>
            mtrkCount++;
 8000c5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c5e:	3301      	adds	r3, #1
 8000c60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        }
        i++;
 8000c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        if (mtrkCount == 2) { // If we find the second mtrk, break
 8000c6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d002      	beq.n	8000c7c <nextSong+0x3a4>
        if (currentSong.p_song[i] == 255 && currentSong.p_song[i + 1] == 81) { // Tempo meta event, we break
 8000c76:	e7aa      	b.n	8000bce <nextSong+0x2f6>
            break; 
 8000c78:	bf00      	nop
 8000c7a:	e000      	b.n	8000c7e <nextSong+0x3a6>
            break;
 8000c7c:	bf00      	nop
        }
    }
    if (mtrkCount != 2) { //// If we don't find the second mtrk that means that the tempo exists
 8000c7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d023      	beq.n	8000cce <nextSong+0x3f6>
        tempo = (currentSong.p_song[i + 3] << 16) | (currentSong.p_song[i + 4] << 8) | currentSong.p_song[i + 5]; // Parse tempo
 8000c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c94:	3303      	adds	r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	041a      	lsls	r2, r3, #16
 8000c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ca4:	6819      	ldr	r1, [r3, #0]
 8000ca6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000caa:	3304      	adds	r3, #4
 8000cac:	440b      	add	r3, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8000cb8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8000cbc:	6811      	ldr	r1, [r2, #0]
 8000cbe:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000cc2:	3205      	adds	r2, #5
 8000cc4:	440a      	add	r2, r1
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    }

    // Print song details
    printf("Current Song: \n");
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <nextSong+0x428>)
 8000cd0:	f7ff fd58 	bl	8000784 <puts>
    printf("Song Title:%s\n",  songTitle);
 8000cd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <nextSong+0x42c>)
 8000cdc:	f7ff fd80 	bl	80007e0 <printf>
    printf("Song Copyright: %s\n",  songCopyright);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <nextSong+0x430>)
 8000ce8:	f7ff fd7a 	bl	80007e0 <printf>
    printf("Song Tempo: %d\n", tempo);
 8000cec:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <nextSong+0x434>)
 8000cf2:	f7ff fd75 	bl	80007e0 <printf>
}
 8000cf6:	bf00      	nop
 8000cf8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08001bac 	.word	0x08001bac
 8000d04:	08001bbc 	.word	0x08001bbc
 8000d08:	08001bcc 	.word	0x08001bcc
 8000d0c:	08001be0 	.word	0x08001be0

08000d10 <processCommands>:

void processCommands() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
    char* input = readline();
 8000d16:	f7ff fad5 	bl	80002c4 <readline>
 8000d1a:	6078      	str	r0, [r7, #4]

    while (1) {
        // Check user input against available commands
        if (strcmp(input, "STOP") == 0) {
 8000d1c:	4921      	ldr	r1, [pc, #132]	; (8000da4 <processCommands+0x94>)
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fa56 	bl	80001d0 <strcmp>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <processCommands+0x22>
            LED_Off(LED_PIN); // Turn off LED
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f7ff fb67 	bl	80003fe <LED_Off>
 8000d30:	e02f      	b.n	8000d92 <processCommands+0x82>
        } else if (strcmp(input, "PAUSE") == 0) {
 8000d32:	491d      	ldr	r1, [pc, #116]	; (8000da8 <processCommands+0x98>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fa4b 	bl	80001d0 <strcmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <processCommands+0x36>
            LED_ToggleInBackground(); // Toggle LED in background
 8000d40:	f7ff fdb2 	bl	80008a8 <LED_ToggleInBackground>
 8000d44:	e025      	b.n	8000d92 <processCommands+0x82>
        } else if (strcmp(input, "NEXT") == 0) {
 8000d46:	4919      	ldr	r1, [pc, #100]	; (8000dac <processCommands+0x9c>)
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fa41 	bl	80001d0 <strcmp>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <processCommands+0x4a>
            nextSong(); // Get next song
 8000d54:	f7ff fdc0 	bl	80008d8 <nextSong>
 8000d58:	e01b      	b.n	8000d92 <processCommands+0x82>
        } else if (strcmp(input, "PLAY") == 0) {
 8000d5a:	4915      	ldr	r1, [pc, #84]	; (8000db0 <processCommands+0xa0>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff fa37 	bl	80001d0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <processCommands+0x60>
            LED_On(LED_PIN); // Turn on LED
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f7ff fb33 	bl	80003d4 <LED_On>
 8000d6e:	e010      	b.n	8000d92 <processCommands+0x82>
        } else if (strcmp(input, "HELP") == 0) {
 8000d70:	4910      	ldr	r1, [pc, #64]	; (8000db4 <processCommands+0xa4>)
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fa2c 	bl	80001d0 <strcmp>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <processCommands+0x74>
            printPrompt(); // Print available commands
 8000d7e:	f7ff fd67 	bl	8000850 <printPrompt>
 8000d82:	e006      	b.n	8000d92 <processCommands+0x82>
        } else if (strcmp(input, "QUIT") == 0) {
 8000d84:	490c      	ldr	r1, [pc, #48]	; (8000db8 <processCommands+0xa8>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fa22 	bl	80001d0 <strcmp>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <processCommands+0x8a>
            break; // Exit program
        }
        input = readline();
 8000d92:	f7ff fa97 	bl	80002c4 <readline>
 8000d96:	6078      	str	r0, [r7, #4]
        if (strcmp(input, "STOP") == 0) {
 8000d98:	e7c0      	b.n	8000d1c <processCommands+0xc>
            break; // Exit program
 8000d9a:	bf00      	nop
    }
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	08001bf0 	.word	0x08001bf0
 8000da8:	08001bf8 	.word	0x08001bf8
 8000dac:	08001c00 	.word	0x08001c00
 8000db0:	08001c08 	.word	0x08001c08
 8000db4:	08001c10 	.word	0x08001c10
 8000db8:	08001c18 	.word	0x08001c18

08000dbc <run_project>:
#include "demo.h"
#include "part1.h"
// #include "Systick.h"


void run_project() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    printPrompt();
 8000dc0:	f7ff fd46 	bl	8000850 <printPrompt>
    processCommands();
 8000dc4:	f7ff ffa4 	bl	8000d10 <processCommands>
    // printf("Converted value in little endian (uint32_t): %08x\n", little_endian_uint32);
	// display_song_info();

    // struct systick * systick = init_systick();
    // test_LED();
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000dcc:	b490      	push	{r4, r7}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <get_song+0x2c>)
 8000dde:	460c      	mov	r4, r1
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4413      	add	r3, r2
 8000de4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000de8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc90      	pop	{r4, r7}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20007aac 	.word	0x20007aac

08000dfc <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000e02:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <System_Clock_Init+0x1b4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6a      	ldr	r2, [pc, #424]	; (8000fb0 <System_Clock_Init+0x1b4>)
 8000e08:	f023 0307 	bic.w	r3, r3, #7
 8000e0c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000e0e:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <System_Clock_Init+0x1b4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a67      	ldr	r2, [pc, #412]	; (8000fb0 <System_Clock_Init+0x1b4>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000e1a:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a65      	ldr	r2, [pc, #404]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000e26:	bf00      	nop
 8000e28:	4b62      	ldr	r3, [pc, #392]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f9      	beq.n	8000e28 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000e34:	2310      	movs	r3, #16
 8000e36:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000e38:	4b5e      	ldr	r3, [pc, #376]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4a5d      	ldr	r2, [pc, #372]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e3e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000e42:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000e44:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	061b      	lsls	r3, r3, #24
 8000e4c:	4959      	ldr	r1, [pc, #356]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000e52:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000e5e:	bf00      	nop
 8000e60:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e6c:	d0f8      	beq.n	8000e60 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000e6e:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e74:	f023 0303 	bic.w	r3, r3, #3
 8000e78:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000e7a:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	4a4d      	ldr	r2, [pc, #308]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000e86:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000e8e:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e90:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000e94:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000e96:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e9e:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4a42      	ldr	r2, [pc, #264]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000eac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000eb0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebc:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ec8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000eca:	bf00      	nop
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f9      	beq.n	8000ecc <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4a35      	ldr	r2, [pc, #212]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ede:	f023 0303 	bic.w	r3, r3, #3
 8000ee2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000ee4:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000eea:	f043 0303 	orr.w	r3, r3, #3
 8000eee:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000ef0:	bf00      	nop
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	d1f9      	bne.n	8000ef2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000efe:	4b2d      	ldr	r3, [pc, #180]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	4a2c      	ldr	r2, [pc, #176]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f08:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f14:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f20:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f2c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000f2e:	bf00      	nop
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000f3c:	d0f8      	beq.n	8000f30 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000f48:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	4a19      	ldr	r2, [pc, #100]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f50:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000f54:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f78:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000f7a:	bf00      	nop
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0f9      	beq.n	8000f7c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f90:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <System_Clock_Init+0x1b8>)
 8000f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40022000 	.word	0x40022000
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f000 f8d2 	bl	8001190 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20018000 	.word	0x20018000
 8001018:	00000400 	.word	0x00000400
 800101c:	20007be0 	.word	0x20007be0
 8001020:	20007d30 	.word	0x20007d30

08001024 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <SystemInit+0x64>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <SystemInit+0x64>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <SystemInit+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <SystemInit+0x68>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <SystemInit+0x68>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <SystemInit+0x68>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a0f      	ldr	r2, [pc, #60]	; (800108c <SystemInit+0x68>)
 8001050:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001054:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001058:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <SystemInit+0x68>)
 800105c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001060:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <SystemInit+0x68>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <SystemInit+0x68>)
 8001068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <SystemInit+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SystemInit+0x64>)
 8001076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107a:	609a      	str	r2, [r3, #8]
#endif
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	40021000 	.word	0x40021000

08001090 <main>:
#include <stdio.h>




int main(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8001094:	f7ff feb2 	bl	8000dfc <System_Clock_Init>
	LED_Init(LED_PIN);
 8001098:	2007      	movs	r0, #7
 800109a:	f7ff f93d 	bl	8000318 <LED_Init>
	UART2_Init();
 800109e:	f7ff f9d9 	bl	8000454 <UART2_Init>
	run_project();
 80010a2:	f7ff fe8b 	bl	8000dbc <run_project>
 80010a6:	2300      	movs	r3, #0
	// LED_Toggle(LED_PIN);
	// LED_Off(LED_PIN);
	// run_demo();
	// read_bytes();
	// readlines();
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}

080010ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b0:	f7ff ffb8 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f000 f85f 	bl	800119c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010de:	f7ff ffd7 	bl	8001090 <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20007b24 	.word	0x20007b24
  ldr r2, =_sidata
 80010f0:	08001c58 	.word	0x08001c58
  ldr r2, =_sbss
 80010f4:	20007b24 	.word	0x20007b24
  ldr r4, =_ebss
 80010f8:	20007d2c 	.word	0x20007d2c

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <siprintf>:
 8001100:	b40e      	push	{r1, r2, r3}
 8001102:	b500      	push	{lr}
 8001104:	b09c      	sub	sp, #112	; 0x70
 8001106:	ab1d      	add	r3, sp, #116	; 0x74
 8001108:	9002      	str	r0, [sp, #8]
 800110a:	9006      	str	r0, [sp, #24]
 800110c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <siprintf+0x38>)
 8001112:	9107      	str	r1, [sp, #28]
 8001114:	9104      	str	r1, [sp, #16]
 8001116:	4909      	ldr	r1, [pc, #36]	; (800113c <siprintf+0x3c>)
 8001118:	f853 2b04 	ldr.w	r2, [r3], #4
 800111c:	9105      	str	r1, [sp, #20]
 800111e:	6800      	ldr	r0, [r0, #0]
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	a902      	add	r1, sp, #8
 8001124:	f000 f8ba 	bl	800129c <_svfiprintf_r>
 8001128:	9b02      	ldr	r3, [sp, #8]
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	b01c      	add	sp, #112	; 0x70
 8001130:	f85d eb04 	ldr.w	lr, [sp], #4
 8001134:	b003      	add	sp, #12
 8001136:	4770      	bx	lr
 8001138:	20007b20 	.word	0x20007b20
 800113c:	ffff0208 	.word	0xffff0208

08001140 <_vsiprintf_r>:
 8001140:	b500      	push	{lr}
 8001142:	b09b      	sub	sp, #108	; 0x6c
 8001144:	9100      	str	r1, [sp, #0]
 8001146:	9104      	str	r1, [sp, #16]
 8001148:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800114c:	9105      	str	r1, [sp, #20]
 800114e:	9102      	str	r1, [sp, #8]
 8001150:	4905      	ldr	r1, [pc, #20]	; (8001168 <_vsiprintf_r+0x28>)
 8001152:	9103      	str	r1, [sp, #12]
 8001154:	4669      	mov	r1, sp
 8001156:	f000 f8a1 	bl	800129c <_svfiprintf_r>
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	b01b      	add	sp, #108	; 0x6c
 8001162:	f85d fb04 	ldr.w	pc, [sp], #4
 8001166:	bf00      	nop
 8001168:	ffff0208 	.word	0xffff0208

0800116c <vsiprintf>:
 800116c:	4613      	mov	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	4601      	mov	r1, r0
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <vsiprintf+0x10>)
 8001174:	6800      	ldr	r0, [r0, #0]
 8001176:	f7ff bfe3 	b.w	8001140 <_vsiprintf_r>
 800117a:	bf00      	nop
 800117c:	20007b20 	.word	0x20007b20

08001180 <memset>:
 8001180:	4402      	add	r2, r0
 8001182:	4603      	mov	r3, r0
 8001184:	4293      	cmp	r3, r2
 8001186:	d100      	bne.n	800118a <memset+0xa>
 8001188:	4770      	bx	lr
 800118a:	f803 1b01 	strb.w	r1, [r3], #1
 800118e:	e7f9      	b.n	8001184 <memset+0x4>

08001190 <__errno>:
 8001190:	4b01      	ldr	r3, [pc, #4]	; (8001198 <__errno+0x8>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20007b20 	.word	0x20007b20

0800119c <__libc_init_array>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	4d0d      	ldr	r5, [pc, #52]	; (80011d4 <__libc_init_array+0x38>)
 80011a0:	4c0d      	ldr	r4, [pc, #52]	; (80011d8 <__libc_init_array+0x3c>)
 80011a2:	1b64      	subs	r4, r4, r5
 80011a4:	10a4      	asrs	r4, r4, #2
 80011a6:	2600      	movs	r6, #0
 80011a8:	42a6      	cmp	r6, r4
 80011aa:	d109      	bne.n	80011c0 <__libc_init_array+0x24>
 80011ac:	4d0b      	ldr	r5, [pc, #44]	; (80011dc <__libc_init_array+0x40>)
 80011ae:	4c0c      	ldr	r4, [pc, #48]	; (80011e0 <__libc_init_array+0x44>)
 80011b0:	f000 fc6a 	bl	8001a88 <_init>
 80011b4:	1b64      	subs	r4, r4, r5
 80011b6:	10a4      	asrs	r4, r4, #2
 80011b8:	2600      	movs	r6, #0
 80011ba:	42a6      	cmp	r6, r4
 80011bc:	d105      	bne.n	80011ca <__libc_init_array+0x2e>
 80011be:	bd70      	pop	{r4, r5, r6, pc}
 80011c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c4:	4798      	blx	r3
 80011c6:	3601      	adds	r6, #1
 80011c8:	e7ee      	b.n	80011a8 <__libc_init_array+0xc>
 80011ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80011ce:	4798      	blx	r3
 80011d0:	3601      	adds	r6, #1
 80011d2:	e7f2      	b.n	80011ba <__libc_init_array+0x1e>
 80011d4:	08001c50 	.word	0x08001c50
 80011d8:	08001c50 	.word	0x08001c50
 80011dc:	08001c50 	.word	0x08001c50
 80011e0:	08001c54 	.word	0x08001c54

080011e4 <__retarget_lock_acquire_recursive>:
 80011e4:	4770      	bx	lr

080011e6 <__retarget_lock_release_recursive>:
 80011e6:	4770      	bx	lr

080011e8 <__ssputs_r>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	688e      	ldr	r6, [r1, #8]
 80011ee:	461f      	mov	r7, r3
 80011f0:	42be      	cmp	r6, r7
 80011f2:	680b      	ldr	r3, [r1, #0]
 80011f4:	4682      	mov	sl, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4690      	mov	r8, r2
 80011fa:	d82c      	bhi.n	8001256 <__ssputs_r+0x6e>
 80011fc:	898a      	ldrh	r2, [r1, #12]
 80011fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001202:	d026      	beq.n	8001252 <__ssputs_r+0x6a>
 8001204:	6965      	ldr	r5, [r4, #20]
 8001206:	6909      	ldr	r1, [r1, #16]
 8001208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800120c:	eba3 0901 	sub.w	r9, r3, r1
 8001210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001214:	1c7b      	adds	r3, r7, #1
 8001216:	444b      	add	r3, r9
 8001218:	106d      	asrs	r5, r5, #1
 800121a:	429d      	cmp	r5, r3
 800121c:	bf38      	it	cc
 800121e:	461d      	movcc	r5, r3
 8001220:	0553      	lsls	r3, r2, #21
 8001222:	d527      	bpl.n	8001274 <__ssputs_r+0x8c>
 8001224:	4629      	mov	r1, r5
 8001226:	f000 f957 	bl	80014d8 <_malloc_r>
 800122a:	4606      	mov	r6, r0
 800122c:	b360      	cbz	r0, 8001288 <__ssputs_r+0xa0>
 800122e:	6921      	ldr	r1, [r4, #16]
 8001230:	464a      	mov	r2, r9
 8001232:	f000 fbc7 	bl	80019c4 <memcpy>
 8001236:	89a3      	ldrh	r3, [r4, #12]
 8001238:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	81a3      	strh	r3, [r4, #12]
 8001242:	6126      	str	r6, [r4, #16]
 8001244:	6165      	str	r5, [r4, #20]
 8001246:	444e      	add	r6, r9
 8001248:	eba5 0509 	sub.w	r5, r5, r9
 800124c:	6026      	str	r6, [r4, #0]
 800124e:	60a5      	str	r5, [r4, #8]
 8001250:	463e      	mov	r6, r7
 8001252:	42be      	cmp	r6, r7
 8001254:	d900      	bls.n	8001258 <__ssputs_r+0x70>
 8001256:	463e      	mov	r6, r7
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	4632      	mov	r2, r6
 800125c:	4641      	mov	r1, r8
 800125e:	f000 fb86 	bl	800196e <memmove>
 8001262:	68a3      	ldr	r3, [r4, #8]
 8001264:	1b9b      	subs	r3, r3, r6
 8001266:	60a3      	str	r3, [r4, #8]
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	4433      	add	r3, r6
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	2000      	movs	r0, #0
 8001270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001274:	462a      	mov	r2, r5
 8001276:	f000 fb4b 	bl	8001910 <_realloc_r>
 800127a:	4606      	mov	r6, r0
 800127c:	2800      	cmp	r0, #0
 800127e:	d1e0      	bne.n	8001242 <__ssputs_r+0x5a>
 8001280:	6921      	ldr	r1, [r4, #16]
 8001282:	4650      	mov	r0, sl
 8001284:	f000 fbac 	bl	80019e0 <_free_r>
 8001288:	230c      	movs	r3, #12
 800128a:	f8ca 3000 	str.w	r3, [sl]
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001294:	81a3      	strh	r3, [r4, #12]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129a:	e7e9      	b.n	8001270 <__ssputs_r+0x88>

0800129c <_svfiprintf_r>:
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	4698      	mov	r8, r3
 80012a2:	898b      	ldrh	r3, [r1, #12]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	b09d      	sub	sp, #116	; 0x74
 80012a8:	4607      	mov	r7, r0
 80012aa:	460d      	mov	r5, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	d50e      	bpl.n	80012ce <_svfiprintf_r+0x32>
 80012b0:	690b      	ldr	r3, [r1, #16]
 80012b2:	b963      	cbnz	r3, 80012ce <_svfiprintf_r+0x32>
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	f000 f90f 	bl	80014d8 <_malloc_r>
 80012ba:	6028      	str	r0, [r5, #0]
 80012bc:	6128      	str	r0, [r5, #16]
 80012be:	b920      	cbnz	r0, 80012ca <_svfiprintf_r+0x2e>
 80012c0:	230c      	movs	r3, #12
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c8:	e0d0      	b.n	800146c <_svfiprintf_r+0x1d0>
 80012ca:	2340      	movs	r3, #64	; 0x40
 80012cc:	616b      	str	r3, [r5, #20]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9309      	str	r3, [sp, #36]	; 0x24
 80012d2:	2320      	movs	r3, #32
 80012d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80012dc:	2330      	movs	r3, #48	; 0x30
 80012de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001484 <_svfiprintf_r+0x1e8>
 80012e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80012e6:	f04f 0901 	mov.w	r9, #1
 80012ea:	4623      	mov	r3, r4
 80012ec:	469a      	mov	sl, r3
 80012ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012f2:	b10a      	cbz	r2, 80012f8 <_svfiprintf_r+0x5c>
 80012f4:	2a25      	cmp	r2, #37	; 0x25
 80012f6:	d1f9      	bne.n	80012ec <_svfiprintf_r+0x50>
 80012f8:	ebba 0b04 	subs.w	fp, sl, r4
 80012fc:	d00b      	beq.n	8001316 <_svfiprintf_r+0x7a>
 80012fe:	465b      	mov	r3, fp
 8001300:	4622      	mov	r2, r4
 8001302:	4629      	mov	r1, r5
 8001304:	4638      	mov	r0, r7
 8001306:	f7ff ff6f 	bl	80011e8 <__ssputs_r>
 800130a:	3001      	adds	r0, #1
 800130c:	f000 80a9 	beq.w	8001462 <_svfiprintf_r+0x1c6>
 8001310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001312:	445a      	add	r2, fp
 8001314:	9209      	str	r2, [sp, #36]	; 0x24
 8001316:	f89a 3000 	ldrb.w	r3, [sl]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80a1 	beq.w	8001462 <_svfiprintf_r+0x1c6>
 8001320:	2300      	movs	r3, #0
 8001322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800132a:	f10a 0a01 	add.w	sl, sl, #1
 800132e:	9304      	str	r3, [sp, #16]
 8001330:	9307      	str	r3, [sp, #28]
 8001332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001336:	931a      	str	r3, [sp, #104]	; 0x68
 8001338:	4654      	mov	r4, sl
 800133a:	2205      	movs	r2, #5
 800133c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001340:	4850      	ldr	r0, [pc, #320]	; (8001484 <_svfiprintf_r+0x1e8>)
 8001342:	f7fe ff55 	bl	80001f0 <memchr>
 8001346:	9a04      	ldr	r2, [sp, #16]
 8001348:	b9d8      	cbnz	r0, 8001382 <_svfiprintf_r+0xe6>
 800134a:	06d0      	lsls	r0, r2, #27
 800134c:	bf44      	itt	mi
 800134e:	2320      	movmi	r3, #32
 8001350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001354:	0711      	lsls	r1, r2, #28
 8001356:	bf44      	itt	mi
 8001358:	232b      	movmi	r3, #43	; 0x2b
 800135a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800135e:	f89a 3000 	ldrb.w	r3, [sl]
 8001362:	2b2a      	cmp	r3, #42	; 0x2a
 8001364:	d015      	beq.n	8001392 <_svfiprintf_r+0xf6>
 8001366:	9a07      	ldr	r2, [sp, #28]
 8001368:	4654      	mov	r4, sl
 800136a:	2000      	movs	r0, #0
 800136c:	f04f 0c0a 	mov.w	ip, #10
 8001370:	4621      	mov	r1, r4
 8001372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001376:	3b30      	subs	r3, #48	; 0x30
 8001378:	2b09      	cmp	r3, #9
 800137a:	d94d      	bls.n	8001418 <_svfiprintf_r+0x17c>
 800137c:	b1b0      	cbz	r0, 80013ac <_svfiprintf_r+0x110>
 800137e:	9207      	str	r2, [sp, #28]
 8001380:	e014      	b.n	80013ac <_svfiprintf_r+0x110>
 8001382:	eba0 0308 	sub.w	r3, r0, r8
 8001386:	fa09 f303 	lsl.w	r3, r9, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	9304      	str	r3, [sp, #16]
 800138e:	46a2      	mov	sl, r4
 8001390:	e7d2      	b.n	8001338 <_svfiprintf_r+0x9c>
 8001392:	9b03      	ldr	r3, [sp, #12]
 8001394:	1d19      	adds	r1, r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	9103      	str	r1, [sp, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	bfbb      	ittet	lt
 800139e:	425b      	neglt	r3, r3
 80013a0:	f042 0202 	orrlt.w	r2, r2, #2
 80013a4:	9307      	strge	r3, [sp, #28]
 80013a6:	9307      	strlt	r3, [sp, #28]
 80013a8:	bfb8      	it	lt
 80013aa:	9204      	strlt	r2, [sp, #16]
 80013ac:	7823      	ldrb	r3, [r4, #0]
 80013ae:	2b2e      	cmp	r3, #46	; 0x2e
 80013b0:	d10c      	bne.n	80013cc <_svfiprintf_r+0x130>
 80013b2:	7863      	ldrb	r3, [r4, #1]
 80013b4:	2b2a      	cmp	r3, #42	; 0x2a
 80013b6:	d134      	bne.n	8001422 <_svfiprintf_r+0x186>
 80013b8:	9b03      	ldr	r3, [sp, #12]
 80013ba:	1d1a      	adds	r2, r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	9203      	str	r2, [sp, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bfb8      	it	lt
 80013c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80013c8:	3402      	adds	r4, #2
 80013ca:	9305      	str	r3, [sp, #20]
 80013cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001494 <_svfiprintf_r+0x1f8>
 80013d0:	7821      	ldrb	r1, [r4, #0]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4650      	mov	r0, sl
 80013d6:	f7fe ff0b 	bl	80001f0 <memchr>
 80013da:	b138      	cbz	r0, 80013ec <_svfiprintf_r+0x150>
 80013dc:	9b04      	ldr	r3, [sp, #16]
 80013de:	eba0 000a 	sub.w	r0, r0, sl
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	4082      	lsls	r2, r0
 80013e6:	4313      	orrs	r3, r2
 80013e8:	3401      	adds	r4, #1
 80013ea:	9304      	str	r3, [sp, #16]
 80013ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <_svfiprintf_r+0x1ec>)
 80013f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013f6:	2206      	movs	r2, #6
 80013f8:	f7fe fefa 	bl	80001f0 <memchr>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d038      	beq.n	8001472 <_svfiprintf_r+0x1d6>
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <_svfiprintf_r+0x1f0>)
 8001402:	bb1b      	cbnz	r3, 800144c <_svfiprintf_r+0x1b0>
 8001404:	9b03      	ldr	r3, [sp, #12]
 8001406:	3307      	adds	r3, #7
 8001408:	f023 0307 	bic.w	r3, r3, #7
 800140c:	3308      	adds	r3, #8
 800140e:	9303      	str	r3, [sp, #12]
 8001410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001412:	4433      	add	r3, r6
 8001414:	9309      	str	r3, [sp, #36]	; 0x24
 8001416:	e768      	b.n	80012ea <_svfiprintf_r+0x4e>
 8001418:	fb0c 3202 	mla	r2, ip, r2, r3
 800141c:	460c      	mov	r4, r1
 800141e:	2001      	movs	r0, #1
 8001420:	e7a6      	b.n	8001370 <_svfiprintf_r+0xd4>
 8001422:	2300      	movs	r3, #0
 8001424:	3401      	adds	r4, #1
 8001426:	9305      	str	r3, [sp, #20]
 8001428:	4619      	mov	r1, r3
 800142a:	f04f 0c0a 	mov.w	ip, #10
 800142e:	4620      	mov	r0, r4
 8001430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001434:	3a30      	subs	r2, #48	; 0x30
 8001436:	2a09      	cmp	r2, #9
 8001438:	d903      	bls.n	8001442 <_svfiprintf_r+0x1a6>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0c6      	beq.n	80013cc <_svfiprintf_r+0x130>
 800143e:	9105      	str	r1, [sp, #20]
 8001440:	e7c4      	b.n	80013cc <_svfiprintf_r+0x130>
 8001442:	fb0c 2101 	mla	r1, ip, r1, r2
 8001446:	4604      	mov	r4, r0
 8001448:	2301      	movs	r3, #1
 800144a:	e7f0      	b.n	800142e <_svfiprintf_r+0x192>
 800144c:	ab03      	add	r3, sp, #12
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	462a      	mov	r2, r5
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <_svfiprintf_r+0x1f4>)
 8001454:	a904      	add	r1, sp, #16
 8001456:	4638      	mov	r0, r7
 8001458:	f3af 8000 	nop.w
 800145c:	1c42      	adds	r2, r0, #1
 800145e:	4606      	mov	r6, r0
 8001460:	d1d6      	bne.n	8001410 <_svfiprintf_r+0x174>
 8001462:	89ab      	ldrh	r3, [r5, #12]
 8001464:	065b      	lsls	r3, r3, #25
 8001466:	f53f af2d 	bmi.w	80012c4 <_svfiprintf_r+0x28>
 800146a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800146c:	b01d      	add	sp, #116	; 0x74
 800146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001472:	ab03      	add	r3, sp, #12
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	462a      	mov	r2, r5
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <_svfiprintf_r+0x1f4>)
 800147a:	a904      	add	r1, sp, #16
 800147c:	4638      	mov	r0, r7
 800147e:	f000 f919 	bl	80016b4 <_printf_i>
 8001482:	e7eb      	b.n	800145c <_svfiprintf_r+0x1c0>
 8001484:	08001c1d 	.word	0x08001c1d
 8001488:	08001c27 	.word	0x08001c27
 800148c:	00000000 	.word	0x00000000
 8001490:	080011e9 	.word	0x080011e9
 8001494:	08001c23 	.word	0x08001c23

08001498 <sbrk_aligned>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4e0e      	ldr	r6, [pc, #56]	; (80014d4 <sbrk_aligned+0x3c>)
 800149c:	460c      	mov	r4, r1
 800149e:	6831      	ldr	r1, [r6, #0]
 80014a0:	4605      	mov	r5, r0
 80014a2:	b911      	cbnz	r1, 80014aa <sbrk_aligned+0x12>
 80014a4:	f000 fa7e 	bl	80019a4 <_sbrk_r>
 80014a8:	6030      	str	r0, [r6, #0]
 80014aa:	4621      	mov	r1, r4
 80014ac:	4628      	mov	r0, r5
 80014ae:	f000 fa79 	bl	80019a4 <_sbrk_r>
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	d00a      	beq.n	80014cc <sbrk_aligned+0x34>
 80014b6:	1cc4      	adds	r4, r0, #3
 80014b8:	f024 0403 	bic.w	r4, r4, #3
 80014bc:	42a0      	cmp	r0, r4
 80014be:	d007      	beq.n	80014d0 <sbrk_aligned+0x38>
 80014c0:	1a21      	subs	r1, r4, r0
 80014c2:	4628      	mov	r0, r5
 80014c4:	f000 fa6e 	bl	80019a4 <_sbrk_r>
 80014c8:	3001      	adds	r0, #1
 80014ca:	d101      	bne.n	80014d0 <sbrk_aligned+0x38>
 80014cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80014d0:	4620      	mov	r0, r4
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
 80014d4:	20007d24 	.word	0x20007d24

080014d8 <_malloc_r>:
 80014d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014dc:	1ccd      	adds	r5, r1, #3
 80014de:	f025 0503 	bic.w	r5, r5, #3
 80014e2:	3508      	adds	r5, #8
 80014e4:	2d0c      	cmp	r5, #12
 80014e6:	bf38      	it	cc
 80014e8:	250c      	movcc	r5, #12
 80014ea:	2d00      	cmp	r5, #0
 80014ec:	4607      	mov	r7, r0
 80014ee:	db01      	blt.n	80014f4 <_malloc_r+0x1c>
 80014f0:	42a9      	cmp	r1, r5
 80014f2:	d905      	bls.n	8001500 <_malloc_r+0x28>
 80014f4:	230c      	movs	r3, #12
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	2600      	movs	r6, #0
 80014fa:	4630      	mov	r0, r6
 80014fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001500:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80015d4 <_malloc_r+0xfc>
 8001504:	f000 f9f8 	bl	80018f8 <__malloc_lock>
 8001508:	f8d8 3000 	ldr.w	r3, [r8]
 800150c:	461c      	mov	r4, r3
 800150e:	bb5c      	cbnz	r4, 8001568 <_malloc_r+0x90>
 8001510:	4629      	mov	r1, r5
 8001512:	4638      	mov	r0, r7
 8001514:	f7ff ffc0 	bl	8001498 <sbrk_aligned>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	4604      	mov	r4, r0
 800151c:	d155      	bne.n	80015ca <_malloc_r+0xf2>
 800151e:	f8d8 4000 	ldr.w	r4, [r8]
 8001522:	4626      	mov	r6, r4
 8001524:	2e00      	cmp	r6, #0
 8001526:	d145      	bne.n	80015b4 <_malloc_r+0xdc>
 8001528:	2c00      	cmp	r4, #0
 800152a:	d048      	beq.n	80015be <_malloc_r+0xe6>
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	4631      	mov	r1, r6
 8001530:	4638      	mov	r0, r7
 8001532:	eb04 0903 	add.w	r9, r4, r3
 8001536:	f000 fa35 	bl	80019a4 <_sbrk_r>
 800153a:	4581      	cmp	r9, r0
 800153c:	d13f      	bne.n	80015be <_malloc_r+0xe6>
 800153e:	6821      	ldr	r1, [r4, #0]
 8001540:	1a6d      	subs	r5, r5, r1
 8001542:	4629      	mov	r1, r5
 8001544:	4638      	mov	r0, r7
 8001546:	f7ff ffa7 	bl	8001498 <sbrk_aligned>
 800154a:	3001      	adds	r0, #1
 800154c:	d037      	beq.n	80015be <_malloc_r+0xe6>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	442b      	add	r3, r5
 8001552:	6023      	str	r3, [r4, #0]
 8001554:	f8d8 3000 	ldr.w	r3, [r8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d038      	beq.n	80015ce <_malloc_r+0xf6>
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	42a2      	cmp	r2, r4
 8001560:	d12b      	bne.n	80015ba <_malloc_r+0xe2>
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	e00f      	b.n	8001588 <_malloc_r+0xb0>
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	1b52      	subs	r2, r2, r5
 800156c:	d41f      	bmi.n	80015ae <_malloc_r+0xd6>
 800156e:	2a0b      	cmp	r2, #11
 8001570:	d917      	bls.n	80015a2 <_malloc_r+0xca>
 8001572:	1961      	adds	r1, r4, r5
 8001574:	42a3      	cmp	r3, r4
 8001576:	6025      	str	r5, [r4, #0]
 8001578:	bf18      	it	ne
 800157a:	6059      	strne	r1, [r3, #4]
 800157c:	6863      	ldr	r3, [r4, #4]
 800157e:	bf08      	it	eq
 8001580:	f8c8 1000 	streq.w	r1, [r8]
 8001584:	5162      	str	r2, [r4, r5]
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	4638      	mov	r0, r7
 800158a:	f104 060b 	add.w	r6, r4, #11
 800158e:	f000 f9b9 	bl	8001904 <__malloc_unlock>
 8001592:	f026 0607 	bic.w	r6, r6, #7
 8001596:	1d23      	adds	r3, r4, #4
 8001598:	1af2      	subs	r2, r6, r3
 800159a:	d0ae      	beq.n	80014fa <_malloc_r+0x22>
 800159c:	1b9b      	subs	r3, r3, r6
 800159e:	50a3      	str	r3, [r4, r2]
 80015a0:	e7ab      	b.n	80014fa <_malloc_r+0x22>
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	6862      	ldr	r2, [r4, #4]
 80015a6:	d1dd      	bne.n	8001564 <_malloc_r+0x8c>
 80015a8:	f8c8 2000 	str.w	r2, [r8]
 80015ac:	e7ec      	b.n	8001588 <_malloc_r+0xb0>
 80015ae:	4623      	mov	r3, r4
 80015b0:	6864      	ldr	r4, [r4, #4]
 80015b2:	e7ac      	b.n	800150e <_malloc_r+0x36>
 80015b4:	4634      	mov	r4, r6
 80015b6:	6876      	ldr	r6, [r6, #4]
 80015b8:	e7b4      	b.n	8001524 <_malloc_r+0x4c>
 80015ba:	4613      	mov	r3, r2
 80015bc:	e7cc      	b.n	8001558 <_malloc_r+0x80>
 80015be:	230c      	movs	r3, #12
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4638      	mov	r0, r7
 80015c4:	f000 f99e 	bl	8001904 <__malloc_unlock>
 80015c8:	e797      	b.n	80014fa <_malloc_r+0x22>
 80015ca:	6025      	str	r5, [r4, #0]
 80015cc:	e7dc      	b.n	8001588 <_malloc_r+0xb0>
 80015ce:	605b      	str	r3, [r3, #4]
 80015d0:	deff      	udf	#255	; 0xff
 80015d2:	bf00      	nop
 80015d4:	20007d20 	.word	0x20007d20

080015d8 <_printf_common>:
 80015d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015dc:	4616      	mov	r6, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	688a      	ldr	r2, [r1, #8]
 80015e2:	690b      	ldr	r3, [r1, #16]
 80015e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bfb8      	it	lt
 80015ec:	4613      	movlt	r3, r2
 80015ee:	6033      	str	r3, [r6, #0]
 80015f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015f4:	4607      	mov	r7, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	b10a      	cbz	r2, 80015fe <_printf_common+0x26>
 80015fa:	3301      	adds	r3, #1
 80015fc:	6033      	str	r3, [r6, #0]
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	0699      	lsls	r1, r3, #26
 8001602:	bf42      	ittt	mi
 8001604:	6833      	ldrmi	r3, [r6, #0]
 8001606:	3302      	addmi	r3, #2
 8001608:	6033      	strmi	r3, [r6, #0]
 800160a:	6825      	ldr	r5, [r4, #0]
 800160c:	f015 0506 	ands.w	r5, r5, #6
 8001610:	d106      	bne.n	8001620 <_printf_common+0x48>
 8001612:	f104 0a19 	add.w	sl, r4, #25
 8001616:	68e3      	ldr	r3, [r4, #12]
 8001618:	6832      	ldr	r2, [r6, #0]
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	42ab      	cmp	r3, r5
 800161e:	dc26      	bgt.n	800166e <_printf_common+0x96>
 8001620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001624:	1e13      	subs	r3, r2, #0
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	bf18      	it	ne
 800162a:	2301      	movne	r3, #1
 800162c:	0692      	lsls	r2, r2, #26
 800162e:	d42b      	bmi.n	8001688 <_printf_common+0xb0>
 8001630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001634:	4649      	mov	r1, r9
 8001636:	4638      	mov	r0, r7
 8001638:	47c0      	blx	r8
 800163a:	3001      	adds	r0, #1
 800163c:	d01e      	beq.n	800167c <_printf_common+0xa4>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	6922      	ldr	r2, [r4, #16]
 8001642:	f003 0306 	and.w	r3, r3, #6
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf02      	ittt	eq
 800164a:	68e5      	ldreq	r5, [r4, #12]
 800164c:	6833      	ldreq	r3, [r6, #0]
 800164e:	1aed      	subeq	r5, r5, r3
 8001650:	68a3      	ldr	r3, [r4, #8]
 8001652:	bf0c      	ite	eq
 8001654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001658:	2500      	movne	r5, #0
 800165a:	4293      	cmp	r3, r2
 800165c:	bfc4      	itt	gt
 800165e:	1a9b      	subgt	r3, r3, r2
 8001660:	18ed      	addgt	r5, r5, r3
 8001662:	2600      	movs	r6, #0
 8001664:	341a      	adds	r4, #26
 8001666:	42b5      	cmp	r5, r6
 8001668:	d11a      	bne.n	80016a0 <_printf_common+0xc8>
 800166a:	2000      	movs	r0, #0
 800166c:	e008      	b.n	8001680 <_printf_common+0xa8>
 800166e:	2301      	movs	r3, #1
 8001670:	4652      	mov	r2, sl
 8001672:	4649      	mov	r1, r9
 8001674:	4638      	mov	r0, r7
 8001676:	47c0      	blx	r8
 8001678:	3001      	adds	r0, #1
 800167a:	d103      	bne.n	8001684 <_printf_common+0xac>
 800167c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001684:	3501      	adds	r5, #1
 8001686:	e7c6      	b.n	8001616 <_printf_common+0x3e>
 8001688:	18e1      	adds	r1, r4, r3
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	2030      	movs	r0, #48	; 0x30
 800168e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001692:	4422      	add	r2, r4
 8001694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800169c:	3302      	adds	r3, #2
 800169e:	e7c7      	b.n	8001630 <_printf_common+0x58>
 80016a0:	2301      	movs	r3, #1
 80016a2:	4622      	mov	r2, r4
 80016a4:	4649      	mov	r1, r9
 80016a6:	4638      	mov	r0, r7
 80016a8:	47c0      	blx	r8
 80016aa:	3001      	adds	r0, #1
 80016ac:	d0e6      	beq.n	800167c <_printf_common+0xa4>
 80016ae:	3601      	adds	r6, #1
 80016b0:	e7d9      	b.n	8001666 <_printf_common+0x8e>
	...

080016b4 <_printf_i>:
 80016b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016b8:	7e0f      	ldrb	r7, [r1, #24]
 80016ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016bc:	2f78      	cmp	r7, #120	; 0x78
 80016be:	4691      	mov	r9, r2
 80016c0:	4680      	mov	r8, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	469a      	mov	sl, r3
 80016c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80016ca:	d807      	bhi.n	80016dc <_printf_i+0x28>
 80016cc:	2f62      	cmp	r7, #98	; 0x62
 80016ce:	d80a      	bhi.n	80016e6 <_printf_i+0x32>
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	f000 80d4 	beq.w	800187e <_printf_i+0x1ca>
 80016d6:	2f58      	cmp	r7, #88	; 0x58
 80016d8:	f000 80c0 	beq.w	800185c <_printf_i+0x1a8>
 80016dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016e4:	e03a      	b.n	800175c <_printf_i+0xa8>
 80016e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016ea:	2b15      	cmp	r3, #21
 80016ec:	d8f6      	bhi.n	80016dc <_printf_i+0x28>
 80016ee:	a101      	add	r1, pc, #4	; (adr r1, 80016f4 <_printf_i+0x40>)
 80016f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016f4:	0800174d 	.word	0x0800174d
 80016f8:	08001761 	.word	0x08001761
 80016fc:	080016dd 	.word	0x080016dd
 8001700:	080016dd 	.word	0x080016dd
 8001704:	080016dd 	.word	0x080016dd
 8001708:	080016dd 	.word	0x080016dd
 800170c:	08001761 	.word	0x08001761
 8001710:	080016dd 	.word	0x080016dd
 8001714:	080016dd 	.word	0x080016dd
 8001718:	080016dd 	.word	0x080016dd
 800171c:	080016dd 	.word	0x080016dd
 8001720:	08001865 	.word	0x08001865
 8001724:	0800178d 	.word	0x0800178d
 8001728:	0800181f 	.word	0x0800181f
 800172c:	080016dd 	.word	0x080016dd
 8001730:	080016dd 	.word	0x080016dd
 8001734:	08001887 	.word	0x08001887
 8001738:	080016dd 	.word	0x080016dd
 800173c:	0800178d 	.word	0x0800178d
 8001740:	080016dd 	.word	0x080016dd
 8001744:	080016dd 	.word	0x080016dd
 8001748:	08001827 	.word	0x08001827
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	1d1a      	adds	r2, r3, #4
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	602a      	str	r2, [r5, #0]
 8001754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800175c:	2301      	movs	r3, #1
 800175e:	e09f      	b.n	80018a0 <_printf_i+0x1ec>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	0607      	lsls	r7, r0, #24
 8001766:	f103 0104 	add.w	r1, r3, #4
 800176a:	6029      	str	r1, [r5, #0]
 800176c:	d501      	bpl.n	8001772 <_printf_i+0xbe>
 800176e:	681e      	ldr	r6, [r3, #0]
 8001770:	e003      	b.n	800177a <_printf_i+0xc6>
 8001772:	0646      	lsls	r6, r0, #25
 8001774:	d5fb      	bpl.n	800176e <_printf_i+0xba>
 8001776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800177a:	2e00      	cmp	r6, #0
 800177c:	da03      	bge.n	8001786 <_printf_i+0xd2>
 800177e:	232d      	movs	r3, #45	; 0x2d
 8001780:	4276      	negs	r6, r6
 8001782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001786:	485a      	ldr	r0, [pc, #360]	; (80018f0 <_printf_i+0x23c>)
 8001788:	230a      	movs	r3, #10
 800178a:	e012      	b.n	80017b2 <_printf_i+0xfe>
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	6820      	ldr	r0, [r4, #0]
 8001790:	1d19      	adds	r1, r3, #4
 8001792:	6029      	str	r1, [r5, #0]
 8001794:	0605      	lsls	r5, r0, #24
 8001796:	d501      	bpl.n	800179c <_printf_i+0xe8>
 8001798:	681e      	ldr	r6, [r3, #0]
 800179a:	e002      	b.n	80017a2 <_printf_i+0xee>
 800179c:	0641      	lsls	r1, r0, #25
 800179e:	d5fb      	bpl.n	8001798 <_printf_i+0xe4>
 80017a0:	881e      	ldrh	r6, [r3, #0]
 80017a2:	4853      	ldr	r0, [pc, #332]	; (80018f0 <_printf_i+0x23c>)
 80017a4:	2f6f      	cmp	r7, #111	; 0x6f
 80017a6:	bf0c      	ite	eq
 80017a8:	2308      	moveq	r3, #8
 80017aa:	230a      	movne	r3, #10
 80017ac:	2100      	movs	r1, #0
 80017ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017b2:	6865      	ldr	r5, [r4, #4]
 80017b4:	60a5      	str	r5, [r4, #8]
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	bfa2      	ittt	ge
 80017ba:	6821      	ldrge	r1, [r4, #0]
 80017bc:	f021 0104 	bicge.w	r1, r1, #4
 80017c0:	6021      	strge	r1, [r4, #0]
 80017c2:	b90e      	cbnz	r6, 80017c8 <_printf_i+0x114>
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	d04b      	beq.n	8001860 <_printf_i+0x1ac>
 80017c8:	4615      	mov	r5, r2
 80017ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80017ce:	fb03 6711 	mls	r7, r3, r1, r6
 80017d2:	5dc7      	ldrb	r7, [r0, r7]
 80017d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017d8:	4637      	mov	r7, r6
 80017da:	42bb      	cmp	r3, r7
 80017dc:	460e      	mov	r6, r1
 80017de:	d9f4      	bls.n	80017ca <_printf_i+0x116>
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d10b      	bne.n	80017fc <_printf_i+0x148>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	07de      	lsls	r6, r3, #31
 80017e8:	d508      	bpl.n	80017fc <_printf_i+0x148>
 80017ea:	6923      	ldr	r3, [r4, #16]
 80017ec:	6861      	ldr	r1, [r4, #4]
 80017ee:	4299      	cmp	r1, r3
 80017f0:	bfde      	ittt	le
 80017f2:	2330      	movle	r3, #48	; 0x30
 80017f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80017fc:	1b52      	subs	r2, r2, r5
 80017fe:	6122      	str	r2, [r4, #16]
 8001800:	f8cd a000 	str.w	sl, [sp]
 8001804:	464b      	mov	r3, r9
 8001806:	aa03      	add	r2, sp, #12
 8001808:	4621      	mov	r1, r4
 800180a:	4640      	mov	r0, r8
 800180c:	f7ff fee4 	bl	80015d8 <_printf_common>
 8001810:	3001      	adds	r0, #1
 8001812:	d14a      	bne.n	80018aa <_printf_i+0x1f6>
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001818:	b004      	add	sp, #16
 800181a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	f043 0320 	orr.w	r3, r3, #32
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	4833      	ldr	r0, [pc, #204]	; (80018f4 <_printf_i+0x240>)
 8001828:	2778      	movs	r7, #120	; 0x78
 800182a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	6829      	ldr	r1, [r5, #0]
 8001832:	061f      	lsls	r7, r3, #24
 8001834:	f851 6b04 	ldr.w	r6, [r1], #4
 8001838:	d402      	bmi.n	8001840 <_printf_i+0x18c>
 800183a:	065f      	lsls	r7, r3, #25
 800183c:	bf48      	it	mi
 800183e:	b2b6      	uxthmi	r6, r6
 8001840:	07df      	lsls	r7, r3, #31
 8001842:	bf48      	it	mi
 8001844:	f043 0320 	orrmi.w	r3, r3, #32
 8001848:	6029      	str	r1, [r5, #0]
 800184a:	bf48      	it	mi
 800184c:	6023      	strmi	r3, [r4, #0]
 800184e:	b91e      	cbnz	r6, 8001858 <_printf_i+0x1a4>
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f023 0320 	bic.w	r3, r3, #32
 8001856:	6023      	str	r3, [r4, #0]
 8001858:	2310      	movs	r3, #16
 800185a:	e7a7      	b.n	80017ac <_printf_i+0xf8>
 800185c:	4824      	ldr	r0, [pc, #144]	; (80018f0 <_printf_i+0x23c>)
 800185e:	e7e4      	b.n	800182a <_printf_i+0x176>
 8001860:	4615      	mov	r5, r2
 8001862:	e7bd      	b.n	80017e0 <_printf_i+0x12c>
 8001864:	682b      	ldr	r3, [r5, #0]
 8001866:	6826      	ldr	r6, [r4, #0]
 8001868:	6961      	ldr	r1, [r4, #20]
 800186a:	1d18      	adds	r0, r3, #4
 800186c:	6028      	str	r0, [r5, #0]
 800186e:	0635      	lsls	r5, r6, #24
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	d501      	bpl.n	8001878 <_printf_i+0x1c4>
 8001874:	6019      	str	r1, [r3, #0]
 8001876:	e002      	b.n	800187e <_printf_i+0x1ca>
 8001878:	0670      	lsls	r0, r6, #25
 800187a:	d5fb      	bpl.n	8001874 <_printf_i+0x1c0>
 800187c:	8019      	strh	r1, [r3, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	6123      	str	r3, [r4, #16]
 8001882:	4615      	mov	r5, r2
 8001884:	e7bc      	b.n	8001800 <_printf_i+0x14c>
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	1d1a      	adds	r2, r3, #4
 800188a:	602a      	str	r2, [r5, #0]
 800188c:	681d      	ldr	r5, [r3, #0]
 800188e:	6862      	ldr	r2, [r4, #4]
 8001890:	2100      	movs	r1, #0
 8001892:	4628      	mov	r0, r5
 8001894:	f7fe fcac 	bl	80001f0 <memchr>
 8001898:	b108      	cbz	r0, 800189e <_printf_i+0x1ea>
 800189a:	1b40      	subs	r0, r0, r5
 800189c:	6060      	str	r0, [r4, #4]
 800189e:	6863      	ldr	r3, [r4, #4]
 80018a0:	6123      	str	r3, [r4, #16]
 80018a2:	2300      	movs	r3, #0
 80018a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018a8:	e7aa      	b.n	8001800 <_printf_i+0x14c>
 80018aa:	6923      	ldr	r3, [r4, #16]
 80018ac:	462a      	mov	r2, r5
 80018ae:	4649      	mov	r1, r9
 80018b0:	4640      	mov	r0, r8
 80018b2:	47d0      	blx	sl
 80018b4:	3001      	adds	r0, #1
 80018b6:	d0ad      	beq.n	8001814 <_printf_i+0x160>
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	079b      	lsls	r3, r3, #30
 80018bc:	d413      	bmi.n	80018e6 <_printf_i+0x232>
 80018be:	68e0      	ldr	r0, [r4, #12]
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	4298      	cmp	r0, r3
 80018c4:	bfb8      	it	lt
 80018c6:	4618      	movlt	r0, r3
 80018c8:	e7a6      	b.n	8001818 <_printf_i+0x164>
 80018ca:	2301      	movs	r3, #1
 80018cc:	4632      	mov	r2, r6
 80018ce:	4649      	mov	r1, r9
 80018d0:	4640      	mov	r0, r8
 80018d2:	47d0      	blx	sl
 80018d4:	3001      	adds	r0, #1
 80018d6:	d09d      	beq.n	8001814 <_printf_i+0x160>
 80018d8:	3501      	adds	r5, #1
 80018da:	68e3      	ldr	r3, [r4, #12]
 80018dc:	9903      	ldr	r1, [sp, #12]
 80018de:	1a5b      	subs	r3, r3, r1
 80018e0:	42ab      	cmp	r3, r5
 80018e2:	dcf2      	bgt.n	80018ca <_printf_i+0x216>
 80018e4:	e7eb      	b.n	80018be <_printf_i+0x20a>
 80018e6:	2500      	movs	r5, #0
 80018e8:	f104 0619 	add.w	r6, r4, #25
 80018ec:	e7f5      	b.n	80018da <_printf_i+0x226>
 80018ee:	bf00      	nop
 80018f0:	08001c2e 	.word	0x08001c2e
 80018f4:	08001c3f 	.word	0x08001c3f

080018f8 <__malloc_lock>:
 80018f8:	4801      	ldr	r0, [pc, #4]	; (8001900 <__malloc_lock+0x8>)
 80018fa:	f7ff bc73 	b.w	80011e4 <__retarget_lock_acquire_recursive>
 80018fe:	bf00      	nop
 8001900:	20007d1c 	.word	0x20007d1c

08001904 <__malloc_unlock>:
 8001904:	4801      	ldr	r0, [pc, #4]	; (800190c <__malloc_unlock+0x8>)
 8001906:	f7ff bc6e 	b.w	80011e6 <__retarget_lock_release_recursive>
 800190a:	bf00      	nop
 800190c:	20007d1c 	.word	0x20007d1c

08001910 <_realloc_r>:
 8001910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001914:	4680      	mov	r8, r0
 8001916:	4614      	mov	r4, r2
 8001918:	460e      	mov	r6, r1
 800191a:	b921      	cbnz	r1, 8001926 <_realloc_r+0x16>
 800191c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	4611      	mov	r1, r2
 8001922:	f7ff bdd9 	b.w	80014d8 <_malloc_r>
 8001926:	b92a      	cbnz	r2, 8001934 <_realloc_r+0x24>
 8001928:	f000 f85a 	bl	80019e0 <_free_r>
 800192c:	4625      	mov	r5, r4
 800192e:	4628      	mov	r0, r5
 8001930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001934:	f000 f8a0 	bl	8001a78 <_malloc_usable_size_r>
 8001938:	4284      	cmp	r4, r0
 800193a:	4607      	mov	r7, r0
 800193c:	d802      	bhi.n	8001944 <_realloc_r+0x34>
 800193e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001942:	d812      	bhi.n	800196a <_realloc_r+0x5a>
 8001944:	4621      	mov	r1, r4
 8001946:	4640      	mov	r0, r8
 8001948:	f7ff fdc6 	bl	80014d8 <_malloc_r>
 800194c:	4605      	mov	r5, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d0ed      	beq.n	800192e <_realloc_r+0x1e>
 8001952:	42bc      	cmp	r4, r7
 8001954:	4622      	mov	r2, r4
 8001956:	4631      	mov	r1, r6
 8001958:	bf28      	it	cs
 800195a:	463a      	movcs	r2, r7
 800195c:	f000 f832 	bl	80019c4 <memcpy>
 8001960:	4631      	mov	r1, r6
 8001962:	4640      	mov	r0, r8
 8001964:	f000 f83c 	bl	80019e0 <_free_r>
 8001968:	e7e1      	b.n	800192e <_realloc_r+0x1e>
 800196a:	4635      	mov	r5, r6
 800196c:	e7df      	b.n	800192e <_realloc_r+0x1e>

0800196e <memmove>:
 800196e:	4288      	cmp	r0, r1
 8001970:	b510      	push	{r4, lr}
 8001972:	eb01 0402 	add.w	r4, r1, r2
 8001976:	d902      	bls.n	800197e <memmove+0x10>
 8001978:	4284      	cmp	r4, r0
 800197a:	4623      	mov	r3, r4
 800197c:	d807      	bhi.n	800198e <memmove+0x20>
 800197e:	1e43      	subs	r3, r0, #1
 8001980:	42a1      	cmp	r1, r4
 8001982:	d008      	beq.n	8001996 <memmove+0x28>
 8001984:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001988:	f803 2f01 	strb.w	r2, [r3, #1]!
 800198c:	e7f8      	b.n	8001980 <memmove+0x12>
 800198e:	4402      	add	r2, r0
 8001990:	4601      	mov	r1, r0
 8001992:	428a      	cmp	r2, r1
 8001994:	d100      	bne.n	8001998 <memmove+0x2a>
 8001996:	bd10      	pop	{r4, pc}
 8001998:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800199c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019a0:	e7f7      	b.n	8001992 <memmove+0x24>
	...

080019a4 <_sbrk_r>:
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4d06      	ldr	r5, [pc, #24]	; (80019c0 <_sbrk_r+0x1c>)
 80019a8:	2300      	movs	r3, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	602b      	str	r3, [r5, #0]
 80019b0:	f7ff fb02 	bl	8000fb8 <_sbrk>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_sbrk_r+0x1a>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_sbrk_r+0x1a>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	20007d28 	.word	0x20007d28

080019c4 <memcpy>:
 80019c4:	440a      	add	r2, r1
 80019c6:	4291      	cmp	r1, r2
 80019c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80019cc:	d100      	bne.n	80019d0 <memcpy+0xc>
 80019ce:	4770      	bx	lr
 80019d0:	b510      	push	{r4, lr}
 80019d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019da:	4291      	cmp	r1, r2
 80019dc:	d1f9      	bne.n	80019d2 <memcpy+0xe>
 80019de:	bd10      	pop	{r4, pc}

080019e0 <_free_r>:
 80019e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019e2:	2900      	cmp	r1, #0
 80019e4:	d044      	beq.n	8001a70 <_free_r+0x90>
 80019e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019ea:	9001      	str	r0, [sp, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f1a1 0404 	sub.w	r4, r1, #4
 80019f2:	bfb8      	it	lt
 80019f4:	18e4      	addlt	r4, r4, r3
 80019f6:	f7ff ff7f 	bl	80018f8 <__malloc_lock>
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <_free_r+0x94>)
 80019fc:	9801      	ldr	r0, [sp, #4]
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	b933      	cbnz	r3, 8001a10 <_free_r+0x30>
 8001a02:	6063      	str	r3, [r4, #4]
 8001a04:	6014      	str	r4, [r2, #0]
 8001a06:	b003      	add	sp, #12
 8001a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a0c:	f7ff bf7a 	b.w	8001904 <__malloc_unlock>
 8001a10:	42a3      	cmp	r3, r4
 8001a12:	d908      	bls.n	8001a26 <_free_r+0x46>
 8001a14:	6825      	ldr	r5, [r4, #0]
 8001a16:	1961      	adds	r1, r4, r5
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	bf01      	itttt	eq
 8001a1c:	6819      	ldreq	r1, [r3, #0]
 8001a1e:	685b      	ldreq	r3, [r3, #4]
 8001a20:	1949      	addeq	r1, r1, r5
 8001a22:	6021      	streq	r1, [r4, #0]
 8001a24:	e7ed      	b.n	8001a02 <_free_r+0x22>
 8001a26:	461a      	mov	r2, r3
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	b10b      	cbz	r3, 8001a30 <_free_r+0x50>
 8001a2c:	42a3      	cmp	r3, r4
 8001a2e:	d9fa      	bls.n	8001a26 <_free_r+0x46>
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	1855      	adds	r5, r2, r1
 8001a34:	42a5      	cmp	r5, r4
 8001a36:	d10b      	bne.n	8001a50 <_free_r+0x70>
 8001a38:	6824      	ldr	r4, [r4, #0]
 8001a3a:	4421      	add	r1, r4
 8001a3c:	1854      	adds	r4, r2, r1
 8001a3e:	42a3      	cmp	r3, r4
 8001a40:	6011      	str	r1, [r2, #0]
 8001a42:	d1e0      	bne.n	8001a06 <_free_r+0x26>
 8001a44:	681c      	ldr	r4, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	6053      	str	r3, [r2, #4]
 8001a4a:	440c      	add	r4, r1
 8001a4c:	6014      	str	r4, [r2, #0]
 8001a4e:	e7da      	b.n	8001a06 <_free_r+0x26>
 8001a50:	d902      	bls.n	8001a58 <_free_r+0x78>
 8001a52:	230c      	movs	r3, #12
 8001a54:	6003      	str	r3, [r0, #0]
 8001a56:	e7d6      	b.n	8001a06 <_free_r+0x26>
 8001a58:	6825      	ldr	r5, [r4, #0]
 8001a5a:	1961      	adds	r1, r4, r5
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	bf04      	itt	eq
 8001a60:	6819      	ldreq	r1, [r3, #0]
 8001a62:	685b      	ldreq	r3, [r3, #4]
 8001a64:	6063      	str	r3, [r4, #4]
 8001a66:	bf04      	itt	eq
 8001a68:	1949      	addeq	r1, r1, r5
 8001a6a:	6021      	streq	r1, [r4, #0]
 8001a6c:	6054      	str	r4, [r2, #4]
 8001a6e:	e7ca      	b.n	8001a06 <_free_r+0x26>
 8001a70:	b003      	add	sp, #12
 8001a72:	bd30      	pop	{r4, r5, pc}
 8001a74:	20007d20 	.word	0x20007d20

08001a78 <_malloc_usable_size_r>:
 8001a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a7c:	1f18      	subs	r0, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bfbc      	itt	lt
 8001a82:	580b      	ldrlt	r3, [r1, r0]
 8001a84:	18c0      	addlt	r0, r0, r3
 8001a86:	4770      	bx	lr

08001a88 <_init>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	bf00      	nop
 8001a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8e:	bc08      	pop	{r3}
 8001a90:	469e      	mov	lr, r3
 8001a92:	4770      	bx	lr

08001a94 <_fini>:
 8001a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a96:	bf00      	nop
 8001a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9a:	bc08      	pop	{r3}
 8001a9c:	469e      	mov	lr, r3
 8001a9e:	4770      	bx	lr
