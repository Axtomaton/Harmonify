
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002234  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002550  08002550  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002550  08002550  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002550  08002550  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002554  08002554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080025b4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080025b4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d73  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000844  00000000  00000000  00021e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  00022688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000159  00000000  00000000  00022888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e47b  00000000  00000000  000229e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000334b  00000000  00000000  00040e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f562c  00000000  00000000  000441a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010c8  00000000  00000000  001397d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0013a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023ac 	.word	0x080023ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080023ac 	.word	0x080023ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <hello>:
#include <stdio.h>
#include "UART.h"



void hello(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b092      	sub	sp, #72	; 0x48
 8000274:	af00      	add	r7, sp, #0
	//use UART to print something.
	char* welcome = "hello, world!\n";
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <hello+0x34>)
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
	USART_Write (USART2, (unsigned char *) welcome, 15);
 800027a:	220f      	movs	r2, #15
 800027c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800027e:	480a      	ldr	r0, [pc, #40]	; (80002a8 <hello+0x38>)
 8000280:	f000 f94a 	bl	8000518 <USART_Write>

	printf("Enter your name: ");
 8000284:	4809      	ldr	r0, [pc, #36]	; (80002ac <hello+0x3c>)
 8000286:	f000 fc4d 	bl	8000b24 <iprintf>
	char name [64];
	scanf (name);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fc5b 	bl	8000b48 <iscanf>
	printf("Hello, %s\n", name);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4619      	mov	r1, r3
 8000296:	4806      	ldr	r0, [pc, #24]	; (80002b0 <hello+0x40>)
 8000298:	f000 fc44 	bl	8000b24 <iprintf>

}
 800029c:	bf00      	nop
 800029e:	3748      	adds	r7, #72	; 0x48
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	080023c4 	.word	0x080023c4
 80002a8:	40004400 	.word	0x40004400
 80002ac:	080023d4 	.word	0x080023d4
 80002b0:	080023e8 	.word	0x080023e8

080002b4 <LED_Init>:
//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <LED_Init+0x7c>)
 80002ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <LED_Init+0x7c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));  
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e2:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002f2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002fe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000302:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800030e:	f023 0320 	bic.w	r3, r3, #32
 8000312:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 8000314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800031e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000322:	60d3      	str	r3, [r2, #12]
	
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000

08000334 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <UART2_Init+0x40>)
 800033a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800033c:	4a0d      	ldr	r2, [pc, #52]	; (8000374 <UART2_Init+0x40>)
 800033e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000342:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <UART2_Init+0x40>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <UART2_Init+0x40>)
 800034c:	f023 030c 	bic.w	r3, r3, #12
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <UART2_Init+0x40>)
 8000356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <UART2_Init+0x40>)
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000364:	f000 f80a 	bl	800037c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <UART2_Init+0x44>)
 800036a:	f000 f84f 	bl	800040c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40004400 	.word	0x40004400

0800037c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <UART2_GPIO_Init+0x8c>)
 8000382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000384:	4a20      	ldr	r2, [pc, #128]	; (8000408 <UART2_GPIO_Init+0x8c>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 800038c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 800039c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80003aa:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b0:	6a1b      	ldr	r3, [r3, #32]
 80003b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80003ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c0:	6a1b      	ldr	r3, [r3, #32]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80003ca:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80003cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80003da:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003ea:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80003ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f6:	f023 030c 	bic.w	r3, r3, #12
 80003fa:	6053      	str	r3, [r2, #4]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000

0800040c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f023 0201 	bic.w	r2, r3, #1
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	f242 028d 	movw	r2, #8333	; 0x208d
 800044a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f043 020c 	orr.w	r2, r3, #12
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2c      	ldr	r2, [pc, #176]	; (800050c <USART_Init+0x100>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d129      	bne.n	80004b4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f043 0220 	orr.w	r2, r3, #32
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f023 0210 	bic.w	r2, r3, #16
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f023 0201 	bic.w	r2, r3, #1
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a16      	ldr	r2, [pc, #88]	; (8000510 <USART_Init+0x104>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d10b      	bne.n	80004d4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <USART_Init+0x108>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <USART_Init+0x108>)
 80004ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004d2:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f043 0201 	orr.w	r2, r3, #1
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80004e0:	bf00      	nop
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80004ee:	bf00      	nop
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <USART_Init+0xe4>
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40004c00 	.word	0x40004c00
 8000510:	40004400 	.word	0x40004400
 8000514:	40013800 	.word	0x40013800

08000518 <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e014      	b.n	8000554 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800052a:	bf00      	nop
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	69db      	ldr	r3, [r3, #28]
 8000530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b29a      	uxth	r2, r3
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000546:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800054a:	f000 f819 	bl	8000580 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	d8e6      	bhi.n	800052a <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800055c:	bf00      	nop
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f9      	beq.n	800055e <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	61da      	str	r2, [r3, #28]
}   
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	fb03 f202 	mul.w	r2, r3, r2
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <USART_Delay+0x3c>)
 8000592:	fba3 1302 	umull	r1, r3, r3, r2
 8000596:	1ad2      	subs	r2, r2, r3
 8000598:	0852      	lsrs	r2, r2, #1
 800059a:	4413      	add	r3, r2
 800059c:	089b      	lsrs	r3, r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80005a0:	bf00      	nop
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f9      	bne.n	80005a2 <USART_Delay+0x22>
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	24924925 	.word	0x24924925

080005c0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <System_Clock_Init+0x1b4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a6a      	ldr	r2, [pc, #424]	; (8000774 <System_Clock_Init+0x1b4>)
 80005cc:	f023 0307 	bic.w	r3, r3, #7
 80005d0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80005d2:	4b68      	ldr	r3, [pc, #416]	; (8000774 <System_Clock_Init+0x1b4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a67      	ldr	r2, [pc, #412]	; (8000774 <System_Clock_Init+0x1b4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <System_Clock_Init+0x1b8>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <System_Clock_Init+0x1b8>)
 80005e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80005ea:	bf00      	nop
 80005ec:	4b62      	ldr	r3, [pc, #392]	; (8000778 <System_Clock_Init+0x1b8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80005f8:	2310      	movs	r3, #16
 80005fa:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80005fc:	4b5e      	ldr	r3, [pc, #376]	; (8000778 <System_Clock_Init+0x1b8>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4a5d      	ldr	r2, [pc, #372]	; (8000778 <System_Clock_Init+0x1b8>)
 8000602:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000606:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000608:	4b5b      	ldr	r3, [pc, #364]	; (8000778 <System_Clock_Init+0x1b8>)
 800060a:	685a      	ldr	r2, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	061b      	lsls	r3, r3, #24
 8000610:	4959      	ldr	r1, [pc, #356]	; (8000778 <System_Clock_Init+0x1b8>)
 8000612:	4313      	orrs	r3, r2
 8000614:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000616:	4b58      	ldr	r3, [pc, #352]	; (8000778 <System_Clock_Init+0x1b8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a57      	ldr	r2, [pc, #348]	; (8000778 <System_Clock_Init+0x1b8>)
 800061c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000620:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000622:	bf00      	nop
 8000624:	4b54      	ldr	r3, [pc, #336]	; (8000778 <System_Clock_Init+0x1b8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800062c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000630:	d0f8      	beq.n	8000624 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000632:	4b51      	ldr	r3, [pc, #324]	; (8000778 <System_Clock_Init+0x1b8>)
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	4a50      	ldr	r2, [pc, #320]	; (8000778 <System_Clock_Init+0x1b8>)
 8000638:	f023 0303 	bic.w	r3, r3, #3
 800063c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800063e:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <System_Clock_Init+0x1b8>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	4a4d      	ldr	r2, [pc, #308]	; (8000778 <System_Clock_Init+0x1b8>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <System_Clock_Init+0x1b8>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000652:	4a49      	ldr	r2, [pc, #292]	; (8000778 <System_Clock_Init+0x1b8>)
 8000654:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000658:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800065a:	4b47      	ldr	r3, [pc, #284]	; (8000778 <System_Clock_Init+0x1b8>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000662:	4a45      	ldr	r2, [pc, #276]	; (8000778 <System_Clock_Init+0x1b8>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <System_Clock_Init+0x1b8>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	4a42      	ldr	r2, [pc, #264]	; (8000778 <System_Clock_Init+0x1b8>)
 8000670:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000674:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000676:	4b40      	ldr	r3, [pc, #256]	; (8000778 <System_Clock_Init+0x1b8>)
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	4a3f      	ldr	r2, [pc, #252]	; (8000778 <System_Clock_Init+0x1b8>)
 800067c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000680:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000682:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <System_Clock_Init+0x1b8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <System_Clock_Init+0x1b8>)
 8000688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800068c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800068e:	bf00      	nop
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <System_Clock_Init+0x1b8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f9      	beq.n	8000690 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 800069c:	4b36      	ldr	r3, [pc, #216]	; (8000778 <System_Clock_Init+0x1b8>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a35      	ldr	r2, [pc, #212]	; (8000778 <System_Clock_Init+0x1b8>)
 80006a2:	f023 0303 	bic.w	r3, r3, #3
 80006a6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80006a8:	4b33      	ldr	r3, [pc, #204]	; (8000778 <System_Clock_Init+0x1b8>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	4a32      	ldr	r2, [pc, #200]	; (8000778 <System_Clock_Init+0x1b8>)
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80006b4:	bf00      	nop
 80006b6:	4b30      	ldr	r3, [pc, #192]	; (8000778 <System_Clock_Init+0x1b8>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f003 030c 	and.w	r3, r3, #12
 80006be:	2b0c      	cmp	r3, #12
 80006c0:	d1f9      	bne.n	80006b6 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80006c2:	4b2d      	ldr	r3, [pc, #180]	; (8000778 <System_Clock_Init+0x1b8>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	4a2c      	ldr	r2, [pc, #176]	; (8000778 <System_Clock_Init+0x1b8>)
 80006c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006cc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <System_Clock_Init+0x1b8>)
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	4a29      	ldr	r2, [pc, #164]	; (8000778 <System_Clock_Init+0x1b8>)
 80006d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006d8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <System_Clock_Init+0x1b8>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	4a26      	ldr	r2, [pc, #152]	; (8000778 <System_Clock_Init+0x1b8>)
 80006e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80006e4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <System_Clock_Init+0x1b8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <System_Clock_Init+0x1b8>)
 80006ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80006f0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80006f2:	bf00      	nop
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <System_Clock_Init+0x1b8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000700:	d0f8      	beq.n	80006f4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <System_Clock_Init+0x1b8>)
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <System_Clock_Init+0x1b8>)
 8000708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800070c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <System_Clock_Init+0x1b8>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	4a19      	ldr	r2, [pc, #100]	; (8000778 <System_Clock_Init+0x1b8>)
 8000714:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000718:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <System_Clock_Init+0x1b8>)
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <System_Clock_Init+0x1b8>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <System_Clock_Init+0x1b8>)
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <System_Clock_Init+0x1b8>)
 800072c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000730:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <System_Clock_Init+0x1b8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <System_Clock_Init+0x1b8>)
 8000738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800073e:	bf00      	nop
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <System_Clock_Init+0x1b8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f9      	beq.n	8000740 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <System_Clock_Init+0x1b8>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <System_Clock_Init+0x1b8>)
 8000754:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <System_Clock_Init+0x1b8>)
 800075e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <System_Clock_Init+0x1b8>)
 8000762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000766:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40022000 	.word	0x40022000
 8000778:	40021000 	.word	0x40021000

0800077c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	e00a      	b.n	80007a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800078e:	f3af 8000 	nop.w
 8000792:	4601      	mov	r1, r0
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	60ba      	str	r2, [r7, #8]
 800079a:	b2ca      	uxtb	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf0      	blt.n	800078e <_read+0x12>
	}

return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e009      	b.n	80007dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbf1      	blt.n	80007c8 <_write+0x12>
	}
	return len;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_close>:

int _close(int file)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
	return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000816:	605a      	str	r2, [r3, #4]
	return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_isatty>:

int _isatty(int file)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	return 0;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f000 f978 	bl	8000b7c <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20018000 	.word	0x20018000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	20000078 	.word	0x20000078
 80008c0:	200001c8 	.word	0x200001c8

080008c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <SystemInit+0x64>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <SystemInit+0x64>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <SystemInit+0x68>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <SystemInit+0x68>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <SystemInit+0x68>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <SystemInit+0x68>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <SystemInit+0x68>)
 80008f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <SystemInit+0x68>)
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SystemInit+0x68>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <SystemInit+0x68>)
 8000908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <SystemInit+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SystemInit+0x64>)
 8000916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800091a:	609a      	str	r2, [r3, #8]
#endif
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	40021000 	.word	0x40021000

08000930 <main>:
#include <stdio.h>

	


int main(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000934:	f7ff fe44 	bl	80005c0 <System_Clock_Init>
	LED_Init();
 8000938:	f7ff fcbc 	bl	80002b4 <LED_Init>
	UART2_Init();
 800093c:	f7ff fcfa 	bl	8000334 <UART2_Init>
//
	hello();
 8000940:	f7ff fc96 	bl	8000270 <hello>
 8000944:	2300      	movs	r3, #0

//	// application run function
//	run_demo() ;
	
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000950:	f7ff ffb8 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f000 f905 	bl	8000b88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff ffd7 	bl	8000930 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000990:	08002558 	.word	0x08002558
  ldr r2, =_sbss
 8000994:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000998:	200001c8 	.word	0x200001c8

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <std>:
 80009a0:	2300      	movs	r3, #0
 80009a2:	b510      	push	{r4, lr}
 80009a4:	4604      	mov	r4, r0
 80009a6:	e9c0 3300 	strd	r3, r3, [r0]
 80009aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009ae:	6083      	str	r3, [r0, #8]
 80009b0:	8181      	strh	r1, [r0, #12]
 80009b2:	6643      	str	r3, [r0, #100]	; 0x64
 80009b4:	81c2      	strh	r2, [r0, #14]
 80009b6:	6183      	str	r3, [r0, #24]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2208      	movs	r2, #8
 80009bc:	305c      	adds	r0, #92	; 0x5c
 80009be:	f000 f8d5 	bl	8000b6c <memset>
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <std+0x58>)
 80009c4:	6263      	str	r3, [r4, #36]	; 0x24
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <std+0x5c>)
 80009c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <std+0x60>)
 80009cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <std+0x64>)
 80009d0:	6323      	str	r3, [r4, #48]	; 0x30
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <std+0x68>)
 80009d4:	6224      	str	r4, [r4, #32]
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d006      	beq.n	80009e8 <std+0x48>
 80009da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80009de:	4294      	cmp	r4, r2
 80009e0:	d002      	beq.n	80009e8 <std+0x48>
 80009e2:	33d0      	adds	r3, #208	; 0xd0
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d105      	bne.n	80009f4 <std+0x54>
 80009e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f0:	f000 b8ee 	b.w	8000bd0 <__retarget_lock_init_recursive>
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	08001aad 	.word	0x08001aad
 80009fc:	08001acf 	.word	0x08001acf
 8000a00:	08001b07 	.word	0x08001b07
 8000a04:	08001b2b 	.word	0x08001b2b
 8000a08:	2000007c 	.word	0x2000007c

08000a0c <stdio_exit_handler>:
 8000a0c:	4a02      	ldr	r2, [pc, #8]	; (8000a18 <stdio_exit_handler+0xc>)
 8000a0e:	4903      	ldr	r1, [pc, #12]	; (8000a1c <stdio_exit_handler+0x10>)
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <stdio_exit_handler+0x14>)
 8000a12:	f000 b869 	b.w	8000ae8 <_fwalk_sglue>
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	08001a45 	.word	0x08001a45
 8000a20:	2000000c 	.word	0x2000000c

08000a24 <cleanup_stdio>:
 8000a24:	6841      	ldr	r1, [r0, #4]
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <cleanup_stdio+0x34>)
 8000a28:	4299      	cmp	r1, r3
 8000a2a:	b510      	push	{r4, lr}
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	d001      	beq.n	8000a34 <cleanup_stdio+0x10>
 8000a30:	f001 f808 	bl	8001a44 <_fflush_r>
 8000a34:	68a1      	ldr	r1, [r4, #8]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <cleanup_stdio+0x38>)
 8000a38:	4299      	cmp	r1, r3
 8000a3a:	d002      	beq.n	8000a42 <cleanup_stdio+0x1e>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f001 f801 	bl	8001a44 <_fflush_r>
 8000a42:	68e1      	ldr	r1, [r4, #12]
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <cleanup_stdio+0x3c>)
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d004      	beq.n	8000a54 <cleanup_stdio+0x30>
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a50:	f000 bff8 	b.w	8001a44 <_fflush_r>
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	bf00      	nop
 8000a58:	2000007c 	.word	0x2000007c
 8000a5c:	200000e4 	.word	0x200000e4
 8000a60:	2000014c 	.word	0x2000014c

08000a64 <global_stdio_init.part.0>:
 8000a64:	b510      	push	{r4, lr}
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <global_stdio_init.part.0+0x30>)
 8000a68:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <global_stdio_init.part.0+0x34>)
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <global_stdio_init.part.0+0x38>)
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	4620      	mov	r0, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	2104      	movs	r1, #4
 8000a74:	f7ff ff94 	bl	80009a0 <std>
 8000a78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2109      	movs	r1, #9
 8000a80:	f7ff ff8e 	bl	80009a0 <std>
 8000a84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a88:	2202      	movs	r2, #2
 8000a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a8e:	2112      	movs	r1, #18
 8000a90:	f7ff bf86 	b.w	80009a0 <std>
 8000a94:	200001b4 	.word	0x200001b4
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	08000a0d 	.word	0x08000a0d

08000aa0 <__sfp_lock_acquire>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	; (8000aa8 <__sfp_lock_acquire+0x8>)
 8000aa2:	f000 b896 	b.w	8000bd2 <__retarget_lock_acquire_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	200001b9 	.word	0x200001b9

08000aac <__sfp_lock_release>:
 8000aac:	4801      	ldr	r0, [pc, #4]	; (8000ab4 <__sfp_lock_release+0x8>)
 8000aae:	f000 b891 	b.w	8000bd4 <__retarget_lock_release_recursive>
 8000ab2:	bf00      	nop
 8000ab4:	200001b9 	.word	0x200001b9

08000ab8 <__sinit>:
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4604      	mov	r4, r0
 8000abc:	f7ff fff0 	bl	8000aa0 <__sfp_lock_acquire>
 8000ac0:	6a23      	ldr	r3, [r4, #32]
 8000ac2:	b11b      	cbz	r3, 8000acc <__sinit+0x14>
 8000ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ac8:	f7ff bff0 	b.w	8000aac <__sfp_lock_release>
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__sinit+0x28>)
 8000ace:	6223      	str	r3, [r4, #32]
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__sinit+0x2c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1f5      	bne.n	8000ac4 <__sinit+0xc>
 8000ad8:	f7ff ffc4 	bl	8000a64 <global_stdio_init.part.0>
 8000adc:	e7f2      	b.n	8000ac4 <__sinit+0xc>
 8000ade:	bf00      	nop
 8000ae0:	08000a25 	.word	0x08000a25
 8000ae4:	200001b4 	.word	0x200001b4

08000ae8 <_fwalk_sglue>:
 8000ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aec:	4607      	mov	r7, r0
 8000aee:	4688      	mov	r8, r1
 8000af0:	4614      	mov	r4, r2
 8000af2:	2600      	movs	r6, #0
 8000af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000af8:	f1b9 0901 	subs.w	r9, r9, #1
 8000afc:	d505      	bpl.n	8000b0a <_fwalk_sglue+0x22>
 8000afe:	6824      	ldr	r4, [r4, #0]
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d1f7      	bne.n	8000af4 <_fwalk_sglue+0xc>
 8000b04:	4630      	mov	r0, r6
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	89ab      	ldrh	r3, [r5, #12]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d907      	bls.n	8000b20 <_fwalk_sglue+0x38>
 8000b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b14:	3301      	adds	r3, #1
 8000b16:	d003      	beq.n	8000b20 <_fwalk_sglue+0x38>
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	47c0      	blx	r8
 8000b1e:	4306      	orrs	r6, r0
 8000b20:	3568      	adds	r5, #104	; 0x68
 8000b22:	e7e9      	b.n	8000af8 <_fwalk_sglue+0x10>

08000b24 <iprintf>:
 8000b24:	b40f      	push	{r0, r1, r2, r3}
 8000b26:	b507      	push	{r0, r1, r2, lr}
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <iprintf+0x20>)
 8000b2a:	ab04      	add	r3, sp, #16
 8000b2c:	6808      	ldr	r0, [r1, #0]
 8000b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b32:	6881      	ldr	r1, [r0, #8]
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	f000 f877 	bl	8000c28 <_vfiprintf_r>
 8000b3a:	b003      	add	sp, #12
 8000b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr
 8000b44:	20000058 	.word	0x20000058

08000b48 <iscanf>:
 8000b48:	b40f      	push	{r0, r1, r2, r3}
 8000b4a:	b507      	push	{r0, r1, r2, lr}
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <iscanf+0x20>)
 8000b4e:	ab04      	add	r3, sp, #16
 8000b50:	6808      	ldr	r0, [r1, #0]
 8000b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b56:	6841      	ldr	r1, [r0, #4]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	f000 fd51 	bl	8001600 <_vfiscanf_r>
 8000b5e:	b003      	add	sp, #12
 8000b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b64:	b004      	add	sp, #16
 8000b66:	4770      	bx	lr
 8000b68:	20000058 	.word	0x20000058

08000b6c <memset>:
 8000b6c:	4402      	add	r2, r0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d100      	bne.n	8000b76 <memset+0xa>
 8000b74:	4770      	bx	lr
 8000b76:	f803 1b01 	strb.w	r1, [r3], #1
 8000b7a:	e7f9      	b.n	8000b70 <memset+0x4>

08000b7c <__errno>:
 8000b7c:	4b01      	ldr	r3, [pc, #4]	; (8000b84 <__errno+0x8>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000058 	.word	0x20000058

08000b88 <__libc_init_array>:
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	4d0d      	ldr	r5, [pc, #52]	; (8000bc0 <__libc_init_array+0x38>)
 8000b8c:	4c0d      	ldr	r4, [pc, #52]	; (8000bc4 <__libc_init_array+0x3c>)
 8000b8e:	1b64      	subs	r4, r4, r5
 8000b90:	10a4      	asrs	r4, r4, #2
 8000b92:	2600      	movs	r6, #0
 8000b94:	42a6      	cmp	r6, r4
 8000b96:	d109      	bne.n	8000bac <__libc_init_array+0x24>
 8000b98:	4d0b      	ldr	r5, [pc, #44]	; (8000bc8 <__libc_init_array+0x40>)
 8000b9a:	4c0c      	ldr	r4, [pc, #48]	; (8000bcc <__libc_init_array+0x44>)
 8000b9c:	f001 fc06 	bl	80023ac <_init>
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	10a4      	asrs	r4, r4, #2
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	42a6      	cmp	r6, r4
 8000ba8:	d105      	bne.n	8000bb6 <__libc_init_array+0x2e>
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb0:	4798      	blx	r3
 8000bb2:	3601      	adds	r6, #1
 8000bb4:	e7ee      	b.n	8000b94 <__libc_init_array+0xc>
 8000bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bba:	4798      	blx	r3
 8000bbc:	3601      	adds	r6, #1
 8000bbe:	e7f2      	b.n	8000ba6 <__libc_init_array+0x1e>
 8000bc0:	08002550 	.word	0x08002550
 8000bc4:	08002550 	.word	0x08002550
 8000bc8:	08002550 	.word	0x08002550
 8000bcc:	08002554 	.word	0x08002554

08000bd0 <__retarget_lock_init_recursive>:
 8000bd0:	4770      	bx	lr

08000bd2 <__retarget_lock_acquire_recursive>:
 8000bd2:	4770      	bx	lr

08000bd4 <__retarget_lock_release_recursive>:
 8000bd4:	4770      	bx	lr

08000bd6 <__sfputc_r>:
 8000bd6:	6893      	ldr	r3, [r2, #8]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	b410      	push	{r4}
 8000bde:	6093      	str	r3, [r2, #8]
 8000be0:	da08      	bge.n	8000bf4 <__sfputc_r+0x1e>
 8000be2:	6994      	ldr	r4, [r2, #24]
 8000be4:	42a3      	cmp	r3, r4
 8000be6:	db01      	blt.n	8000bec <__sfputc_r+0x16>
 8000be8:	290a      	cmp	r1, #10
 8000bea:	d103      	bne.n	8000bf4 <__sfputc_r+0x1e>
 8000bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf0:	f001 b984 	b.w	8001efc <__swbuf_r>
 8000bf4:	6813      	ldr	r3, [r2, #0]
 8000bf6:	1c58      	adds	r0, r3, #1
 8000bf8:	6010      	str	r0, [r2, #0]
 8000bfa:	7019      	strb	r1, [r3, #0]
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <__sfputs_r>:
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	4606      	mov	r6, r0
 8000c08:	460f      	mov	r7, r1
 8000c0a:	4614      	mov	r4, r2
 8000c0c:	18d5      	adds	r5, r2, r3
 8000c0e:	42ac      	cmp	r4, r5
 8000c10:	d101      	bne.n	8000c16 <__sfputs_r+0x12>
 8000c12:	2000      	movs	r0, #0
 8000c14:	e007      	b.n	8000c26 <__sfputs_r+0x22>
 8000c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1a:	463a      	mov	r2, r7
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f7ff ffda 	bl	8000bd6 <__sfputc_r>
 8000c22:	1c43      	adds	r3, r0, #1
 8000c24:	d1f3      	bne.n	8000c0e <__sfputs_r+0xa>
 8000c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c28 <_vfiprintf_r>:
 8000c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c2c:	460d      	mov	r5, r1
 8000c2e:	b09d      	sub	sp, #116	; 0x74
 8000c30:	4614      	mov	r4, r2
 8000c32:	4698      	mov	r8, r3
 8000c34:	4606      	mov	r6, r0
 8000c36:	b118      	cbz	r0, 8000c40 <_vfiprintf_r+0x18>
 8000c38:	6a03      	ldr	r3, [r0, #32]
 8000c3a:	b90b      	cbnz	r3, 8000c40 <_vfiprintf_r+0x18>
 8000c3c:	f7ff ff3c 	bl	8000ab8 <__sinit>
 8000c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c42:	07d9      	lsls	r1, r3, #31
 8000c44:	d405      	bmi.n	8000c52 <_vfiprintf_r+0x2a>
 8000c46:	89ab      	ldrh	r3, [r5, #12]
 8000c48:	059a      	lsls	r2, r3, #22
 8000c4a:	d402      	bmi.n	8000c52 <_vfiprintf_r+0x2a>
 8000c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c4e:	f7ff ffc0 	bl	8000bd2 <__retarget_lock_acquire_recursive>
 8000c52:	89ab      	ldrh	r3, [r5, #12]
 8000c54:	071b      	lsls	r3, r3, #28
 8000c56:	d501      	bpl.n	8000c5c <_vfiprintf_r+0x34>
 8000c58:	692b      	ldr	r3, [r5, #16]
 8000c5a:	b99b      	cbnz	r3, 8000c84 <_vfiprintf_r+0x5c>
 8000c5c:	4629      	mov	r1, r5
 8000c5e:	4630      	mov	r0, r6
 8000c60:	f001 f98a 	bl	8001f78 <__swsetup_r>
 8000c64:	b170      	cbz	r0, 8000c84 <_vfiprintf_r+0x5c>
 8000c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c68:	07dc      	lsls	r4, r3, #31
 8000c6a:	d504      	bpl.n	8000c76 <_vfiprintf_r+0x4e>
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c70:	b01d      	add	sp, #116	; 0x74
 8000c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c76:	89ab      	ldrh	r3, [r5, #12]
 8000c78:	0598      	lsls	r0, r3, #22
 8000c7a:	d4f7      	bmi.n	8000c6c <_vfiprintf_r+0x44>
 8000c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c7e:	f7ff ffa9 	bl	8000bd4 <__retarget_lock_release_recursive>
 8000c82:	e7f3      	b.n	8000c6c <_vfiprintf_r+0x44>
 8000c84:	2300      	movs	r3, #0
 8000c86:	9309      	str	r3, [sp, #36]	; 0x24
 8000c88:	2320      	movs	r3, #32
 8000c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c92:	2330      	movs	r3, #48	; 0x30
 8000c94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e48 <_vfiprintf_r+0x220>
 8000c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c9c:	f04f 0901 	mov.w	r9, #1
 8000ca0:	4623      	mov	r3, r4
 8000ca2:	469a      	mov	sl, r3
 8000ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca8:	b10a      	cbz	r2, 8000cae <_vfiprintf_r+0x86>
 8000caa:	2a25      	cmp	r2, #37	; 0x25
 8000cac:	d1f9      	bne.n	8000ca2 <_vfiprintf_r+0x7a>
 8000cae:	ebba 0b04 	subs.w	fp, sl, r4
 8000cb2:	d00b      	beq.n	8000ccc <_vfiprintf_r+0xa4>
 8000cb4:	465b      	mov	r3, fp
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	4629      	mov	r1, r5
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f7ff ffa2 	bl	8000c04 <__sfputs_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	f000 80a9 	beq.w	8000e18 <_vfiprintf_r+0x1f0>
 8000cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cc8:	445a      	add	r2, fp
 8000cca:	9209      	str	r2, [sp, #36]	; 0x24
 8000ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80a1 	beq.w	8000e18 <_vfiprintf_r+0x1f0>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ce0:	f10a 0a01 	add.w	sl, sl, #1
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	9307      	str	r3, [sp, #28]
 8000ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cec:	931a      	str	r3, [sp, #104]	; 0x68
 8000cee:	4654      	mov	r4, sl
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf6:	4854      	ldr	r0, [pc, #336]	; (8000e48 <_vfiprintf_r+0x220>)
 8000cf8:	f7ff fa6a 	bl	80001d0 <memchr>
 8000cfc:	9a04      	ldr	r2, [sp, #16]
 8000cfe:	b9d8      	cbnz	r0, 8000d38 <_vfiprintf_r+0x110>
 8000d00:	06d1      	lsls	r1, r2, #27
 8000d02:	bf44      	itt	mi
 8000d04:	2320      	movmi	r3, #32
 8000d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d0a:	0713      	lsls	r3, r2, #28
 8000d0c:	bf44      	itt	mi
 8000d0e:	232b      	movmi	r3, #43	; 0x2b
 8000d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d14:	f89a 3000 	ldrb.w	r3, [sl]
 8000d18:	2b2a      	cmp	r3, #42	; 0x2a
 8000d1a:	d015      	beq.n	8000d48 <_vfiprintf_r+0x120>
 8000d1c:	9a07      	ldr	r2, [sp, #28]
 8000d1e:	4654      	mov	r4, sl
 8000d20:	2000      	movs	r0, #0
 8000d22:	f04f 0c0a 	mov.w	ip, #10
 8000d26:	4621      	mov	r1, r4
 8000d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d2c:	3b30      	subs	r3, #48	; 0x30
 8000d2e:	2b09      	cmp	r3, #9
 8000d30:	d94d      	bls.n	8000dce <_vfiprintf_r+0x1a6>
 8000d32:	b1b0      	cbz	r0, 8000d62 <_vfiprintf_r+0x13a>
 8000d34:	9207      	str	r2, [sp, #28]
 8000d36:	e014      	b.n	8000d62 <_vfiprintf_r+0x13a>
 8000d38:	eba0 0308 	sub.w	r3, r0, r8
 8000d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	9304      	str	r3, [sp, #16]
 8000d44:	46a2      	mov	sl, r4
 8000d46:	e7d2      	b.n	8000cee <_vfiprintf_r+0xc6>
 8000d48:	9b03      	ldr	r3, [sp, #12]
 8000d4a:	1d19      	adds	r1, r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	9103      	str	r1, [sp, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bfbb      	ittet	lt
 8000d54:	425b      	neglt	r3, r3
 8000d56:	f042 0202 	orrlt.w	r2, r2, #2
 8000d5a:	9307      	strge	r3, [sp, #28]
 8000d5c:	9307      	strlt	r3, [sp, #28]
 8000d5e:	bfb8      	it	lt
 8000d60:	9204      	strlt	r2, [sp, #16]
 8000d62:	7823      	ldrb	r3, [r4, #0]
 8000d64:	2b2e      	cmp	r3, #46	; 0x2e
 8000d66:	d10c      	bne.n	8000d82 <_vfiprintf_r+0x15a>
 8000d68:	7863      	ldrb	r3, [r4, #1]
 8000d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d6c:	d134      	bne.n	8000dd8 <_vfiprintf_r+0x1b0>
 8000d6e:	9b03      	ldr	r3, [sp, #12]
 8000d70:	1d1a      	adds	r2, r3, #4
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	9203      	str	r2, [sp, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	bfb8      	it	lt
 8000d7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d7e:	3402      	adds	r4, #2
 8000d80:	9305      	str	r3, [sp, #20]
 8000d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e58 <_vfiprintf_r+0x230>
 8000d86:	7821      	ldrb	r1, [r4, #0]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	f7ff fa20 	bl	80001d0 <memchr>
 8000d90:	b138      	cbz	r0, 8000da2 <_vfiprintf_r+0x17a>
 8000d92:	9b04      	ldr	r3, [sp, #16]
 8000d94:	eba0 000a 	sub.w	r0, r0, sl
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	4082      	lsls	r2, r0
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	3401      	adds	r4, #1
 8000da0:	9304      	str	r3, [sp, #16]
 8000da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <_vfiprintf_r+0x224>)
 8000da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000dac:	2206      	movs	r2, #6
 8000dae:	f7ff fa0f 	bl	80001d0 <memchr>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d03f      	beq.n	8000e36 <_vfiprintf_r+0x20e>
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <_vfiprintf_r+0x228>)
 8000db8:	bb1b      	cbnz	r3, 8000e02 <_vfiprintf_r+0x1da>
 8000dba:	9b03      	ldr	r3, [sp, #12]
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	f023 0307 	bic.w	r3, r3, #7
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	9303      	str	r3, [sp, #12]
 8000dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dc8:	443b      	add	r3, r7
 8000dca:	9309      	str	r3, [sp, #36]	; 0x24
 8000dcc:	e768      	b.n	8000ca0 <_vfiprintf_r+0x78>
 8000dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	e7a6      	b.n	8000d26 <_vfiprintf_r+0xfe>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	3401      	adds	r4, #1
 8000ddc:	9305      	str	r3, [sp, #20]
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 0c0a 	mov.w	ip, #10
 8000de4:	4620      	mov	r0, r4
 8000de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dea:	3a30      	subs	r2, #48	; 0x30
 8000dec:	2a09      	cmp	r2, #9
 8000dee:	d903      	bls.n	8000df8 <_vfiprintf_r+0x1d0>
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0c6      	beq.n	8000d82 <_vfiprintf_r+0x15a>
 8000df4:	9105      	str	r1, [sp, #20]
 8000df6:	e7c4      	b.n	8000d82 <_vfiprintf_r+0x15a>
 8000df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e7f0      	b.n	8000de4 <_vfiprintf_r+0x1bc>
 8000e02:	ab03      	add	r3, sp, #12
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	462a      	mov	r2, r5
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <_vfiprintf_r+0x22c>)
 8000e0a:	a904      	add	r1, sp, #16
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f3af 8000 	nop.w
 8000e12:	4607      	mov	r7, r0
 8000e14:	1c78      	adds	r0, r7, #1
 8000e16:	d1d6      	bne.n	8000dc6 <_vfiprintf_r+0x19e>
 8000e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e1a:	07d9      	lsls	r1, r3, #31
 8000e1c:	d405      	bmi.n	8000e2a <_vfiprintf_r+0x202>
 8000e1e:	89ab      	ldrh	r3, [r5, #12]
 8000e20:	059a      	lsls	r2, r3, #22
 8000e22:	d402      	bmi.n	8000e2a <_vfiprintf_r+0x202>
 8000e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e26:	f7ff fed5 	bl	8000bd4 <__retarget_lock_release_recursive>
 8000e2a:	89ab      	ldrh	r3, [r5, #12]
 8000e2c:	065b      	lsls	r3, r3, #25
 8000e2e:	f53f af1d 	bmi.w	8000c6c <_vfiprintf_r+0x44>
 8000e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e34:	e71c      	b.n	8000c70 <_vfiprintf_r+0x48>
 8000e36:	ab03      	add	r3, sp, #12
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <_vfiprintf_r+0x22c>)
 8000e3e:	a904      	add	r1, sp, #16
 8000e40:	4630      	mov	r0, r6
 8000e42:	f000 f919 	bl	8001078 <_printf_i>
 8000e46:	e7e4      	b.n	8000e12 <_vfiprintf_r+0x1ea>
 8000e48:	08002400 	.word	0x08002400
 8000e4c:	0800240a 	.word	0x0800240a
 8000e50:	00000000 	.word	0x00000000
 8000e54:	08000c05 	.word	0x08000c05
 8000e58:	08002406 	.word	0x08002406

08000e5c <sbrk_aligned>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4e0e      	ldr	r6, [pc, #56]	; (8000e98 <sbrk_aligned+0x3c>)
 8000e60:	460c      	mov	r4, r1
 8000e62:	6831      	ldr	r1, [r6, #0]
 8000e64:	4605      	mov	r5, r0
 8000e66:	b911      	cbnz	r1, 8000e6e <sbrk_aligned+0x12>
 8000e68:	f001 fa1c 	bl	80022a4 <_sbrk_r>
 8000e6c:	6030      	str	r0, [r6, #0]
 8000e6e:	4621      	mov	r1, r4
 8000e70:	4628      	mov	r0, r5
 8000e72:	f001 fa17 	bl	80022a4 <_sbrk_r>
 8000e76:	1c43      	adds	r3, r0, #1
 8000e78:	d00a      	beq.n	8000e90 <sbrk_aligned+0x34>
 8000e7a:	1cc4      	adds	r4, r0, #3
 8000e7c:	f024 0403 	bic.w	r4, r4, #3
 8000e80:	42a0      	cmp	r0, r4
 8000e82:	d007      	beq.n	8000e94 <sbrk_aligned+0x38>
 8000e84:	1a21      	subs	r1, r4, r0
 8000e86:	4628      	mov	r0, r5
 8000e88:	f001 fa0c 	bl	80022a4 <_sbrk_r>
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	d101      	bne.n	8000e94 <sbrk_aligned+0x38>
 8000e90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e94:	4620      	mov	r0, r4
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
 8000e98:	200001c0 	.word	0x200001c0

08000e9c <_malloc_r>:
 8000e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea0:	1ccd      	adds	r5, r1, #3
 8000ea2:	f025 0503 	bic.w	r5, r5, #3
 8000ea6:	3508      	adds	r5, #8
 8000ea8:	2d0c      	cmp	r5, #12
 8000eaa:	bf38      	it	cc
 8000eac:	250c      	movcc	r5, #12
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	4607      	mov	r7, r0
 8000eb2:	db01      	blt.n	8000eb8 <_malloc_r+0x1c>
 8000eb4:	42a9      	cmp	r1, r5
 8000eb6:	d905      	bls.n	8000ec4 <_malloc_r+0x28>
 8000eb8:	230c      	movs	r3, #12
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ec4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f98 <_malloc_r+0xfc>
 8000ec8:	f000 fde4 	bl	8001a94 <__malloc_lock>
 8000ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	bb5c      	cbnz	r4, 8000f2c <_malloc_r+0x90>
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	f7ff ffc0 	bl	8000e5c <sbrk_aligned>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	4604      	mov	r4, r0
 8000ee0:	d155      	bne.n	8000f8e <_malloc_r+0xf2>
 8000ee2:	f8d8 4000 	ldr.w	r4, [r8]
 8000ee6:	4626      	mov	r6, r4
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d145      	bne.n	8000f78 <_malloc_r+0xdc>
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d048      	beq.n	8000f82 <_malloc_r+0xe6>
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	eb04 0903 	add.w	r9, r4, r3
 8000efa:	f001 f9d3 	bl	80022a4 <_sbrk_r>
 8000efe:	4581      	cmp	r9, r0
 8000f00:	d13f      	bne.n	8000f82 <_malloc_r+0xe6>
 8000f02:	6821      	ldr	r1, [r4, #0]
 8000f04:	1a6d      	subs	r5, r5, r1
 8000f06:	4629      	mov	r1, r5
 8000f08:	4638      	mov	r0, r7
 8000f0a:	f7ff ffa7 	bl	8000e5c <sbrk_aligned>
 8000f0e:	3001      	adds	r0, #1
 8000f10:	d037      	beq.n	8000f82 <_malloc_r+0xe6>
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	442b      	add	r3, r5
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	f8d8 3000 	ldr.w	r3, [r8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d038      	beq.n	8000f92 <_malloc_r+0xf6>
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	42a2      	cmp	r2, r4
 8000f24:	d12b      	bne.n	8000f7e <_malloc_r+0xe2>
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	e00f      	b.n	8000f4c <_malloc_r+0xb0>
 8000f2c:	6822      	ldr	r2, [r4, #0]
 8000f2e:	1b52      	subs	r2, r2, r5
 8000f30:	d41f      	bmi.n	8000f72 <_malloc_r+0xd6>
 8000f32:	2a0b      	cmp	r2, #11
 8000f34:	d917      	bls.n	8000f66 <_malloc_r+0xca>
 8000f36:	1961      	adds	r1, r4, r5
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	6025      	str	r5, [r4, #0]
 8000f3c:	bf18      	it	ne
 8000f3e:	6059      	strne	r1, [r3, #4]
 8000f40:	6863      	ldr	r3, [r4, #4]
 8000f42:	bf08      	it	eq
 8000f44:	f8c8 1000 	streq.w	r1, [r8]
 8000f48:	5162      	str	r2, [r4, r5]
 8000f4a:	604b      	str	r3, [r1, #4]
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f104 060b 	add.w	r6, r4, #11
 8000f52:	f000 fda5 	bl	8001aa0 <__malloc_unlock>
 8000f56:	f026 0607 	bic.w	r6, r6, #7
 8000f5a:	1d23      	adds	r3, r4, #4
 8000f5c:	1af2      	subs	r2, r6, r3
 8000f5e:	d0ae      	beq.n	8000ebe <_malloc_r+0x22>
 8000f60:	1b9b      	subs	r3, r3, r6
 8000f62:	50a3      	str	r3, [r4, r2]
 8000f64:	e7ab      	b.n	8000ebe <_malloc_r+0x22>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	6862      	ldr	r2, [r4, #4]
 8000f6a:	d1dd      	bne.n	8000f28 <_malloc_r+0x8c>
 8000f6c:	f8c8 2000 	str.w	r2, [r8]
 8000f70:	e7ec      	b.n	8000f4c <_malloc_r+0xb0>
 8000f72:	4623      	mov	r3, r4
 8000f74:	6864      	ldr	r4, [r4, #4]
 8000f76:	e7ac      	b.n	8000ed2 <_malloc_r+0x36>
 8000f78:	4634      	mov	r4, r6
 8000f7a:	6876      	ldr	r6, [r6, #4]
 8000f7c:	e7b4      	b.n	8000ee8 <_malloc_r+0x4c>
 8000f7e:	4613      	mov	r3, r2
 8000f80:	e7cc      	b.n	8000f1c <_malloc_r+0x80>
 8000f82:	230c      	movs	r3, #12
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4638      	mov	r0, r7
 8000f88:	f000 fd8a 	bl	8001aa0 <__malloc_unlock>
 8000f8c:	e797      	b.n	8000ebe <_malloc_r+0x22>
 8000f8e:	6025      	str	r5, [r4, #0]
 8000f90:	e7dc      	b.n	8000f4c <_malloc_r+0xb0>
 8000f92:	605b      	str	r3, [r3, #4]
 8000f94:	deff      	udf	#255	; 0xff
 8000f96:	bf00      	nop
 8000f98:	200001bc 	.word	0x200001bc

08000f9c <_printf_common>:
 8000f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa0:	4616      	mov	r6, r2
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	688a      	ldr	r2, [r1, #8]
 8000fa6:	690b      	ldr	r3, [r1, #16]
 8000fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	bfb8      	it	lt
 8000fb0:	4613      	movlt	r3, r2
 8000fb2:	6033      	str	r3, [r6, #0]
 8000fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fb8:	4607      	mov	r7, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	b10a      	cbz	r2, 8000fc2 <_printf_common+0x26>
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	6033      	str	r3, [r6, #0]
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	0699      	lsls	r1, r3, #26
 8000fc6:	bf42      	ittt	mi
 8000fc8:	6833      	ldrmi	r3, [r6, #0]
 8000fca:	3302      	addmi	r3, #2
 8000fcc:	6033      	strmi	r3, [r6, #0]
 8000fce:	6825      	ldr	r5, [r4, #0]
 8000fd0:	f015 0506 	ands.w	r5, r5, #6
 8000fd4:	d106      	bne.n	8000fe4 <_printf_common+0x48>
 8000fd6:	f104 0a19 	add.w	sl, r4, #25
 8000fda:	68e3      	ldr	r3, [r4, #12]
 8000fdc:	6832      	ldr	r2, [r6, #0]
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	42ab      	cmp	r3, r5
 8000fe2:	dc26      	bgt.n	8001032 <_printf_common+0x96>
 8000fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	bf18      	it	ne
 8000fee:	2301      	movne	r3, #1
 8000ff0:	0692      	lsls	r2, r2, #26
 8000ff2:	d42b      	bmi.n	800104c <_printf_common+0xb0>
 8000ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	47c0      	blx	r8
 8000ffe:	3001      	adds	r0, #1
 8001000:	d01e      	beq.n	8001040 <_printf_common+0xa4>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	6922      	ldr	r2, [r4, #16]
 8001006:	f003 0306 	and.w	r3, r3, #6
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf02      	ittt	eq
 800100e:	68e5      	ldreq	r5, [r4, #12]
 8001010:	6833      	ldreq	r3, [r6, #0]
 8001012:	1aed      	subeq	r5, r5, r3
 8001014:	68a3      	ldr	r3, [r4, #8]
 8001016:	bf0c      	ite	eq
 8001018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800101c:	2500      	movne	r5, #0
 800101e:	4293      	cmp	r3, r2
 8001020:	bfc4      	itt	gt
 8001022:	1a9b      	subgt	r3, r3, r2
 8001024:	18ed      	addgt	r5, r5, r3
 8001026:	2600      	movs	r6, #0
 8001028:	341a      	adds	r4, #26
 800102a:	42b5      	cmp	r5, r6
 800102c:	d11a      	bne.n	8001064 <_printf_common+0xc8>
 800102e:	2000      	movs	r0, #0
 8001030:	e008      	b.n	8001044 <_printf_common+0xa8>
 8001032:	2301      	movs	r3, #1
 8001034:	4652      	mov	r2, sl
 8001036:	4649      	mov	r1, r9
 8001038:	4638      	mov	r0, r7
 800103a:	47c0      	blx	r8
 800103c:	3001      	adds	r0, #1
 800103e:	d103      	bne.n	8001048 <_printf_common+0xac>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001048:	3501      	adds	r5, #1
 800104a:	e7c6      	b.n	8000fda <_printf_common+0x3e>
 800104c:	18e1      	adds	r1, r4, r3
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	2030      	movs	r0, #48	; 0x30
 8001052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001056:	4422      	add	r2, r4
 8001058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800105c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001060:	3302      	adds	r3, #2
 8001062:	e7c7      	b.n	8000ff4 <_printf_common+0x58>
 8001064:	2301      	movs	r3, #1
 8001066:	4622      	mov	r2, r4
 8001068:	4649      	mov	r1, r9
 800106a:	4638      	mov	r0, r7
 800106c:	47c0      	blx	r8
 800106e:	3001      	adds	r0, #1
 8001070:	d0e6      	beq.n	8001040 <_printf_common+0xa4>
 8001072:	3601      	adds	r6, #1
 8001074:	e7d9      	b.n	800102a <_printf_common+0x8e>
	...

08001078 <_printf_i>:
 8001078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	7e0f      	ldrb	r7, [r1, #24]
 800107e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001080:	2f78      	cmp	r7, #120	; 0x78
 8001082:	4691      	mov	r9, r2
 8001084:	4680      	mov	r8, r0
 8001086:	460c      	mov	r4, r1
 8001088:	469a      	mov	sl, r3
 800108a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800108e:	d807      	bhi.n	80010a0 <_printf_i+0x28>
 8001090:	2f62      	cmp	r7, #98	; 0x62
 8001092:	d80a      	bhi.n	80010aa <_printf_i+0x32>
 8001094:	2f00      	cmp	r7, #0
 8001096:	f000 80d4 	beq.w	8001242 <_printf_i+0x1ca>
 800109a:	2f58      	cmp	r7, #88	; 0x58
 800109c:	f000 80c0 	beq.w	8001220 <_printf_i+0x1a8>
 80010a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010a8:	e03a      	b.n	8001120 <_printf_i+0xa8>
 80010aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010ae:	2b15      	cmp	r3, #21
 80010b0:	d8f6      	bhi.n	80010a0 <_printf_i+0x28>
 80010b2:	a101      	add	r1, pc, #4	; (adr r1, 80010b8 <_printf_i+0x40>)
 80010b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010b8:	08001111 	.word	0x08001111
 80010bc:	08001125 	.word	0x08001125
 80010c0:	080010a1 	.word	0x080010a1
 80010c4:	080010a1 	.word	0x080010a1
 80010c8:	080010a1 	.word	0x080010a1
 80010cc:	080010a1 	.word	0x080010a1
 80010d0:	08001125 	.word	0x08001125
 80010d4:	080010a1 	.word	0x080010a1
 80010d8:	080010a1 	.word	0x080010a1
 80010dc:	080010a1 	.word	0x080010a1
 80010e0:	080010a1 	.word	0x080010a1
 80010e4:	08001229 	.word	0x08001229
 80010e8:	08001151 	.word	0x08001151
 80010ec:	080011e3 	.word	0x080011e3
 80010f0:	080010a1 	.word	0x080010a1
 80010f4:	080010a1 	.word	0x080010a1
 80010f8:	0800124b 	.word	0x0800124b
 80010fc:	080010a1 	.word	0x080010a1
 8001100:	08001151 	.word	0x08001151
 8001104:	080010a1 	.word	0x080010a1
 8001108:	080010a1 	.word	0x080010a1
 800110c:	080011eb 	.word	0x080011eb
 8001110:	682b      	ldr	r3, [r5, #0]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	602a      	str	r2, [r5, #0]
 8001118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800111c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001120:	2301      	movs	r3, #1
 8001122:	e09f      	b.n	8001264 <_printf_i+0x1ec>
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	0607      	lsls	r7, r0, #24
 800112a:	f103 0104 	add.w	r1, r3, #4
 800112e:	6029      	str	r1, [r5, #0]
 8001130:	d501      	bpl.n	8001136 <_printf_i+0xbe>
 8001132:	681e      	ldr	r6, [r3, #0]
 8001134:	e003      	b.n	800113e <_printf_i+0xc6>
 8001136:	0646      	lsls	r6, r0, #25
 8001138:	d5fb      	bpl.n	8001132 <_printf_i+0xba>
 800113a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800113e:	2e00      	cmp	r6, #0
 8001140:	da03      	bge.n	800114a <_printf_i+0xd2>
 8001142:	232d      	movs	r3, #45	; 0x2d
 8001144:	4276      	negs	r6, r6
 8001146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800114a:	485a      	ldr	r0, [pc, #360]	; (80012b4 <_printf_i+0x23c>)
 800114c:	230a      	movs	r3, #10
 800114e:	e012      	b.n	8001176 <_printf_i+0xfe>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	6820      	ldr	r0, [r4, #0]
 8001154:	1d19      	adds	r1, r3, #4
 8001156:	6029      	str	r1, [r5, #0]
 8001158:	0605      	lsls	r5, r0, #24
 800115a:	d501      	bpl.n	8001160 <_printf_i+0xe8>
 800115c:	681e      	ldr	r6, [r3, #0]
 800115e:	e002      	b.n	8001166 <_printf_i+0xee>
 8001160:	0641      	lsls	r1, r0, #25
 8001162:	d5fb      	bpl.n	800115c <_printf_i+0xe4>
 8001164:	881e      	ldrh	r6, [r3, #0]
 8001166:	4853      	ldr	r0, [pc, #332]	; (80012b4 <_printf_i+0x23c>)
 8001168:	2f6f      	cmp	r7, #111	; 0x6f
 800116a:	bf0c      	ite	eq
 800116c:	2308      	moveq	r3, #8
 800116e:	230a      	movne	r3, #10
 8001170:	2100      	movs	r1, #0
 8001172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001176:	6865      	ldr	r5, [r4, #4]
 8001178:	60a5      	str	r5, [r4, #8]
 800117a:	2d00      	cmp	r5, #0
 800117c:	bfa2      	ittt	ge
 800117e:	6821      	ldrge	r1, [r4, #0]
 8001180:	f021 0104 	bicge.w	r1, r1, #4
 8001184:	6021      	strge	r1, [r4, #0]
 8001186:	b90e      	cbnz	r6, 800118c <_printf_i+0x114>
 8001188:	2d00      	cmp	r5, #0
 800118a:	d04b      	beq.n	8001224 <_printf_i+0x1ac>
 800118c:	4615      	mov	r5, r2
 800118e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001192:	fb03 6711 	mls	r7, r3, r1, r6
 8001196:	5dc7      	ldrb	r7, [r0, r7]
 8001198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800119c:	4637      	mov	r7, r6
 800119e:	42bb      	cmp	r3, r7
 80011a0:	460e      	mov	r6, r1
 80011a2:	d9f4      	bls.n	800118e <_printf_i+0x116>
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d10b      	bne.n	80011c0 <_printf_i+0x148>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	07de      	lsls	r6, r3, #31
 80011ac:	d508      	bpl.n	80011c0 <_printf_i+0x148>
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	6861      	ldr	r1, [r4, #4]
 80011b2:	4299      	cmp	r1, r3
 80011b4:	bfde      	ittt	le
 80011b6:	2330      	movle	r3, #48	; 0x30
 80011b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80011c0:	1b52      	subs	r2, r2, r5
 80011c2:	6122      	str	r2, [r4, #16]
 80011c4:	f8cd a000 	str.w	sl, [sp]
 80011c8:	464b      	mov	r3, r9
 80011ca:	aa03      	add	r2, sp, #12
 80011cc:	4621      	mov	r1, r4
 80011ce:	4640      	mov	r0, r8
 80011d0:	f7ff fee4 	bl	8000f9c <_printf_common>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d14a      	bne.n	800126e <_printf_i+0x1f6>
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011dc:	b004      	add	sp, #16
 80011de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	4833      	ldr	r0, [pc, #204]	; (80012b8 <_printf_i+0x240>)
 80011ec:	2778      	movs	r7, #120	; 0x78
 80011ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	6829      	ldr	r1, [r5, #0]
 80011f6:	061f      	lsls	r7, r3, #24
 80011f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80011fc:	d402      	bmi.n	8001204 <_printf_i+0x18c>
 80011fe:	065f      	lsls	r7, r3, #25
 8001200:	bf48      	it	mi
 8001202:	b2b6      	uxthmi	r6, r6
 8001204:	07df      	lsls	r7, r3, #31
 8001206:	bf48      	it	mi
 8001208:	f043 0320 	orrmi.w	r3, r3, #32
 800120c:	6029      	str	r1, [r5, #0]
 800120e:	bf48      	it	mi
 8001210:	6023      	strmi	r3, [r4, #0]
 8001212:	b91e      	cbnz	r6, 800121c <_printf_i+0x1a4>
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f023 0320 	bic.w	r3, r3, #32
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	2310      	movs	r3, #16
 800121e:	e7a7      	b.n	8001170 <_printf_i+0xf8>
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <_printf_i+0x23c>)
 8001222:	e7e4      	b.n	80011ee <_printf_i+0x176>
 8001224:	4615      	mov	r5, r2
 8001226:	e7bd      	b.n	80011a4 <_printf_i+0x12c>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	6826      	ldr	r6, [r4, #0]
 800122c:	6961      	ldr	r1, [r4, #20]
 800122e:	1d18      	adds	r0, r3, #4
 8001230:	6028      	str	r0, [r5, #0]
 8001232:	0635      	lsls	r5, r6, #24
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	d501      	bpl.n	800123c <_printf_i+0x1c4>
 8001238:	6019      	str	r1, [r3, #0]
 800123a:	e002      	b.n	8001242 <_printf_i+0x1ca>
 800123c:	0670      	lsls	r0, r6, #25
 800123e:	d5fb      	bpl.n	8001238 <_printf_i+0x1c0>
 8001240:	8019      	strh	r1, [r3, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	6123      	str	r3, [r4, #16]
 8001246:	4615      	mov	r5, r2
 8001248:	e7bc      	b.n	80011c4 <_printf_i+0x14c>
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	602a      	str	r2, [r5, #0]
 8001250:	681d      	ldr	r5, [r3, #0]
 8001252:	6862      	ldr	r2, [r4, #4]
 8001254:	2100      	movs	r1, #0
 8001256:	4628      	mov	r0, r5
 8001258:	f7fe ffba 	bl	80001d0 <memchr>
 800125c:	b108      	cbz	r0, 8001262 <_printf_i+0x1ea>
 800125e:	1b40      	subs	r0, r0, r5
 8001260:	6060      	str	r0, [r4, #4]
 8001262:	6863      	ldr	r3, [r4, #4]
 8001264:	6123      	str	r3, [r4, #16]
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800126c:	e7aa      	b.n	80011c4 <_printf_i+0x14c>
 800126e:	6923      	ldr	r3, [r4, #16]
 8001270:	462a      	mov	r2, r5
 8001272:	4649      	mov	r1, r9
 8001274:	4640      	mov	r0, r8
 8001276:	47d0      	blx	sl
 8001278:	3001      	adds	r0, #1
 800127a:	d0ad      	beq.n	80011d8 <_printf_i+0x160>
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	079b      	lsls	r3, r3, #30
 8001280:	d413      	bmi.n	80012aa <_printf_i+0x232>
 8001282:	68e0      	ldr	r0, [r4, #12]
 8001284:	9b03      	ldr	r3, [sp, #12]
 8001286:	4298      	cmp	r0, r3
 8001288:	bfb8      	it	lt
 800128a:	4618      	movlt	r0, r3
 800128c:	e7a6      	b.n	80011dc <_printf_i+0x164>
 800128e:	2301      	movs	r3, #1
 8001290:	4632      	mov	r2, r6
 8001292:	4649      	mov	r1, r9
 8001294:	4640      	mov	r0, r8
 8001296:	47d0      	blx	sl
 8001298:	3001      	adds	r0, #1
 800129a:	d09d      	beq.n	80011d8 <_printf_i+0x160>
 800129c:	3501      	adds	r5, #1
 800129e:	68e3      	ldr	r3, [r4, #12]
 80012a0:	9903      	ldr	r1, [sp, #12]
 80012a2:	1a5b      	subs	r3, r3, r1
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	dcf2      	bgt.n	800128e <_printf_i+0x216>
 80012a8:	e7eb      	b.n	8001282 <_printf_i+0x20a>
 80012aa:	2500      	movs	r5, #0
 80012ac:	f104 0619 	add.w	r6, r4, #25
 80012b0:	e7f5      	b.n	800129e <_printf_i+0x226>
 80012b2:	bf00      	nop
 80012b4:	08002411 	.word	0x08002411
 80012b8:	08002422 	.word	0x08002422

080012bc <__svfiscanf_r>:
 80012bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012c0:	461d      	mov	r5, r3
 80012c2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80012c4:	07df      	lsls	r7, r3, #31
 80012c6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80012ca:	4606      	mov	r6, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4692      	mov	sl, r2
 80012d0:	d405      	bmi.n	80012de <__svfiscanf_r+0x22>
 80012d2:	898b      	ldrh	r3, [r1, #12]
 80012d4:	0598      	lsls	r0, r3, #22
 80012d6:	d402      	bmi.n	80012de <__svfiscanf_r+0x22>
 80012d8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80012da:	f7ff fc7a 	bl	8000bd2 <__retarget_lock_acquire_recursive>
 80012de:	2300      	movs	r3, #0
 80012e0:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80012e4:	4baa      	ldr	r3, [pc, #680]	; (8001590 <__svfiscanf_r+0x2d4>)
 80012e6:	93a0      	str	r3, [sp, #640]	; 0x280
 80012e8:	f10d 0804 	add.w	r8, sp, #4
 80012ec:	4ba9      	ldr	r3, [pc, #676]	; (8001594 <__svfiscanf_r+0x2d8>)
 80012ee:	4faa      	ldr	r7, [pc, #680]	; (8001598 <__svfiscanf_r+0x2dc>)
 80012f0:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800159c <__svfiscanf_r+0x2e0>
 80012f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80012f8:	93a1      	str	r3, [sp, #644]	; 0x284
 80012fa:	9500      	str	r5, [sp, #0]
 80012fc:	f89a 3000 	ldrb.w	r3, [sl]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8170 	beq.w	80015e6 <__svfiscanf_r+0x32a>
 8001306:	5cf9      	ldrb	r1, [r7, r3]
 8001308:	f011 0108 	ands.w	r1, r1, #8
 800130c:	f10a 0501 	add.w	r5, sl, #1
 8001310:	d019      	beq.n	8001346 <__svfiscanf_r+0x8a>
 8001312:	6863      	ldr	r3, [r4, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd0f      	ble.n	8001338 <__svfiscanf_r+0x7c>
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	5cba      	ldrb	r2, [r7, r2]
 800131e:	0711      	lsls	r1, r2, #28
 8001320:	d401      	bmi.n	8001326 <__svfiscanf_r+0x6a>
 8001322:	46aa      	mov	sl, r5
 8001324:	e7ea      	b.n	80012fc <__svfiscanf_r+0x40>
 8001326:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001328:	3201      	adds	r2, #1
 800132a:	9245      	str	r2, [sp, #276]	; 0x114
 800132c:	6862      	ldr	r2, [r4, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	3a01      	subs	r2, #1
 8001332:	6062      	str	r2, [r4, #4]
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	e7ec      	b.n	8001312 <__svfiscanf_r+0x56>
 8001338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800133a:	4621      	mov	r1, r4
 800133c:	4630      	mov	r0, r6
 800133e:	4798      	blx	r3
 8001340:	2800      	cmp	r0, #0
 8001342:	d0e9      	beq.n	8001318 <__svfiscanf_r+0x5c>
 8001344:	e7ed      	b.n	8001322 <__svfiscanf_r+0x66>
 8001346:	2b25      	cmp	r3, #37	; 0x25
 8001348:	d012      	beq.n	8001370 <__svfiscanf_r+0xb4>
 800134a:	469a      	mov	sl, r3
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f340 8093 	ble.w	800147a <__svfiscanf_r+0x1be>
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	4553      	cmp	r3, sl
 800135a:	f040 8144 	bne.w	80015e6 <__svfiscanf_r+0x32a>
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	3b01      	subs	r3, #1
 8001362:	6063      	str	r3, [r4, #4]
 8001364:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8001366:	3201      	adds	r2, #1
 8001368:	3301      	adds	r3, #1
 800136a:	6022      	str	r2, [r4, #0]
 800136c:	9345      	str	r3, [sp, #276]	; 0x114
 800136e:	e7d8      	b.n	8001322 <__svfiscanf_r+0x66>
 8001370:	9141      	str	r1, [sp, #260]	; 0x104
 8001372:	9143      	str	r1, [sp, #268]	; 0x10c
 8001374:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8001378:	2b2a      	cmp	r3, #42	; 0x2a
 800137a:	bf02      	ittt	eq
 800137c:	2310      	moveq	r3, #16
 800137e:	9341      	streq	r3, [sp, #260]	; 0x104
 8001380:	f10a 0502 	addeq.w	r5, sl, #2
 8001384:	220a      	movs	r2, #10
 8001386:	46aa      	mov	sl, r5
 8001388:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800138c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001390:	2b09      	cmp	r3, #9
 8001392:	d91d      	bls.n	80013d0 <__svfiscanf_r+0x114>
 8001394:	4881      	ldr	r0, [pc, #516]	; (800159c <__svfiscanf_r+0x2e0>)
 8001396:	2203      	movs	r2, #3
 8001398:	f7fe ff1a 	bl	80001d0 <memchr>
 800139c:	b138      	cbz	r0, 80013ae <__svfiscanf_r+0xf2>
 800139e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80013a0:	eba0 0009 	sub.w	r0, r0, r9
 80013a4:	2301      	movs	r3, #1
 80013a6:	4083      	lsls	r3, r0
 80013a8:	4313      	orrs	r3, r2
 80013aa:	9341      	str	r3, [sp, #260]	; 0x104
 80013ac:	4655      	mov	r5, sl
 80013ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80013b2:	2b78      	cmp	r3, #120	; 0x78
 80013b4:	d807      	bhi.n	80013c6 <__svfiscanf_r+0x10a>
 80013b6:	2b57      	cmp	r3, #87	; 0x57
 80013b8:	d811      	bhi.n	80013de <__svfiscanf_r+0x122>
 80013ba:	2b25      	cmp	r3, #37	; 0x25
 80013bc:	d0c5      	beq.n	800134a <__svfiscanf_r+0x8e>
 80013be:	d857      	bhi.n	8001470 <__svfiscanf_r+0x1b4>
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80c6 	beq.w	8001552 <__svfiscanf_r+0x296>
 80013c6:	2303      	movs	r3, #3
 80013c8:	9347      	str	r3, [sp, #284]	; 0x11c
 80013ca:	230a      	movs	r3, #10
 80013cc:	9342      	str	r3, [sp, #264]	; 0x108
 80013ce:	e07f      	b.n	80014d0 <__svfiscanf_r+0x214>
 80013d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80013d2:	fb02 1103 	mla	r1, r2, r3, r1
 80013d6:	3930      	subs	r1, #48	; 0x30
 80013d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80013da:	4655      	mov	r5, sl
 80013dc:	e7d3      	b.n	8001386 <__svfiscanf_r+0xca>
 80013de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80013e2:	2a20      	cmp	r2, #32
 80013e4:	d8ef      	bhi.n	80013c6 <__svfiscanf_r+0x10a>
 80013e6:	a101      	add	r1, pc, #4	; (adr r1, 80013ec <__svfiscanf_r+0x130>)
 80013e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80013ec:	080014b3 	.word	0x080014b3
 80013f0:	080013c7 	.word	0x080013c7
 80013f4:	080013c7 	.word	0x080013c7
 80013f8:	08001511 	.word	0x08001511
 80013fc:	080013c7 	.word	0x080013c7
 8001400:	080013c7 	.word	0x080013c7
 8001404:	080013c7 	.word	0x080013c7
 8001408:	080013c7 	.word	0x080013c7
 800140c:	080013c7 	.word	0x080013c7
 8001410:	080013c7 	.word	0x080013c7
 8001414:	080013c7 	.word	0x080013c7
 8001418:	08001527 	.word	0x08001527
 800141c:	0800150d 	.word	0x0800150d
 8001420:	08001477 	.word	0x08001477
 8001424:	08001477 	.word	0x08001477
 8001428:	08001477 	.word	0x08001477
 800142c:	080013c7 	.word	0x080013c7
 8001430:	080014c9 	.word	0x080014c9
 8001434:	080013c7 	.word	0x080013c7
 8001438:	080013c7 	.word	0x080013c7
 800143c:	080013c7 	.word	0x080013c7
 8001440:	080013c7 	.word	0x080013c7
 8001444:	08001537 	.word	0x08001537
 8001448:	08001505 	.word	0x08001505
 800144c:	080014ab 	.word	0x080014ab
 8001450:	080013c7 	.word	0x080013c7
 8001454:	080013c7 	.word	0x080013c7
 8001458:	08001533 	.word	0x08001533
 800145c:	080013c7 	.word	0x080013c7
 8001460:	0800150d 	.word	0x0800150d
 8001464:	080013c7 	.word	0x080013c7
 8001468:	080013c7 	.word	0x080013c7
 800146c:	080014b3 	.word	0x080014b3
 8001470:	3b45      	subs	r3, #69	; 0x45
 8001472:	2b02      	cmp	r3, #2
 8001474:	d8a7      	bhi.n	80013c6 <__svfiscanf_r+0x10a>
 8001476:	2305      	movs	r3, #5
 8001478:	e029      	b.n	80014ce <__svfiscanf_r+0x212>
 800147a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800147c:	4621      	mov	r1, r4
 800147e:	4630      	mov	r0, r6
 8001480:	4798      	blx	r3
 8001482:	2800      	cmp	r0, #0
 8001484:	f43f af66 	beq.w	8001354 <__svfiscanf_r+0x98>
 8001488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800148a:	07da      	lsls	r2, r3, #31
 800148c:	f140 80a3 	bpl.w	80015d6 <__svfiscanf_r+0x31a>
 8001490:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001492:	2800      	cmp	r0, #0
 8001494:	d066      	beq.n	8001564 <__svfiscanf_r+0x2a8>
 8001496:	89a3      	ldrh	r3, [r4, #12]
 8001498:	f013 0f40 	tst.w	r3, #64	; 0x40
 800149c:	bf18      	it	ne
 800149e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80014a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80014a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80014ac:	f042 0220 	orr.w	r2, r2, #32
 80014b0:	9241      	str	r2, [sp, #260]	; 0x104
 80014b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80014b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014b8:	9241      	str	r2, [sp, #260]	; 0x104
 80014ba:	2210      	movs	r2, #16
 80014bc:	2b6f      	cmp	r3, #111	; 0x6f
 80014be:	9242      	str	r2, [sp, #264]	; 0x108
 80014c0:	bf34      	ite	cc
 80014c2:	2303      	movcc	r3, #3
 80014c4:	2304      	movcs	r3, #4
 80014c6:	e002      	b.n	80014ce <__svfiscanf_r+0x212>
 80014c8:	2300      	movs	r3, #0
 80014ca:	9342      	str	r3, [sp, #264]	; 0x108
 80014cc:	2303      	movs	r3, #3
 80014ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80014d0:	6863      	ldr	r3, [r4, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dd49      	ble.n	800156a <__svfiscanf_r+0x2ae>
 80014d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80014d8:	065b      	lsls	r3, r3, #25
 80014da:	d404      	bmi.n	80014e6 <__svfiscanf_r+0x22a>
 80014dc:	6823      	ldr	r3, [r4, #0]
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	5cba      	ldrb	r2, [r7, r2]
 80014e2:	0710      	lsls	r0, r2, #28
 80014e4:	d448      	bmi.n	8001578 <__svfiscanf_r+0x2bc>
 80014e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	dc60      	bgt.n	80015ae <__svfiscanf_r+0x2f2>
 80014ec:	466b      	mov	r3, sp
 80014ee:	4622      	mov	r2, r4
 80014f0:	a941      	add	r1, sp, #260	; 0x104
 80014f2:	4630      	mov	r0, r6
 80014f4:	f000 f898 	bl	8001628 <_scanf_chars>
 80014f8:	2801      	cmp	r0, #1
 80014fa:	d074      	beq.n	80015e6 <__svfiscanf_r+0x32a>
 80014fc:	2802      	cmp	r0, #2
 80014fe:	f47f af10 	bne.w	8001322 <__svfiscanf_r+0x66>
 8001502:	e7c1      	b.n	8001488 <__svfiscanf_r+0x1cc>
 8001504:	2308      	movs	r3, #8
 8001506:	9342      	str	r3, [sp, #264]	; 0x108
 8001508:	2304      	movs	r3, #4
 800150a:	e7e0      	b.n	80014ce <__svfiscanf_r+0x212>
 800150c:	220a      	movs	r2, #10
 800150e:	e7d5      	b.n	80014bc <__svfiscanf_r+0x200>
 8001510:	4629      	mov	r1, r5
 8001512:	4640      	mov	r0, r8
 8001514:	f000 f9d6 	bl	80018c4 <__sccl>
 8001518:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800151a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151e:	9341      	str	r3, [sp, #260]	; 0x104
 8001520:	4605      	mov	r5, r0
 8001522:	2301      	movs	r3, #1
 8001524:	e7d3      	b.n	80014ce <__svfiscanf_r+0x212>
 8001526:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800152c:	9341      	str	r3, [sp, #260]	; 0x104
 800152e:	2300      	movs	r3, #0
 8001530:	e7cd      	b.n	80014ce <__svfiscanf_r+0x212>
 8001532:	2302      	movs	r3, #2
 8001534:	e7cb      	b.n	80014ce <__svfiscanf_r+0x212>
 8001536:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001538:	06c3      	lsls	r3, r0, #27
 800153a:	f53f aef2 	bmi.w	8001322 <__svfiscanf_r+0x66>
 800153e:	9b00      	ldr	r3, [sp, #0]
 8001540:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001542:	1d19      	adds	r1, r3, #4
 8001544:	9100      	str	r1, [sp, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	07c0      	lsls	r0, r0, #31
 800154a:	bf4c      	ite	mi
 800154c:	801a      	strhmi	r2, [r3, #0]
 800154e:	601a      	strpl	r2, [r3, #0]
 8001550:	e6e7      	b.n	8001322 <__svfiscanf_r+0x66>
 8001552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001554:	07d8      	lsls	r0, r3, #31
 8001556:	d405      	bmi.n	8001564 <__svfiscanf_r+0x2a8>
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	0599      	lsls	r1, r3, #22
 800155c:	d402      	bmi.n	8001564 <__svfiscanf_r+0x2a8>
 800155e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001560:	f7ff fb38 	bl	8000bd4 <__retarget_lock_release_recursive>
 8001564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001568:	e79b      	b.n	80014a2 <__svfiscanf_r+0x1e6>
 800156a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800156c:	4621      	mov	r1, r4
 800156e:	4630      	mov	r0, r6
 8001570:	4798      	blx	r3
 8001572:	2800      	cmp	r0, #0
 8001574:	d0af      	beq.n	80014d6 <__svfiscanf_r+0x21a>
 8001576:	e787      	b.n	8001488 <__svfiscanf_r+0x1cc>
 8001578:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800157a:	3201      	adds	r2, #1
 800157c:	9245      	str	r2, [sp, #276]	; 0x114
 800157e:	6862      	ldr	r2, [r4, #4]
 8001580:	3a01      	subs	r2, #1
 8001582:	2a00      	cmp	r2, #0
 8001584:	6062      	str	r2, [r4, #4]
 8001586:	dd0b      	ble.n	80015a0 <__svfiscanf_r+0x2e4>
 8001588:	3301      	adds	r3, #1
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	e7a6      	b.n	80014dc <__svfiscanf_r+0x220>
 800158e:	bf00      	nop
 8001590:	08001ba7 	.word	0x08001ba7
 8001594:	08002109 	.word	0x08002109
 8001598:	0800244f 	.word	0x0800244f
 800159c:	08002406 	.word	0x08002406
 80015a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80015a2:	4621      	mov	r1, r4
 80015a4:	4630      	mov	r0, r6
 80015a6:	4798      	blx	r3
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d097      	beq.n	80014dc <__svfiscanf_r+0x220>
 80015ac:	e76c      	b.n	8001488 <__svfiscanf_r+0x1cc>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	dc06      	bgt.n	80015c0 <__svfiscanf_r+0x304>
 80015b2:	466b      	mov	r3, sp
 80015b4:	4622      	mov	r2, r4
 80015b6:	a941      	add	r1, sp, #260	; 0x104
 80015b8:	4630      	mov	r0, r6
 80015ba:	f000 f88f 	bl	80016dc <_scanf_i>
 80015be:	e79b      	b.n	80014f8 <__svfiscanf_r+0x23c>
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <__svfiscanf_r+0x340>)
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f43f aead 	beq.w	8001322 <__svfiscanf_r+0x66>
 80015c8:	466b      	mov	r3, sp
 80015ca:	4622      	mov	r2, r4
 80015cc:	a941      	add	r1, sp, #260	; 0x104
 80015ce:	4630      	mov	r0, r6
 80015d0:	f3af 8000 	nop.w
 80015d4:	e790      	b.n	80014f8 <__svfiscanf_r+0x23c>
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	0599      	lsls	r1, r3, #22
 80015da:	f53f af59 	bmi.w	8001490 <__svfiscanf_r+0x1d4>
 80015de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e0:	f7ff faf8 	bl	8000bd4 <__retarget_lock_release_recursive>
 80015e4:	e754      	b.n	8001490 <__svfiscanf_r+0x1d4>
 80015e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015e8:	07da      	lsls	r2, r3, #31
 80015ea:	d405      	bmi.n	80015f8 <__svfiscanf_r+0x33c>
 80015ec:	89a3      	ldrh	r3, [r4, #12]
 80015ee:	059b      	lsls	r3, r3, #22
 80015f0:	d402      	bmi.n	80015f8 <__svfiscanf_r+0x33c>
 80015f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015f4:	f7ff faee 	bl	8000bd4 <__retarget_lock_release_recursive>
 80015f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80015fa:	e752      	b.n	80014a2 <__svfiscanf_r+0x1e6>
 80015fc:	00000000 	.word	0x00000000

08001600 <_vfiscanf_r>:
 8001600:	b530      	push	{r4, r5, lr}
 8001602:	4604      	mov	r4, r0
 8001604:	b085      	sub	sp, #20
 8001606:	b148      	cbz	r0, 800161c <_vfiscanf_r+0x1c>
 8001608:	6a05      	ldr	r5, [r0, #32]
 800160a:	b93d      	cbnz	r5, 800161c <_vfiscanf_r+0x1c>
 800160c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001610:	9101      	str	r1, [sp, #4]
 8001612:	f7ff fa51 	bl	8000ab8 <__sinit>
 8001616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800161a:	9901      	ldr	r1, [sp, #4]
 800161c:	4620      	mov	r0, r4
 800161e:	b005      	add	sp, #20
 8001620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001624:	f7ff be4a 	b.w	80012bc <__svfiscanf_r>

08001628 <_scanf_chars>:
 8001628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800162c:	4615      	mov	r5, r2
 800162e:	688a      	ldr	r2, [r1, #8]
 8001630:	4680      	mov	r8, r0
 8001632:	460c      	mov	r4, r1
 8001634:	b932      	cbnz	r2, 8001644 <_scanf_chars+0x1c>
 8001636:	698a      	ldr	r2, [r1, #24]
 8001638:	2a00      	cmp	r2, #0
 800163a:	bf0c      	ite	eq
 800163c:	2201      	moveq	r2, #1
 800163e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8001642:	608a      	str	r2, [r1, #8]
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80016d8 <_scanf_chars+0xb0>
 800164a:	06d1      	lsls	r1, r2, #27
 800164c:	bf5f      	itttt	pl
 800164e:	681a      	ldrpl	r2, [r3, #0]
 8001650:	1d11      	addpl	r1, r2, #4
 8001652:	6019      	strpl	r1, [r3, #0]
 8001654:	6816      	ldrpl	r6, [r2, #0]
 8001656:	2700      	movs	r7, #0
 8001658:	69a0      	ldr	r0, [r4, #24]
 800165a:	b188      	cbz	r0, 8001680 <_scanf_chars+0x58>
 800165c:	2801      	cmp	r0, #1
 800165e:	d107      	bne.n	8001670 <_scanf_chars+0x48>
 8001660:	682a      	ldr	r2, [r5, #0]
 8001662:	7811      	ldrb	r1, [r2, #0]
 8001664:	6962      	ldr	r2, [r4, #20]
 8001666:	5c52      	ldrb	r2, [r2, r1]
 8001668:	b952      	cbnz	r2, 8001680 <_scanf_chars+0x58>
 800166a:	2f00      	cmp	r7, #0
 800166c:	d031      	beq.n	80016d2 <_scanf_chars+0xaa>
 800166e:	e022      	b.n	80016b6 <_scanf_chars+0x8e>
 8001670:	2802      	cmp	r0, #2
 8001672:	d120      	bne.n	80016b6 <_scanf_chars+0x8e>
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f819 3003 	ldrb.w	r3, [r9, r3]
 800167c:	071b      	lsls	r3, r3, #28
 800167e:	d41a      	bmi.n	80016b6 <_scanf_chars+0x8e>
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	06da      	lsls	r2, r3, #27
 8001684:	bf5e      	ittt	pl
 8001686:	682b      	ldrpl	r3, [r5, #0]
 8001688:	781b      	ldrbpl	r3, [r3, #0]
 800168a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800168e:	682a      	ldr	r2, [r5, #0]
 8001690:	686b      	ldr	r3, [r5, #4]
 8001692:	3201      	adds	r2, #1
 8001694:	602a      	str	r2, [r5, #0]
 8001696:	68a2      	ldr	r2, [r4, #8]
 8001698:	3b01      	subs	r3, #1
 800169a:	3a01      	subs	r2, #1
 800169c:	606b      	str	r3, [r5, #4]
 800169e:	3701      	adds	r7, #1
 80016a0:	60a2      	str	r2, [r4, #8]
 80016a2:	b142      	cbz	r2, 80016b6 <_scanf_chars+0x8e>
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	dcd7      	bgt.n	8001658 <_scanf_chars+0x30>
 80016a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80016ac:	4629      	mov	r1, r5
 80016ae:	4640      	mov	r0, r8
 80016b0:	4798      	blx	r3
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d0d0      	beq.n	8001658 <_scanf_chars+0x30>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	f013 0310 	ands.w	r3, r3, #16
 80016bc:	d105      	bne.n	80016ca <_scanf_chars+0xa2>
 80016be:	68e2      	ldr	r2, [r4, #12]
 80016c0:	3201      	adds	r2, #1
 80016c2:	60e2      	str	r2, [r4, #12]
 80016c4:	69a2      	ldr	r2, [r4, #24]
 80016c6:	b102      	cbz	r2, 80016ca <_scanf_chars+0xa2>
 80016c8:	7033      	strb	r3, [r6, #0]
 80016ca:	6923      	ldr	r3, [r4, #16]
 80016cc:	443b      	add	r3, r7
 80016ce:	6123      	str	r3, [r4, #16]
 80016d0:	2000      	movs	r0, #0
 80016d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016d6:	bf00      	nop
 80016d8:	0800244f 	.word	0x0800244f

080016dc <_scanf_i>:
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	4698      	mov	r8, r3
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <_scanf_i+0x1d8>)
 80016e4:	460c      	mov	r4, r1
 80016e6:	4682      	mov	sl, r0
 80016e8:	4616      	mov	r6, r2
 80016ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ee:	b087      	sub	sp, #28
 80016f0:	ab03      	add	r3, sp, #12
 80016f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016f6:	4b70      	ldr	r3, [pc, #448]	; (80018b8 <_scanf_i+0x1dc>)
 80016f8:	69a1      	ldr	r1, [r4, #24]
 80016fa:	4a70      	ldr	r2, [pc, #448]	; (80018bc <_scanf_i+0x1e0>)
 80016fc:	2903      	cmp	r1, #3
 80016fe:	bf18      	it	ne
 8001700:	461a      	movne	r2, r3
 8001702:	68a3      	ldr	r3, [r4, #8]
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800170c:	bf88      	it	hi
 800170e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8001712:	4627      	mov	r7, r4
 8001714:	bf82      	ittt	hi
 8001716:	eb03 0905 	addhi.w	r9, r3, r5
 800171a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800171e:	60a3      	strhi	r3, [r4, #8]
 8001720:	f857 3b1c 	ldr.w	r3, [r7], #28
 8001724:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8001728:	bf98      	it	ls
 800172a:	f04f 0900 	movls.w	r9, #0
 800172e:	6023      	str	r3, [r4, #0]
 8001730:	463d      	mov	r5, r7
 8001732:	f04f 0b00 	mov.w	fp, #0
 8001736:	6831      	ldr	r1, [r6, #0]
 8001738:	ab03      	add	r3, sp, #12
 800173a:	7809      	ldrb	r1, [r1, #0]
 800173c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001740:	2202      	movs	r2, #2
 8001742:	f7fe fd45 	bl	80001d0 <memchr>
 8001746:	b328      	cbz	r0, 8001794 <_scanf_i+0xb8>
 8001748:	f1bb 0f01 	cmp.w	fp, #1
 800174c:	d159      	bne.n	8001802 <_scanf_i+0x126>
 800174e:	6862      	ldr	r2, [r4, #4]
 8001750:	b92a      	cbnz	r2, 800175e <_scanf_i+0x82>
 8001752:	6822      	ldr	r2, [r4, #0]
 8001754:	2308      	movs	r3, #8
 8001756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800175a:	6063      	str	r3, [r4, #4]
 800175c:	6022      	str	r2, [r4, #0]
 800175e:	6822      	ldr	r2, [r4, #0]
 8001760:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8001764:	6022      	str	r2, [r4, #0]
 8001766:	68a2      	ldr	r2, [r4, #8]
 8001768:	1e51      	subs	r1, r2, #1
 800176a:	60a1      	str	r1, [r4, #8]
 800176c:	b192      	cbz	r2, 8001794 <_scanf_i+0xb8>
 800176e:	6832      	ldr	r2, [r6, #0]
 8001770:	1c51      	adds	r1, r2, #1
 8001772:	6031      	str	r1, [r6, #0]
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	f805 2b01 	strb.w	r2, [r5], #1
 800177a:	6872      	ldr	r2, [r6, #4]
 800177c:	3a01      	subs	r2, #1
 800177e:	2a00      	cmp	r2, #0
 8001780:	6072      	str	r2, [r6, #4]
 8001782:	dc07      	bgt.n	8001794 <_scanf_i+0xb8>
 8001784:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8001788:	4631      	mov	r1, r6
 800178a:	4650      	mov	r0, sl
 800178c:	4790      	blx	r2
 800178e:	2800      	cmp	r0, #0
 8001790:	f040 8085 	bne.w	800189e <_scanf_i+0x1c2>
 8001794:	f10b 0b01 	add.w	fp, fp, #1
 8001798:	f1bb 0f03 	cmp.w	fp, #3
 800179c:	d1cb      	bne.n	8001736 <_scanf_i+0x5a>
 800179e:	6863      	ldr	r3, [r4, #4]
 80017a0:	b90b      	cbnz	r3, 80017a6 <_scanf_i+0xca>
 80017a2:	230a      	movs	r3, #10
 80017a4:	6063      	str	r3, [r4, #4]
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	4945      	ldr	r1, [pc, #276]	; (80018c0 <_scanf_i+0x1e4>)
 80017aa:	6960      	ldr	r0, [r4, #20]
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	f000 f889 	bl	80018c4 <__sccl>
 80017b2:	f04f 0b00 	mov.w	fp, #0
 80017b6:	68a3      	ldr	r3, [r4, #8]
 80017b8:	6822      	ldr	r2, [r4, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03d      	beq.n	800183a <_scanf_i+0x15e>
 80017be:	6831      	ldr	r1, [r6, #0]
 80017c0:	6960      	ldr	r0, [r4, #20]
 80017c2:	f891 c000 	ldrb.w	ip, [r1]
 80017c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d035      	beq.n	800183a <_scanf_i+0x15e>
 80017ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80017d2:	d124      	bne.n	800181e <_scanf_i+0x142>
 80017d4:	0510      	lsls	r0, r2, #20
 80017d6:	d522      	bpl.n	800181e <_scanf_i+0x142>
 80017d8:	f10b 0b01 	add.w	fp, fp, #1
 80017dc:	f1b9 0f00 	cmp.w	r9, #0
 80017e0:	d003      	beq.n	80017ea <_scanf_i+0x10e>
 80017e2:	3301      	adds	r3, #1
 80017e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80017e8:	60a3      	str	r3, [r4, #8]
 80017ea:	6873      	ldr	r3, [r6, #4]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	6073      	str	r3, [r6, #4]
 80017f2:	dd1b      	ble.n	800182c <_scanf_i+0x150>
 80017f4:	6833      	ldr	r3, [r6, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	6033      	str	r3, [r6, #0]
 80017fa:	68a3      	ldr	r3, [r4, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60a3      	str	r3, [r4, #8]
 8001800:	e7d9      	b.n	80017b6 <_scanf_i+0xda>
 8001802:	f1bb 0f02 	cmp.w	fp, #2
 8001806:	d1ae      	bne.n	8001766 <_scanf_i+0x8a>
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800180e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001812:	d1bf      	bne.n	8001794 <_scanf_i+0xb8>
 8001814:	2310      	movs	r3, #16
 8001816:	6063      	str	r3, [r4, #4]
 8001818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800181c:	e7a2      	b.n	8001764 <_scanf_i+0x88>
 800181e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001822:	6022      	str	r2, [r4, #0]
 8001824:	780b      	ldrb	r3, [r1, #0]
 8001826:	f805 3b01 	strb.w	r3, [r5], #1
 800182a:	e7de      	b.n	80017ea <_scanf_i+0x10e>
 800182c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001830:	4631      	mov	r1, r6
 8001832:	4650      	mov	r0, sl
 8001834:	4798      	blx	r3
 8001836:	2800      	cmp	r0, #0
 8001838:	d0df      	beq.n	80017fa <_scanf_i+0x11e>
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	05d9      	lsls	r1, r3, #23
 800183e:	d50d      	bpl.n	800185c <_scanf_i+0x180>
 8001840:	42bd      	cmp	r5, r7
 8001842:	d909      	bls.n	8001858 <_scanf_i+0x17c>
 8001844:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800184c:	4632      	mov	r2, r6
 800184e:	4650      	mov	r0, sl
 8001850:	4798      	blx	r3
 8001852:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8001856:	464d      	mov	r5, r9
 8001858:	42bd      	cmp	r5, r7
 800185a:	d028      	beq.n	80018ae <_scanf_i+0x1d2>
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	f012 0210 	ands.w	r2, r2, #16
 8001862:	d113      	bne.n	800188c <_scanf_i+0x1b0>
 8001864:	702a      	strb	r2, [r5, #0]
 8001866:	6863      	ldr	r3, [r4, #4]
 8001868:	9e01      	ldr	r6, [sp, #4]
 800186a:	4639      	mov	r1, r7
 800186c:	4650      	mov	r0, sl
 800186e:	47b0      	blx	r6
 8001870:	f8d8 3000 	ldr.w	r3, [r8]
 8001874:	6821      	ldr	r1, [r4, #0]
 8001876:	1d1a      	adds	r2, r3, #4
 8001878:	f8c8 2000 	str.w	r2, [r8]
 800187c:	f011 0f20 	tst.w	r1, #32
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	d00f      	beq.n	80018a4 <_scanf_i+0x1c8>
 8001884:	6018      	str	r0, [r3, #0]
 8001886:	68e3      	ldr	r3, [r4, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60e3      	str	r3, [r4, #12]
 800188c:	6923      	ldr	r3, [r4, #16]
 800188e:	1bed      	subs	r5, r5, r7
 8001890:	445d      	add	r5, fp
 8001892:	442b      	add	r3, r5
 8001894:	6123      	str	r3, [r4, #16]
 8001896:	2000      	movs	r0, #0
 8001898:	b007      	add	sp, #28
 800189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189e:	f04f 0b00 	mov.w	fp, #0
 80018a2:	e7ca      	b.n	800183a <_scanf_i+0x15e>
 80018a4:	07ca      	lsls	r2, r1, #31
 80018a6:	bf4c      	ite	mi
 80018a8:	8018      	strhmi	r0, [r3, #0]
 80018aa:	6018      	strpl	r0, [r3, #0]
 80018ac:	e7eb      	b.n	8001886 <_scanf_i+0x1aa>
 80018ae:	2001      	movs	r0, #1
 80018b0:	e7f2      	b.n	8001898 <_scanf_i+0x1bc>
 80018b2:	bf00      	nop
 80018b4:	080023f4 	.word	0x080023f4
 80018b8:	08001ef9 	.word	0x08001ef9
 80018bc:	08001e11 	.word	0x08001e11
 80018c0:	08002443 	.word	0x08002443

080018c4 <__sccl>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	780b      	ldrb	r3, [r1, #0]
 80018c8:	4604      	mov	r4, r0
 80018ca:	2b5e      	cmp	r3, #94	; 0x5e
 80018cc:	bf0b      	itete	eq
 80018ce:	784b      	ldrbeq	r3, [r1, #1]
 80018d0:	1c4a      	addne	r2, r1, #1
 80018d2:	1c8a      	addeq	r2, r1, #2
 80018d4:	2100      	movne	r1, #0
 80018d6:	bf08      	it	eq
 80018d8:	2101      	moveq	r1, #1
 80018da:	3801      	subs	r0, #1
 80018dc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80018e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80018e4:	42a8      	cmp	r0, r5
 80018e6:	d1fb      	bne.n	80018e0 <__sccl+0x1c>
 80018e8:	b90b      	cbnz	r3, 80018ee <__sccl+0x2a>
 80018ea:	1e50      	subs	r0, r2, #1
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
 80018ee:	f081 0101 	eor.w	r1, r1, #1
 80018f2:	54e1      	strb	r1, [r4, r3]
 80018f4:	4610      	mov	r0, r2
 80018f6:	4602      	mov	r2, r0
 80018f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80018fc:	2d2d      	cmp	r5, #45	; 0x2d
 80018fe:	d005      	beq.n	800190c <__sccl+0x48>
 8001900:	2d5d      	cmp	r5, #93	; 0x5d
 8001902:	d016      	beq.n	8001932 <__sccl+0x6e>
 8001904:	2d00      	cmp	r5, #0
 8001906:	d0f1      	beq.n	80018ec <__sccl+0x28>
 8001908:	462b      	mov	r3, r5
 800190a:	e7f2      	b.n	80018f2 <__sccl+0x2e>
 800190c:	7846      	ldrb	r6, [r0, #1]
 800190e:	2e5d      	cmp	r6, #93	; 0x5d
 8001910:	d0fa      	beq.n	8001908 <__sccl+0x44>
 8001912:	42b3      	cmp	r3, r6
 8001914:	dcf8      	bgt.n	8001908 <__sccl+0x44>
 8001916:	3002      	adds	r0, #2
 8001918:	461a      	mov	r2, r3
 800191a:	3201      	adds	r2, #1
 800191c:	4296      	cmp	r6, r2
 800191e:	54a1      	strb	r1, [r4, r2]
 8001920:	dcfb      	bgt.n	800191a <__sccl+0x56>
 8001922:	1af2      	subs	r2, r6, r3
 8001924:	3a01      	subs	r2, #1
 8001926:	1c5d      	adds	r5, r3, #1
 8001928:	42b3      	cmp	r3, r6
 800192a:	bfa8      	it	ge
 800192c:	2200      	movge	r2, #0
 800192e:	18ab      	adds	r3, r5, r2
 8001930:	e7e1      	b.n	80018f6 <__sccl+0x32>
 8001932:	4610      	mov	r0, r2
 8001934:	e7da      	b.n	80018ec <__sccl+0x28>
	...

08001938 <__sflush_r>:
 8001938:	898a      	ldrh	r2, [r1, #12]
 800193a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800193e:	4605      	mov	r5, r0
 8001940:	0710      	lsls	r0, r2, #28
 8001942:	460c      	mov	r4, r1
 8001944:	d458      	bmi.n	80019f8 <__sflush_r+0xc0>
 8001946:	684b      	ldr	r3, [r1, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	dc05      	bgt.n	8001958 <__sflush_r+0x20>
 800194c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	dc02      	bgt.n	8001958 <__sflush_r+0x20>
 8001952:	2000      	movs	r0, #0
 8001954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800195a:	2e00      	cmp	r6, #0
 800195c:	d0f9      	beq.n	8001952 <__sflush_r+0x1a>
 800195e:	2300      	movs	r3, #0
 8001960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001964:	682f      	ldr	r7, [r5, #0]
 8001966:	6a21      	ldr	r1, [r4, #32]
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	d032      	beq.n	80019d2 <__sflush_r+0x9a>
 800196c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800196e:	89a3      	ldrh	r3, [r4, #12]
 8001970:	075a      	lsls	r2, r3, #29
 8001972:	d505      	bpl.n	8001980 <__sflush_r+0x48>
 8001974:	6863      	ldr	r3, [r4, #4]
 8001976:	1ac0      	subs	r0, r0, r3
 8001978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800197a:	b10b      	cbz	r3, 8001980 <__sflush_r+0x48>
 800197c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800197e:	1ac0      	subs	r0, r0, r3
 8001980:	2300      	movs	r3, #0
 8001982:	4602      	mov	r2, r0
 8001984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001986:	6a21      	ldr	r1, [r4, #32]
 8001988:	4628      	mov	r0, r5
 800198a:	47b0      	blx	r6
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	d106      	bne.n	80019a0 <__sflush_r+0x68>
 8001992:	6829      	ldr	r1, [r5, #0]
 8001994:	291d      	cmp	r1, #29
 8001996:	d82b      	bhi.n	80019f0 <__sflush_r+0xb8>
 8001998:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <__sflush_r+0x108>)
 800199a:	410a      	asrs	r2, r1
 800199c:	07d6      	lsls	r6, r2, #31
 800199e:	d427      	bmi.n	80019f0 <__sflush_r+0xb8>
 80019a0:	2200      	movs	r2, #0
 80019a2:	6062      	str	r2, [r4, #4]
 80019a4:	04d9      	lsls	r1, r3, #19
 80019a6:	6922      	ldr	r2, [r4, #16]
 80019a8:	6022      	str	r2, [r4, #0]
 80019aa:	d504      	bpl.n	80019b6 <__sflush_r+0x7e>
 80019ac:	1c42      	adds	r2, r0, #1
 80019ae:	d101      	bne.n	80019b4 <__sflush_r+0x7c>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b903      	cbnz	r3, 80019b6 <__sflush_r+0x7e>
 80019b4:	6560      	str	r0, [r4, #84]	; 0x54
 80019b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019b8:	602f      	str	r7, [r5, #0]
 80019ba:	2900      	cmp	r1, #0
 80019bc:	d0c9      	beq.n	8001952 <__sflush_r+0x1a>
 80019be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019c2:	4299      	cmp	r1, r3
 80019c4:	d002      	beq.n	80019cc <__sflush_r+0x94>
 80019c6:	4628      	mov	r0, r5
 80019c8:	f000 fc9c 	bl	8002304 <_free_r>
 80019cc:	2000      	movs	r0, #0
 80019ce:	6360      	str	r0, [r4, #52]	; 0x34
 80019d0:	e7c0      	b.n	8001954 <__sflush_r+0x1c>
 80019d2:	2301      	movs	r3, #1
 80019d4:	4628      	mov	r0, r5
 80019d6:	47b0      	blx	r6
 80019d8:	1c41      	adds	r1, r0, #1
 80019da:	d1c8      	bne.n	800196e <__sflush_r+0x36>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0c5      	beq.n	800196e <__sflush_r+0x36>
 80019e2:	2b1d      	cmp	r3, #29
 80019e4:	d001      	beq.n	80019ea <__sflush_r+0xb2>
 80019e6:	2b16      	cmp	r3, #22
 80019e8:	d101      	bne.n	80019ee <__sflush_r+0xb6>
 80019ea:	602f      	str	r7, [r5, #0]
 80019ec:	e7b1      	b.n	8001952 <__sflush_r+0x1a>
 80019ee:	89a3      	ldrh	r3, [r4, #12]
 80019f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f4:	81a3      	strh	r3, [r4, #12]
 80019f6:	e7ad      	b.n	8001954 <__sflush_r+0x1c>
 80019f8:	690f      	ldr	r7, [r1, #16]
 80019fa:	2f00      	cmp	r7, #0
 80019fc:	d0a9      	beq.n	8001952 <__sflush_r+0x1a>
 80019fe:	0793      	lsls	r3, r2, #30
 8001a00:	680e      	ldr	r6, [r1, #0]
 8001a02:	bf08      	it	eq
 8001a04:	694b      	ldreq	r3, [r1, #20]
 8001a06:	600f      	str	r7, [r1, #0]
 8001a08:	bf18      	it	ne
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	eba6 0807 	sub.w	r8, r6, r7
 8001a10:	608b      	str	r3, [r1, #8]
 8001a12:	f1b8 0f00 	cmp.w	r8, #0
 8001a16:	dd9c      	ble.n	8001952 <__sflush_r+0x1a>
 8001a18:	6a21      	ldr	r1, [r4, #32]
 8001a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	463a      	mov	r2, r7
 8001a20:	4628      	mov	r0, r5
 8001a22:	47b0      	blx	r6
 8001a24:	2800      	cmp	r0, #0
 8001a26:	dc06      	bgt.n	8001a36 <__sflush_r+0xfe>
 8001a28:	89a3      	ldrh	r3, [r4, #12]
 8001a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a2e:	81a3      	strh	r3, [r4, #12]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a34:	e78e      	b.n	8001954 <__sflush_r+0x1c>
 8001a36:	4407      	add	r7, r0
 8001a38:	eba8 0800 	sub.w	r8, r8, r0
 8001a3c:	e7e9      	b.n	8001a12 <__sflush_r+0xda>
 8001a3e:	bf00      	nop
 8001a40:	dfbffffe 	.word	0xdfbffffe

08001a44 <_fflush_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	690b      	ldr	r3, [r1, #16]
 8001a48:	4605      	mov	r5, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	b913      	cbnz	r3, 8001a54 <_fflush_r+0x10>
 8001a4e:	2500      	movs	r5, #0
 8001a50:	4628      	mov	r0, r5
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	b118      	cbz	r0, 8001a5e <_fflush_r+0x1a>
 8001a56:	6a03      	ldr	r3, [r0, #32]
 8001a58:	b90b      	cbnz	r3, 8001a5e <_fflush_r+0x1a>
 8001a5a:	f7ff f82d 	bl	8000ab8 <__sinit>
 8001a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f3      	beq.n	8001a4e <_fflush_r+0xa>
 8001a66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a68:	07d0      	lsls	r0, r2, #31
 8001a6a:	d404      	bmi.n	8001a76 <_fflush_r+0x32>
 8001a6c:	0599      	lsls	r1, r3, #22
 8001a6e:	d402      	bmi.n	8001a76 <_fflush_r+0x32>
 8001a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a72:	f7ff f8ae 	bl	8000bd2 <__retarget_lock_acquire_recursive>
 8001a76:	4628      	mov	r0, r5
 8001a78:	4621      	mov	r1, r4
 8001a7a:	f7ff ff5d 	bl	8001938 <__sflush_r>
 8001a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a80:	07da      	lsls	r2, r3, #31
 8001a82:	4605      	mov	r5, r0
 8001a84:	d4e4      	bmi.n	8001a50 <_fflush_r+0xc>
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	059b      	lsls	r3, r3, #22
 8001a8a:	d4e1      	bmi.n	8001a50 <_fflush_r+0xc>
 8001a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a8e:	f7ff f8a1 	bl	8000bd4 <__retarget_lock_release_recursive>
 8001a92:	e7dd      	b.n	8001a50 <_fflush_r+0xc>

08001a94 <__malloc_lock>:
 8001a94:	4801      	ldr	r0, [pc, #4]	; (8001a9c <__malloc_lock+0x8>)
 8001a96:	f7ff b89c 	b.w	8000bd2 <__retarget_lock_acquire_recursive>
 8001a9a:	bf00      	nop
 8001a9c:	200001b8 	.word	0x200001b8

08001aa0 <__malloc_unlock>:
 8001aa0:	4801      	ldr	r0, [pc, #4]	; (8001aa8 <__malloc_unlock+0x8>)
 8001aa2:	f7ff b897 	b.w	8000bd4 <__retarget_lock_release_recursive>
 8001aa6:	bf00      	nop
 8001aa8:	200001b8 	.word	0x200001b8

08001aac <__sread>:
 8001aac:	b510      	push	{r4, lr}
 8001aae:	460c      	mov	r4, r1
 8001ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab4:	f000 fbe4 	bl	8002280 <_read_r>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	bfab      	itete	ge
 8001abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001abe:	89a3      	ldrhlt	r3, [r4, #12]
 8001ac0:	181b      	addge	r3, r3, r0
 8001ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ac6:	bfac      	ite	ge
 8001ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001aca:	81a3      	strhlt	r3, [r4, #12]
 8001acc:	bd10      	pop	{r4, pc}

08001ace <__swrite>:
 8001ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	461f      	mov	r7, r3
 8001ad4:	898b      	ldrh	r3, [r1, #12]
 8001ad6:	05db      	lsls	r3, r3, #23
 8001ad8:	4605      	mov	r5, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4616      	mov	r6, r2
 8001ade:	d505      	bpl.n	8001aec <__swrite+0x1e>
 8001ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f000 fbb8 	bl	800225c <_lseek_r>
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001af6:	81a3      	strh	r3, [r4, #12]
 8001af8:	4632      	mov	r2, r6
 8001afa:	463b      	mov	r3, r7
 8001afc:	4628      	mov	r0, r5
 8001afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b02:	f000 bbdf 	b.w	80022c4 <_write_r>

08001b06 <__sseek>:
 8001b06:	b510      	push	{r4, lr}
 8001b08:	460c      	mov	r4, r1
 8001b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b0e:	f000 fba5 	bl	800225c <_lseek_r>
 8001b12:	1c43      	adds	r3, r0, #1
 8001b14:	89a3      	ldrh	r3, [r4, #12]
 8001b16:	bf15      	itete	ne
 8001b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b22:	81a3      	strheq	r3, [r4, #12]
 8001b24:	bf18      	it	ne
 8001b26:	81a3      	strhne	r3, [r4, #12]
 8001b28:	bd10      	pop	{r4, pc}

08001b2a <__sclose>:
 8001b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2e:	f000 bb63 	b.w	80021f8 <_close_r>

08001b32 <__submore>:
 8001b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	460c      	mov	r4, r1
 8001b38:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b3e:	4299      	cmp	r1, r3
 8001b40:	d11d      	bne.n	8001b7e <__submore+0x4c>
 8001b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b46:	f7ff f9a9 	bl	8000e9c <_malloc_r>
 8001b4a:	b918      	cbnz	r0, 8001b54 <__submore+0x22>
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b58:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b5a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001b5e:	6360      	str	r0, [r4, #52]	; 0x34
 8001b60:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001b64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b68:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8001b6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b70:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8001b74:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8001b78:	6020      	str	r0, [r4, #0]
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e7e8      	b.n	8001b50 <__submore+0x1e>
 8001b7e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001b80:	0077      	lsls	r7, r6, #1
 8001b82:	463a      	mov	r2, r7
 8001b84:	f000 f893 	bl	8001cae <_realloc_r>
 8001b88:	4605      	mov	r5, r0
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d0de      	beq.n	8001b4c <__submore+0x1a>
 8001b8e:	eb00 0806 	add.w	r8, r0, r6
 8001b92:	4601      	mov	r1, r0
 8001b94:	4632      	mov	r2, r6
 8001b96:	4640      	mov	r0, r8
 8001b98:	f000 fba6 	bl	80022e8 <memcpy>
 8001b9c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8001ba0:	f8c4 8000 	str.w	r8, [r4]
 8001ba4:	e7e9      	b.n	8001b7a <__submore+0x48>

08001ba6 <_ungetc_r>:
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	4614      	mov	r4, r2
 8001baa:	1c4a      	adds	r2, r1, #1
 8001bac:	4606      	mov	r6, r0
 8001bae:	460d      	mov	r5, r1
 8001bb0:	d103      	bne.n	8001bba <_ungetc_r+0x14>
 8001bb2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	b118      	cbz	r0, 8001bc4 <_ungetc_r+0x1e>
 8001bbc:	6a03      	ldr	r3, [r0, #32]
 8001bbe:	b90b      	cbnz	r3, 8001bc4 <_ungetc_r+0x1e>
 8001bc0:	f7fe ff7a 	bl	8000ab8 <__sinit>
 8001bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bc6:	07db      	lsls	r3, r3, #31
 8001bc8:	d405      	bmi.n	8001bd6 <_ungetc_r+0x30>
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	0598      	lsls	r0, r3, #22
 8001bce:	d402      	bmi.n	8001bd6 <_ungetc_r+0x30>
 8001bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bd2:	f7fe fffe 	bl	8000bd2 <__retarget_lock_acquire_recursive>
 8001bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bda:	f023 0320 	bic.w	r3, r3, #32
 8001bde:	0759      	lsls	r1, r3, #29
 8001be0:	81a3      	strh	r3, [r4, #12]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	d423      	bmi.n	8001c2e <_ungetc_r+0x88>
 8001be6:	06d3      	lsls	r3, r2, #27
 8001be8:	d409      	bmi.n	8001bfe <_ungetc_r+0x58>
 8001bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bec:	07dd      	lsls	r5, r3, #31
 8001bee:	d4e0      	bmi.n	8001bb2 <_ungetc_r+0xc>
 8001bf0:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001bf4:	d1dd      	bne.n	8001bb2 <_ungetc_r+0xc>
 8001bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bf8:	f7fe ffec 	bl	8000bd4 <__retarget_lock_release_recursive>
 8001bfc:	e7d9      	b.n	8001bb2 <_ungetc_r+0xc>
 8001bfe:	0710      	lsls	r0, r2, #28
 8001c00:	d511      	bpl.n	8001c26 <_ungetc_r+0x80>
 8001c02:	4621      	mov	r1, r4
 8001c04:	4630      	mov	r0, r6
 8001c06:	f7ff ff1d 	bl	8001a44 <_fflush_r>
 8001c0a:	b130      	cbz	r0, 8001c1a <_ungetc_r+0x74>
 8001c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c0e:	07d9      	lsls	r1, r3, #31
 8001c10:	d4cf      	bmi.n	8001bb2 <_ungetc_r+0xc>
 8001c12:	89a3      	ldrh	r3, [r4, #12]
 8001c14:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001c18:	e7ec      	b.n	8001bf4 <_ungetc_r+0x4e>
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	60a0      	str	r0, [r4, #8]
 8001c1e:	f023 0308 	bic.w	r3, r3, #8
 8001c22:	81a3      	strh	r3, [r4, #12]
 8001c24:	61a0      	str	r0, [r4, #24]
 8001c26:	89a3      	ldrh	r3, [r4, #12]
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	81a3      	strh	r3, [r4, #12]
 8001c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c30:	6862      	ldr	r2, [r4, #4]
 8001c32:	b2ed      	uxtb	r5, r5
 8001c34:	b1d3      	cbz	r3, 8001c6c <_ungetc_r+0xc6>
 8001c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	dc05      	bgt.n	8001c48 <_ungetc_r+0xa2>
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f7ff ff77 	bl	8001b32 <__submore>
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d1e1      	bne.n	8001c0c <_ungetc_r+0x66>
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	6022      	str	r2, [r4, #0]
 8001c4e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8001c52:	6863      	ldr	r3, [r4, #4]
 8001c54:	3301      	adds	r3, #1
 8001c56:	6063      	str	r3, [r4, #4]
 8001c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c5a:	07da      	lsls	r2, r3, #31
 8001c5c:	d4ab      	bmi.n	8001bb6 <_ungetc_r+0x10>
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	059b      	lsls	r3, r3, #22
 8001c62:	d4a8      	bmi.n	8001bb6 <_ungetc_r+0x10>
 8001c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c66:	f7fe ffb5 	bl	8000bd4 <__retarget_lock_release_recursive>
 8001c6a:	e7a4      	b.n	8001bb6 <_ungetc_r+0x10>
 8001c6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c6e:	6920      	ldr	r0, [r4, #16]
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	f001 0101 	and.w	r1, r1, #1
 8001c76:	b160      	cbz	r0, 8001c92 <_ungetc_r+0xec>
 8001c78:	4298      	cmp	r0, r3
 8001c7a:	d20a      	bcs.n	8001c92 <_ungetc_r+0xec>
 8001c7c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001c80:	42a8      	cmp	r0, r5
 8001c82:	d106      	bne.n	8001c92 <_ungetc_r+0xec>
 8001c84:	3b01      	subs	r3, #1
 8001c86:	3201      	adds	r2, #1
 8001c88:	6023      	str	r3, [r4, #0]
 8001c8a:	6062      	str	r2, [r4, #4]
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	d192      	bne.n	8001bb6 <_ungetc_r+0x10>
 8001c90:	e7e5      	b.n	8001c5e <_ungetc_r+0xb8>
 8001c92:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8001c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c9a:	6363      	str	r3, [r4, #52]	; 0x34
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	f803 5f46 	strb.w	r5, [r3, #70]!
 8001ca6:	6023      	str	r3, [r4, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	6063      	str	r3, [r4, #4]
 8001cac:	e7ee      	b.n	8001c8c <_ungetc_r+0xe6>

08001cae <_realloc_r>:
 8001cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	460e      	mov	r6, r1
 8001cb8:	b921      	cbnz	r1, 8001cc4 <_realloc_r+0x16>
 8001cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	f7ff b8ec 	b.w	8000e9c <_malloc_r>
 8001cc4:	b92a      	cbnz	r2, 8001cd2 <_realloc_r+0x24>
 8001cc6:	f000 fb1d 	bl	8002304 <_free_r>
 8001cca:	4625      	mov	r5, r4
 8001ccc:	4628      	mov	r0, r5
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd2:	f000 fb63 	bl	800239c <_malloc_usable_size_r>
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	4607      	mov	r7, r0
 8001cda:	d802      	bhi.n	8001ce2 <_realloc_r+0x34>
 8001cdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001ce0:	d812      	bhi.n	8001d08 <_realloc_r+0x5a>
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4640      	mov	r0, r8
 8001ce6:	f7ff f8d9 	bl	8000e9c <_malloc_r>
 8001cea:	4605      	mov	r5, r0
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d0ed      	beq.n	8001ccc <_realloc_r+0x1e>
 8001cf0:	42bc      	cmp	r4, r7
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	4631      	mov	r1, r6
 8001cf6:	bf28      	it	cs
 8001cf8:	463a      	movcs	r2, r7
 8001cfa:	f000 faf5 	bl	80022e8 <memcpy>
 8001cfe:	4631      	mov	r1, r6
 8001d00:	4640      	mov	r0, r8
 8001d02:	f000 faff 	bl	8002304 <_free_r>
 8001d06:	e7e1      	b.n	8001ccc <_realloc_r+0x1e>
 8001d08:	4635      	mov	r5, r6
 8001d0a:	e7df      	b.n	8001ccc <_realloc_r+0x1e>

08001d0c <_strtol_l.constprop.0>:
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d12:	d001      	beq.n	8001d18 <_strtol_l.constprop.0+0xc>
 8001d14:	2b24      	cmp	r3, #36	; 0x24
 8001d16:	d906      	bls.n	8001d26 <_strtol_l.constprop.0+0x1a>
 8001d18:	f7fe ff30 	bl	8000b7c <__errno>
 8001d1c:	2316      	movs	r3, #22
 8001d1e:	6003      	str	r3, [r0, #0]
 8001d20:	2000      	movs	r0, #0
 8001d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001e0c <_strtol_l.constprop.0+0x100>
 8001d2a:	460d      	mov	r5, r1
 8001d2c:	462e      	mov	r6, r5
 8001d2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001d32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8001d36:	f017 0708 	ands.w	r7, r7, #8
 8001d3a:	d1f7      	bne.n	8001d2c <_strtol_l.constprop.0+0x20>
 8001d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8001d3e:	d132      	bne.n	8001da6 <_strtol_l.constprop.0+0x9a>
 8001d40:	782c      	ldrb	r4, [r5, #0]
 8001d42:	2701      	movs	r7, #1
 8001d44:	1cb5      	adds	r5, r6, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d05b      	beq.n	8001e02 <_strtol_l.constprop.0+0xf6>
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d109      	bne.n	8001d62 <_strtol_l.constprop.0+0x56>
 8001d4e:	2c30      	cmp	r4, #48	; 0x30
 8001d50:	d107      	bne.n	8001d62 <_strtol_l.constprop.0+0x56>
 8001d52:	782c      	ldrb	r4, [r5, #0]
 8001d54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001d58:	2c58      	cmp	r4, #88	; 0x58
 8001d5a:	d14d      	bne.n	8001df8 <_strtol_l.constprop.0+0xec>
 8001d5c:	786c      	ldrb	r4, [r5, #1]
 8001d5e:	2310      	movs	r3, #16
 8001d60:	3502      	adds	r5, #2
 8001d62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8001d66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001d6a:	f04f 0e00 	mov.w	lr, #0
 8001d6e:	fbb8 f9f3 	udiv	r9, r8, r3
 8001d72:	4676      	mov	r6, lr
 8001d74:	fb03 8a19 	mls	sl, r3, r9, r8
 8001d78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001d7c:	f1bc 0f09 	cmp.w	ip, #9
 8001d80:	d816      	bhi.n	8001db0 <_strtol_l.constprop.0+0xa4>
 8001d82:	4664      	mov	r4, ip
 8001d84:	42a3      	cmp	r3, r4
 8001d86:	dd24      	ble.n	8001dd2 <_strtol_l.constprop.0+0xc6>
 8001d88:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001d8c:	d008      	beq.n	8001da0 <_strtol_l.constprop.0+0x94>
 8001d8e:	45b1      	cmp	r9, r6
 8001d90:	d31c      	bcc.n	8001dcc <_strtol_l.constprop.0+0xc0>
 8001d92:	d101      	bne.n	8001d98 <_strtol_l.constprop.0+0x8c>
 8001d94:	45a2      	cmp	sl, r4
 8001d96:	db19      	blt.n	8001dcc <_strtol_l.constprop.0+0xc0>
 8001d98:	fb06 4603 	mla	r6, r6, r3, r4
 8001d9c:	f04f 0e01 	mov.w	lr, #1
 8001da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001da4:	e7e8      	b.n	8001d78 <_strtol_l.constprop.0+0x6c>
 8001da6:	2c2b      	cmp	r4, #43	; 0x2b
 8001da8:	bf04      	itt	eq
 8001daa:	782c      	ldrbeq	r4, [r5, #0]
 8001dac:	1cb5      	addeq	r5, r6, #2
 8001dae:	e7ca      	b.n	8001d46 <_strtol_l.constprop.0+0x3a>
 8001db0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001db4:	f1bc 0f19 	cmp.w	ip, #25
 8001db8:	d801      	bhi.n	8001dbe <_strtol_l.constprop.0+0xb2>
 8001dba:	3c37      	subs	r4, #55	; 0x37
 8001dbc:	e7e2      	b.n	8001d84 <_strtol_l.constprop.0+0x78>
 8001dbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001dc2:	f1bc 0f19 	cmp.w	ip, #25
 8001dc6:	d804      	bhi.n	8001dd2 <_strtol_l.constprop.0+0xc6>
 8001dc8:	3c57      	subs	r4, #87	; 0x57
 8001dca:	e7db      	b.n	8001d84 <_strtol_l.constprop.0+0x78>
 8001dcc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001dd0:	e7e6      	b.n	8001da0 <_strtol_l.constprop.0+0x94>
 8001dd2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001dd6:	d105      	bne.n	8001de4 <_strtol_l.constprop.0+0xd8>
 8001dd8:	2322      	movs	r3, #34	; 0x22
 8001dda:	6003      	str	r3, [r0, #0]
 8001ddc:	4646      	mov	r6, r8
 8001dde:	b942      	cbnz	r2, 8001df2 <_strtol_l.constprop.0+0xe6>
 8001de0:	4630      	mov	r0, r6
 8001de2:	e79e      	b.n	8001d22 <_strtol_l.constprop.0+0x16>
 8001de4:	b107      	cbz	r7, 8001de8 <_strtol_l.constprop.0+0xdc>
 8001de6:	4276      	negs	r6, r6
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d0f9      	beq.n	8001de0 <_strtol_l.constprop.0+0xd4>
 8001dec:	f1be 0f00 	cmp.w	lr, #0
 8001df0:	d000      	beq.n	8001df4 <_strtol_l.constprop.0+0xe8>
 8001df2:	1e69      	subs	r1, r5, #1
 8001df4:	6011      	str	r1, [r2, #0]
 8001df6:	e7f3      	b.n	8001de0 <_strtol_l.constprop.0+0xd4>
 8001df8:	2430      	movs	r4, #48	; 0x30
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1b1      	bne.n	8001d62 <_strtol_l.constprop.0+0x56>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e7af      	b.n	8001d62 <_strtol_l.constprop.0+0x56>
 8001e02:	2c30      	cmp	r4, #48	; 0x30
 8001e04:	d0a5      	beq.n	8001d52 <_strtol_l.constprop.0+0x46>
 8001e06:	230a      	movs	r3, #10
 8001e08:	e7ab      	b.n	8001d62 <_strtol_l.constprop.0+0x56>
 8001e0a:	bf00      	nop
 8001e0c:	0800244f 	.word	0x0800244f

08001e10 <_strtol_r>:
 8001e10:	f7ff bf7c 	b.w	8001d0c <_strtol_l.constprop.0>

08001e14 <_strtoul_l.constprop.0>:
 8001e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e18:	4f36      	ldr	r7, [pc, #216]	; (8001ef4 <_strtoul_l.constprop.0+0xe0>)
 8001e1a:	4686      	mov	lr, r0
 8001e1c:	460d      	mov	r5, r1
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001e24:	5d3e      	ldrb	r6, [r7, r4]
 8001e26:	f016 0608 	ands.w	r6, r6, #8
 8001e2a:	d1f8      	bne.n	8001e1e <_strtoul_l.constprop.0+0xa>
 8001e2c:	2c2d      	cmp	r4, #45	; 0x2d
 8001e2e:	d130      	bne.n	8001e92 <_strtoul_l.constprop.0+0x7e>
 8001e30:	782c      	ldrb	r4, [r5, #0]
 8001e32:	2601      	movs	r6, #1
 8001e34:	1c85      	adds	r5, r0, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d057      	beq.n	8001eea <_strtoul_l.constprop.0+0xd6>
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d109      	bne.n	8001e52 <_strtoul_l.constprop.0+0x3e>
 8001e3e:	2c30      	cmp	r4, #48	; 0x30
 8001e40:	d107      	bne.n	8001e52 <_strtoul_l.constprop.0+0x3e>
 8001e42:	7828      	ldrb	r0, [r5, #0]
 8001e44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001e48:	2858      	cmp	r0, #88	; 0x58
 8001e4a:	d149      	bne.n	8001ee0 <_strtoul_l.constprop.0+0xcc>
 8001e4c:	786c      	ldrb	r4, [r5, #1]
 8001e4e:	2310      	movs	r3, #16
 8001e50:	3502      	adds	r5, #2
 8001e52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001e56:	2700      	movs	r7, #0
 8001e58:	fbb8 f8f3 	udiv	r8, r8, r3
 8001e5c:	fb03 f908 	mul.w	r9, r3, r8
 8001e60:	ea6f 0909 	mvn.w	r9, r9
 8001e64:	4638      	mov	r0, r7
 8001e66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001e6a:	f1bc 0f09 	cmp.w	ip, #9
 8001e6e:	d815      	bhi.n	8001e9c <_strtoul_l.constprop.0+0x88>
 8001e70:	4664      	mov	r4, ip
 8001e72:	42a3      	cmp	r3, r4
 8001e74:	dd23      	ble.n	8001ebe <_strtoul_l.constprop.0+0xaa>
 8001e76:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8001e7a:	d007      	beq.n	8001e8c <_strtoul_l.constprop.0+0x78>
 8001e7c:	4580      	cmp	r8, r0
 8001e7e:	d31b      	bcc.n	8001eb8 <_strtoul_l.constprop.0+0xa4>
 8001e80:	d101      	bne.n	8001e86 <_strtoul_l.constprop.0+0x72>
 8001e82:	45a1      	cmp	r9, r4
 8001e84:	db18      	blt.n	8001eb8 <_strtoul_l.constprop.0+0xa4>
 8001e86:	fb00 4003 	mla	r0, r0, r3, r4
 8001e8a:	2701      	movs	r7, #1
 8001e8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001e90:	e7e9      	b.n	8001e66 <_strtoul_l.constprop.0+0x52>
 8001e92:	2c2b      	cmp	r4, #43	; 0x2b
 8001e94:	bf04      	itt	eq
 8001e96:	782c      	ldrbeq	r4, [r5, #0]
 8001e98:	1c85      	addeq	r5, r0, #2
 8001e9a:	e7cc      	b.n	8001e36 <_strtoul_l.constprop.0+0x22>
 8001e9c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001ea0:	f1bc 0f19 	cmp.w	ip, #25
 8001ea4:	d801      	bhi.n	8001eaa <_strtoul_l.constprop.0+0x96>
 8001ea6:	3c37      	subs	r4, #55	; 0x37
 8001ea8:	e7e3      	b.n	8001e72 <_strtoul_l.constprop.0+0x5e>
 8001eaa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001eae:	f1bc 0f19 	cmp.w	ip, #25
 8001eb2:	d804      	bhi.n	8001ebe <_strtoul_l.constprop.0+0xaa>
 8001eb4:	3c57      	subs	r4, #87	; 0x57
 8001eb6:	e7dc      	b.n	8001e72 <_strtoul_l.constprop.0+0x5e>
 8001eb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ebc:	e7e6      	b.n	8001e8c <_strtoul_l.constprop.0+0x78>
 8001ebe:	1c7b      	adds	r3, r7, #1
 8001ec0:	d106      	bne.n	8001ed0 <_strtoul_l.constprop.0+0xbc>
 8001ec2:	2322      	movs	r3, #34	; 0x22
 8001ec4:	f8ce 3000 	str.w	r3, [lr]
 8001ec8:	4638      	mov	r0, r7
 8001eca:	b932      	cbnz	r2, 8001eda <_strtoul_l.constprop.0+0xc6>
 8001ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ed0:	b106      	cbz	r6, 8001ed4 <_strtoul_l.constprop.0+0xc0>
 8001ed2:	4240      	negs	r0, r0
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d0f9      	beq.n	8001ecc <_strtoul_l.constprop.0+0xb8>
 8001ed8:	b107      	cbz	r7, 8001edc <_strtoul_l.constprop.0+0xc8>
 8001eda:	1e69      	subs	r1, r5, #1
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	e7f5      	b.n	8001ecc <_strtoul_l.constprop.0+0xb8>
 8001ee0:	2430      	movs	r4, #48	; 0x30
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1b5      	bne.n	8001e52 <_strtoul_l.constprop.0+0x3e>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e7b3      	b.n	8001e52 <_strtoul_l.constprop.0+0x3e>
 8001eea:	2c30      	cmp	r4, #48	; 0x30
 8001eec:	d0a9      	beq.n	8001e42 <_strtoul_l.constprop.0+0x2e>
 8001eee:	230a      	movs	r3, #10
 8001ef0:	e7af      	b.n	8001e52 <_strtoul_l.constprop.0+0x3e>
 8001ef2:	bf00      	nop
 8001ef4:	0800244f 	.word	0x0800244f

08001ef8 <_strtoul_r>:
 8001ef8:	f7ff bf8c 	b.w	8001e14 <_strtoul_l.constprop.0>

08001efc <__swbuf_r>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	460e      	mov	r6, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	4605      	mov	r5, r0
 8001f04:	b118      	cbz	r0, 8001f0e <__swbuf_r+0x12>
 8001f06:	6a03      	ldr	r3, [r0, #32]
 8001f08:	b90b      	cbnz	r3, 8001f0e <__swbuf_r+0x12>
 8001f0a:	f7fe fdd5 	bl	8000ab8 <__sinit>
 8001f0e:	69a3      	ldr	r3, [r4, #24]
 8001f10:	60a3      	str	r3, [r4, #8]
 8001f12:	89a3      	ldrh	r3, [r4, #12]
 8001f14:	071a      	lsls	r2, r3, #28
 8001f16:	d525      	bpl.n	8001f64 <__swbuf_r+0x68>
 8001f18:	6923      	ldr	r3, [r4, #16]
 8001f1a:	b31b      	cbz	r3, 8001f64 <__swbuf_r+0x68>
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	6922      	ldr	r2, [r4, #16]
 8001f20:	1a98      	subs	r0, r3, r2
 8001f22:	6963      	ldr	r3, [r4, #20]
 8001f24:	b2f6      	uxtb	r6, r6
 8001f26:	4283      	cmp	r3, r0
 8001f28:	4637      	mov	r7, r6
 8001f2a:	dc04      	bgt.n	8001f36 <__swbuf_r+0x3a>
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f7ff fd88 	bl	8001a44 <_fflush_r>
 8001f34:	b9e0      	cbnz	r0, 8001f70 <__swbuf_r+0x74>
 8001f36:	68a3      	ldr	r3, [r4, #8]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60a3      	str	r3, [r4, #8]
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	6022      	str	r2, [r4, #0]
 8001f42:	701e      	strb	r6, [r3, #0]
 8001f44:	6962      	ldr	r2, [r4, #20]
 8001f46:	1c43      	adds	r3, r0, #1
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d004      	beq.n	8001f56 <__swbuf_r+0x5a>
 8001f4c:	89a3      	ldrh	r3, [r4, #12]
 8001f4e:	07db      	lsls	r3, r3, #31
 8001f50:	d506      	bpl.n	8001f60 <__swbuf_r+0x64>
 8001f52:	2e0a      	cmp	r6, #10
 8001f54:	d104      	bne.n	8001f60 <__swbuf_r+0x64>
 8001f56:	4621      	mov	r1, r4
 8001f58:	4628      	mov	r0, r5
 8001f5a:	f7ff fd73 	bl	8001a44 <_fflush_r>
 8001f5e:	b938      	cbnz	r0, 8001f70 <__swbuf_r+0x74>
 8001f60:	4638      	mov	r0, r7
 8001f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f64:	4621      	mov	r1, r4
 8001f66:	4628      	mov	r0, r5
 8001f68:	f000 f806 	bl	8001f78 <__swsetup_r>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d0d5      	beq.n	8001f1c <__swbuf_r+0x20>
 8001f70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001f74:	e7f4      	b.n	8001f60 <__swbuf_r+0x64>
	...

08001f78 <__swsetup_r>:
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <__swsetup_r+0xac>)
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	460c      	mov	r4, r1
 8001f82:	b118      	cbz	r0, 8001f8c <__swsetup_r+0x14>
 8001f84:	6a03      	ldr	r3, [r0, #32]
 8001f86:	b90b      	cbnz	r3, 8001f8c <__swsetup_r+0x14>
 8001f88:	f7fe fd96 	bl	8000ab8 <__sinit>
 8001f8c:	89a3      	ldrh	r3, [r4, #12]
 8001f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f92:	0718      	lsls	r0, r3, #28
 8001f94:	d422      	bmi.n	8001fdc <__swsetup_r+0x64>
 8001f96:	06d9      	lsls	r1, r3, #27
 8001f98:	d407      	bmi.n	8001faa <__swsetup_r+0x32>
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	602b      	str	r3, [r5, #0]
 8001f9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001fa2:	81a3      	strh	r3, [r4, #12]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa8:	e034      	b.n	8002014 <__swsetup_r+0x9c>
 8001faa:	0758      	lsls	r0, r3, #29
 8001fac:	d512      	bpl.n	8001fd4 <__swsetup_r+0x5c>
 8001fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fb0:	b141      	cbz	r1, 8001fc4 <__swsetup_r+0x4c>
 8001fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fb6:	4299      	cmp	r1, r3
 8001fb8:	d002      	beq.n	8001fc0 <__swsetup_r+0x48>
 8001fba:	4628      	mov	r0, r5
 8001fbc:	f000 f9a2 	bl	8002304 <_free_r>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fca:	81a3      	strh	r3, [r4, #12]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6063      	str	r3, [r4, #4]
 8001fd0:	6923      	ldr	r3, [r4, #16]
 8001fd2:	6023      	str	r3, [r4, #0]
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	f043 0308 	orr.w	r3, r3, #8
 8001fda:	81a3      	strh	r3, [r4, #12]
 8001fdc:	6923      	ldr	r3, [r4, #16]
 8001fde:	b94b      	cbnz	r3, 8001ff4 <__swsetup_r+0x7c>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fea:	d003      	beq.n	8001ff4 <__swsetup_r+0x7c>
 8001fec:	4621      	mov	r1, r4
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f000 f840 	bl	8002074 <__smakebuf_r>
 8001ff4:	89a0      	ldrh	r0, [r4, #12]
 8001ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ffa:	f010 0301 	ands.w	r3, r0, #1
 8001ffe:	d00a      	beq.n	8002016 <__swsetup_r+0x9e>
 8002000:	2300      	movs	r3, #0
 8002002:	60a3      	str	r3, [r4, #8]
 8002004:	6963      	ldr	r3, [r4, #20]
 8002006:	425b      	negs	r3, r3
 8002008:	61a3      	str	r3, [r4, #24]
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	b943      	cbnz	r3, 8002020 <__swsetup_r+0xa8>
 800200e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002012:	d1c4      	bne.n	8001f9e <__swsetup_r+0x26>
 8002014:	bd38      	pop	{r3, r4, r5, pc}
 8002016:	0781      	lsls	r1, r0, #30
 8002018:	bf58      	it	pl
 800201a:	6963      	ldrpl	r3, [r4, #20]
 800201c:	60a3      	str	r3, [r4, #8]
 800201e:	e7f4      	b.n	800200a <__swsetup_r+0x92>
 8002020:	2000      	movs	r0, #0
 8002022:	e7f7      	b.n	8002014 <__swsetup_r+0x9c>
 8002024:	20000058 	.word	0x20000058

08002028 <__swhatbuf_r>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	460c      	mov	r4, r1
 800202c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002030:	2900      	cmp	r1, #0
 8002032:	b096      	sub	sp, #88	; 0x58
 8002034:	4615      	mov	r5, r2
 8002036:	461e      	mov	r6, r3
 8002038:	da0d      	bge.n	8002056 <__swhatbuf_r+0x2e>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002040:	f04f 0100 	mov.w	r1, #0
 8002044:	bf0c      	ite	eq
 8002046:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800204a:	2340      	movne	r3, #64	; 0x40
 800204c:	2000      	movs	r0, #0
 800204e:	6031      	str	r1, [r6, #0]
 8002050:	602b      	str	r3, [r5, #0]
 8002052:	b016      	add	sp, #88	; 0x58
 8002054:	bd70      	pop	{r4, r5, r6, pc}
 8002056:	466a      	mov	r2, sp
 8002058:	f000 f8de 	bl	8002218 <_fstat_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	dbec      	blt.n	800203a <__swhatbuf_r+0x12>
 8002060:	9901      	ldr	r1, [sp, #4]
 8002062:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002066:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800206a:	4259      	negs	r1, r3
 800206c:	4159      	adcs	r1, r3
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	e7eb      	b.n	800204c <__swhatbuf_r+0x24>

08002074 <__smakebuf_r>:
 8002074:	898b      	ldrh	r3, [r1, #12]
 8002076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002078:	079d      	lsls	r5, r3, #30
 800207a:	4606      	mov	r6, r0
 800207c:	460c      	mov	r4, r1
 800207e:	d507      	bpl.n	8002090 <__smakebuf_r+0x1c>
 8002080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	6123      	str	r3, [r4, #16]
 8002088:	2301      	movs	r3, #1
 800208a:	6163      	str	r3, [r4, #20]
 800208c:	b002      	add	sp, #8
 800208e:	bd70      	pop	{r4, r5, r6, pc}
 8002090:	ab01      	add	r3, sp, #4
 8002092:	466a      	mov	r2, sp
 8002094:	f7ff ffc8 	bl	8002028 <__swhatbuf_r>
 8002098:	9900      	ldr	r1, [sp, #0]
 800209a:	4605      	mov	r5, r0
 800209c:	4630      	mov	r0, r6
 800209e:	f7fe fefd 	bl	8000e9c <_malloc_r>
 80020a2:	b948      	cbnz	r0, 80020b8 <__smakebuf_r+0x44>
 80020a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a8:	059a      	lsls	r2, r3, #22
 80020aa:	d4ef      	bmi.n	800208c <__smakebuf_r+0x18>
 80020ac:	f023 0303 	bic.w	r3, r3, #3
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	81a3      	strh	r3, [r4, #12]
 80020b6:	e7e3      	b.n	8002080 <__smakebuf_r+0xc>
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	6020      	str	r0, [r4, #0]
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	81a3      	strh	r3, [r4, #12]
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	6163      	str	r3, [r4, #20]
 80020c6:	9b01      	ldr	r3, [sp, #4]
 80020c8:	6120      	str	r0, [r4, #16]
 80020ca:	b15b      	cbz	r3, 80020e4 <__smakebuf_r+0x70>
 80020cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020d0:	4630      	mov	r0, r6
 80020d2:	f000 f8b3 	bl	800223c <_isatty_r>
 80020d6:	b128      	cbz	r0, 80020e4 <__smakebuf_r+0x70>
 80020d8:	89a3      	ldrh	r3, [r4, #12]
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	81a3      	strh	r3, [r4, #12]
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	431d      	orrs	r5, r3
 80020e8:	81a5      	strh	r5, [r4, #12]
 80020ea:	e7cf      	b.n	800208c <__smakebuf_r+0x18>

080020ec <lflush>:
 80020ec:	898b      	ldrh	r3, [r1, #12]
 80020ee:	f003 0309 	and.w	r3, r3, #9
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d103      	bne.n	80020fe <lflush+0x12>
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <lflush+0x18>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f7ff bca3 	b.w	8001a44 <_fflush_r>
 80020fe:	2000      	movs	r0, #0
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000058 	.word	0x20000058

08002108 <__srefill_r>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	460c      	mov	r4, r1
 800210c:	4605      	mov	r5, r0
 800210e:	b118      	cbz	r0, 8002118 <__srefill_r+0x10>
 8002110:	6a03      	ldr	r3, [r0, #32]
 8002112:	b90b      	cbnz	r3, 8002118 <__srefill_r+0x10>
 8002114:	f7fe fcd0 	bl	8000ab8 <__sinit>
 8002118:	2300      	movs	r3, #0
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002122:	069e      	lsls	r6, r3, #26
 8002124:	d502      	bpl.n	800212c <__srefill_r+0x24>
 8002126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212a:	e05c      	b.n	80021e6 <__srefill_r+0xde>
 800212c:	0758      	lsls	r0, r3, #29
 800212e:	d448      	bmi.n	80021c2 <__srefill_r+0xba>
 8002130:	06d9      	lsls	r1, r3, #27
 8002132:	d405      	bmi.n	8002140 <__srefill_r+0x38>
 8002134:	2309      	movs	r3, #9
 8002136:	602b      	str	r3, [r5, #0]
 8002138:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800213c:	81a3      	strh	r3, [r4, #12]
 800213e:	e7f2      	b.n	8002126 <__srefill_r+0x1e>
 8002140:	071a      	lsls	r2, r3, #28
 8002142:	d50b      	bpl.n	800215c <__srefill_r+0x54>
 8002144:	4621      	mov	r1, r4
 8002146:	4628      	mov	r0, r5
 8002148:	f7ff fc7c 	bl	8001a44 <_fflush_r>
 800214c:	2800      	cmp	r0, #0
 800214e:	d1ea      	bne.n	8002126 <__srefill_r+0x1e>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	60a0      	str	r0, [r4, #8]
 8002154:	f023 0308 	bic.w	r3, r3, #8
 8002158:	81a3      	strh	r3, [r4, #12]
 800215a:	61a0      	str	r0, [r4, #24]
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	81a3      	strh	r3, [r4, #12]
 8002164:	6923      	ldr	r3, [r4, #16]
 8002166:	b91b      	cbnz	r3, 8002170 <__srefill_r+0x68>
 8002168:	4621      	mov	r1, r4
 800216a:	4628      	mov	r0, r5
 800216c:	f7ff ff82 	bl	8002074 <__smakebuf_r>
 8002170:	89a6      	ldrh	r6, [r4, #12]
 8002172:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002176:	07b3      	lsls	r3, r6, #30
 8002178:	d00f      	beq.n	800219a <__srefill_r+0x92>
 800217a:	2301      	movs	r3, #1
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <__srefill_r+0xe4>)
 800217e:	491c      	ldr	r1, [pc, #112]	; (80021f0 <__srefill_r+0xe8>)
 8002180:	481c      	ldr	r0, [pc, #112]	; (80021f4 <__srefill_r+0xec>)
 8002182:	81a3      	strh	r3, [r4, #12]
 8002184:	f006 0609 	and.w	r6, r6, #9
 8002188:	f7fe fcae 	bl	8000ae8 <_fwalk_sglue>
 800218c:	2e09      	cmp	r6, #9
 800218e:	81a7      	strh	r7, [r4, #12]
 8002190:	d103      	bne.n	800219a <__srefill_r+0x92>
 8002192:	4621      	mov	r1, r4
 8002194:	4628      	mov	r0, r5
 8002196:	f7ff fbcf 	bl	8001938 <__sflush_r>
 800219a:	6922      	ldr	r2, [r4, #16]
 800219c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800219e:	6963      	ldr	r3, [r4, #20]
 80021a0:	6a21      	ldr	r1, [r4, #32]
 80021a2:	6022      	str	r2, [r4, #0]
 80021a4:	4628      	mov	r0, r5
 80021a6:	47b0      	blx	r6
 80021a8:	2800      	cmp	r0, #0
 80021aa:	6060      	str	r0, [r4, #4]
 80021ac:	dc1c      	bgt.n	80021e8 <__srefill_r+0xe0>
 80021ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021b2:	bf17      	itett	ne
 80021b4:	2200      	movne	r2, #0
 80021b6:	f043 0320 	orreq.w	r3, r3, #32
 80021ba:	6062      	strne	r2, [r4, #4]
 80021bc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80021c0:	e7bc      	b.n	800213c <__srefill_r+0x34>
 80021c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021c4:	2900      	cmp	r1, #0
 80021c6:	d0cd      	beq.n	8002164 <__srefill_r+0x5c>
 80021c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021cc:	4299      	cmp	r1, r3
 80021ce:	d002      	beq.n	80021d6 <__srefill_r+0xce>
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 f897 	bl	8002304 <_free_r>
 80021d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021d8:	6063      	str	r3, [r4, #4]
 80021da:	2000      	movs	r0, #0
 80021dc:	6360      	str	r0, [r4, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0c0      	beq.n	8002164 <__srefill_r+0x5c>
 80021e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021e4:	6023      	str	r3, [r4, #0]
 80021e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e8:	2000      	movs	r0, #0
 80021ea:	e7fc      	b.n	80021e6 <__srefill_r+0xde>
 80021ec:	20000000 	.word	0x20000000
 80021f0:	080020ed 	.word	0x080020ed
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <_close_r>:
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4d06      	ldr	r5, [pc, #24]	; (8002214 <_close_r+0x1c>)
 80021fc:	2300      	movs	r3, #0
 80021fe:	4604      	mov	r4, r0
 8002200:	4608      	mov	r0, r1
 8002202:	602b      	str	r3, [r5, #0]
 8002204:	f7fe faf3 	bl	80007ee <_close>
 8002208:	1c43      	adds	r3, r0, #1
 800220a:	d102      	bne.n	8002212 <_close_r+0x1a>
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	b103      	cbz	r3, 8002212 <_close_r+0x1a>
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	200001c4 	.word	0x200001c4

08002218 <_fstat_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4d07      	ldr	r5, [pc, #28]	; (8002238 <_fstat_r+0x20>)
 800221c:	2300      	movs	r3, #0
 800221e:	4604      	mov	r4, r0
 8002220:	4608      	mov	r0, r1
 8002222:	4611      	mov	r1, r2
 8002224:	602b      	str	r3, [r5, #0]
 8002226:	f7fe faee 	bl	8000806 <_fstat>
 800222a:	1c43      	adds	r3, r0, #1
 800222c:	d102      	bne.n	8002234 <_fstat_r+0x1c>
 800222e:	682b      	ldr	r3, [r5, #0]
 8002230:	b103      	cbz	r3, 8002234 <_fstat_r+0x1c>
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	bd38      	pop	{r3, r4, r5, pc}
 8002236:	bf00      	nop
 8002238:	200001c4 	.word	0x200001c4

0800223c <_isatty_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4d06      	ldr	r5, [pc, #24]	; (8002258 <_isatty_r+0x1c>)
 8002240:	2300      	movs	r3, #0
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	602b      	str	r3, [r5, #0]
 8002248:	f7fe faed 	bl	8000826 <_isatty>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_isatty_r+0x1a>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	b103      	cbz	r3, 8002256 <_isatty_r+0x1a>
 8002254:	6023      	str	r3, [r4, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	200001c4 	.word	0x200001c4

0800225c <_lseek_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	4d07      	ldr	r5, [pc, #28]	; (800227c <_lseek_r+0x20>)
 8002260:	4604      	mov	r4, r0
 8002262:	4608      	mov	r0, r1
 8002264:	4611      	mov	r1, r2
 8002266:	2200      	movs	r2, #0
 8002268:	602a      	str	r2, [r5, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	f7fe fae6 	bl	800083c <_lseek>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_lseek_r+0x1e>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_lseek_r+0x1e>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	200001c4 	.word	0x200001c4

08002280 <_read_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	4d07      	ldr	r5, [pc, #28]	; (80022a0 <_read_r+0x20>)
 8002284:	4604      	mov	r4, r0
 8002286:	4608      	mov	r0, r1
 8002288:	4611      	mov	r1, r2
 800228a:	2200      	movs	r2, #0
 800228c:	602a      	str	r2, [r5, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	f7fe fa74 	bl	800077c <_read>
 8002294:	1c43      	adds	r3, r0, #1
 8002296:	d102      	bne.n	800229e <_read_r+0x1e>
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	b103      	cbz	r3, 800229e <_read_r+0x1e>
 800229c:	6023      	str	r3, [r4, #0]
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	200001c4 	.word	0x200001c4

080022a4 <_sbrk_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d06      	ldr	r5, [pc, #24]	; (80022c0 <_sbrk_r+0x1c>)
 80022a8:	2300      	movs	r3, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	602b      	str	r3, [r5, #0]
 80022b0:	f7fe fad2 	bl	8000858 <_sbrk>
 80022b4:	1c43      	adds	r3, r0, #1
 80022b6:	d102      	bne.n	80022be <_sbrk_r+0x1a>
 80022b8:	682b      	ldr	r3, [r5, #0]
 80022ba:	b103      	cbz	r3, 80022be <_sbrk_r+0x1a>
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	bd38      	pop	{r3, r4, r5, pc}
 80022c0:	200001c4 	.word	0x200001c4

080022c4 <_write_r>:
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4d07      	ldr	r5, [pc, #28]	; (80022e4 <_write_r+0x20>)
 80022c8:	4604      	mov	r4, r0
 80022ca:	4608      	mov	r0, r1
 80022cc:	4611      	mov	r1, r2
 80022ce:	2200      	movs	r2, #0
 80022d0:	602a      	str	r2, [r5, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7fe fa6f 	bl	80007b6 <_write>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_write_r+0x1e>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_write_r+0x1e>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	200001c4 	.word	0x200001c4

080022e8 <memcpy>:
 80022e8:	440a      	add	r2, r1
 80022ea:	4291      	cmp	r1, r2
 80022ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80022f0:	d100      	bne.n	80022f4 <memcpy+0xc>
 80022f2:	4770      	bx	lr
 80022f4:	b510      	push	{r4, lr}
 80022f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022fe:	4291      	cmp	r1, r2
 8002300:	d1f9      	bne.n	80022f6 <memcpy+0xe>
 8002302:	bd10      	pop	{r4, pc}

08002304 <_free_r>:
 8002304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002306:	2900      	cmp	r1, #0
 8002308:	d044      	beq.n	8002394 <_free_r+0x90>
 800230a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800230e:	9001      	str	r0, [sp, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f1a1 0404 	sub.w	r4, r1, #4
 8002316:	bfb8      	it	lt
 8002318:	18e4      	addlt	r4, r4, r3
 800231a:	f7ff fbbb 	bl	8001a94 <__malloc_lock>
 800231e:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <_free_r+0x94>)
 8002320:	9801      	ldr	r0, [sp, #4]
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	b933      	cbnz	r3, 8002334 <_free_r+0x30>
 8002326:	6063      	str	r3, [r4, #4]
 8002328:	6014      	str	r4, [r2, #0]
 800232a:	b003      	add	sp, #12
 800232c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002330:	f7ff bbb6 	b.w	8001aa0 <__malloc_unlock>
 8002334:	42a3      	cmp	r3, r4
 8002336:	d908      	bls.n	800234a <_free_r+0x46>
 8002338:	6825      	ldr	r5, [r4, #0]
 800233a:	1961      	adds	r1, r4, r5
 800233c:	428b      	cmp	r3, r1
 800233e:	bf01      	itttt	eq
 8002340:	6819      	ldreq	r1, [r3, #0]
 8002342:	685b      	ldreq	r3, [r3, #4]
 8002344:	1949      	addeq	r1, r1, r5
 8002346:	6021      	streq	r1, [r4, #0]
 8002348:	e7ed      	b.n	8002326 <_free_r+0x22>
 800234a:	461a      	mov	r2, r3
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	b10b      	cbz	r3, 8002354 <_free_r+0x50>
 8002350:	42a3      	cmp	r3, r4
 8002352:	d9fa      	bls.n	800234a <_free_r+0x46>
 8002354:	6811      	ldr	r1, [r2, #0]
 8002356:	1855      	adds	r5, r2, r1
 8002358:	42a5      	cmp	r5, r4
 800235a:	d10b      	bne.n	8002374 <_free_r+0x70>
 800235c:	6824      	ldr	r4, [r4, #0]
 800235e:	4421      	add	r1, r4
 8002360:	1854      	adds	r4, r2, r1
 8002362:	42a3      	cmp	r3, r4
 8002364:	6011      	str	r1, [r2, #0]
 8002366:	d1e0      	bne.n	800232a <_free_r+0x26>
 8002368:	681c      	ldr	r4, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	6053      	str	r3, [r2, #4]
 800236e:	440c      	add	r4, r1
 8002370:	6014      	str	r4, [r2, #0]
 8002372:	e7da      	b.n	800232a <_free_r+0x26>
 8002374:	d902      	bls.n	800237c <_free_r+0x78>
 8002376:	230c      	movs	r3, #12
 8002378:	6003      	str	r3, [r0, #0]
 800237a:	e7d6      	b.n	800232a <_free_r+0x26>
 800237c:	6825      	ldr	r5, [r4, #0]
 800237e:	1961      	adds	r1, r4, r5
 8002380:	428b      	cmp	r3, r1
 8002382:	bf04      	itt	eq
 8002384:	6819      	ldreq	r1, [r3, #0]
 8002386:	685b      	ldreq	r3, [r3, #4]
 8002388:	6063      	str	r3, [r4, #4]
 800238a:	bf04      	itt	eq
 800238c:	1949      	addeq	r1, r1, r5
 800238e:	6021      	streq	r1, [r4, #0]
 8002390:	6054      	str	r4, [r2, #4]
 8002392:	e7ca      	b.n	800232a <_free_r+0x26>
 8002394:	b003      	add	sp, #12
 8002396:	bd30      	pop	{r4, r5, pc}
 8002398:	200001bc 	.word	0x200001bc

0800239c <_malloc_usable_size_r>:
 800239c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a0:	1f18      	subs	r0, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bfbc      	itt	lt
 80023a6:	580b      	ldrlt	r3, [r1, r0]
 80023a8:	18c0      	addlt	r0, r0, r3
 80023aa:	4770      	bx	lr

080023ac <_init>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr

080023b8 <_fini>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr
