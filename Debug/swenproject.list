
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001330  08001330  00011330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001374  08001374  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001374  08001374  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001374  08001374  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001374  08001374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001378  08001378  00011378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800137c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  080013d0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080013d0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018bb  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000816  00000000  00000000  00021982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00022198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000105  00000000  00000000  00022328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000db3  00000000  00000000  0002242d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003337  00000000  00000000  000231e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3ab4  00000000  00000000  00026517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008d4  00000000  00000000  00119fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0011a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001318 	.word	0x08001318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001318 	.word	0x08001318

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <demo_of_UART_print>:
// }

static struct systick* systick_instance;

// This function is to print counter on UART port and toggle LED
static void demo_of_UART_print(int counter){
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	int n ;
	uint8_t buffer[BUFFER_SIZE];

	n = sprintf((char *)buffer, "counter = %d\r\n", counter);
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	490a      	ldr	r1, [pc, #40]	; (80002a8 <demo_of_UART_print+0x38>)
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fbad 	bl	80009e0 <siprintf>
 8000286:	62f8      	str	r0, [r7, #44]	; 0x2c
	USART_Write(USART2, buffer, n);
 8000288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4619      	mov	r1, r3
 8000290:	4806      	ldr	r0, [pc, #24]	; (80002ac <demo_of_UART_print+0x3c>)
 8000292:	f000 f993 	bl	80005bc <USART_Write>

	// delay_loop( 8000000 ) ;	// comment this out when you are ready to test delay_systick
	delay_systick();	// enable this when you are ready to test
 8000296:	f000 fa0f 	bl	80006b8 <delay_systick>
	// Toggle LED
	LED_Toggle(LED_PIN);
 800029a:	2005      	movs	r0, #5
 800029c:	f000 f886 	bl	80003ac <LED_Toggle>
}
 80002a0:	bf00      	nop
 80002a2:	3730      	adds	r7, #48	; 0x30
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	08001330 	.word	0x08001330
 80002ac:	40004400 	.word	0x40004400

080002b0 <init>:

void init() {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    systick_instance = (struct systick *)init_systick();
 80002b4:	f000 f9d6 	bl	8000664 <init_systick>
 80002b8:	4603      	mov	r3, r0
 80002ba:	4a02      	ldr	r2, [pc, #8]	; (80002c4 <init+0x14>)
 80002bc:	6013      	str	r3, [r2, #0]
	// systick_instance->RVR = 2000000; //set the delay to 2 seconds
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000070 	.word	0x20000070

080002c8 <run_demo>:

void run_demo(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
	
	int counter = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
	init();
 80002d2:	f7ff ffed 	bl	80002b0 <init>
	// Run a loop to print counter value on UART port
	while (1)
	{
		//demo_of_printf_scanf();
		demo_of_UART_print(counter);
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	f7ff ffca 	bl	8000270 <demo_of_UART_print>
		delay_systick();
 80002dc:	f000 f9ec 	bl	80006b8 <delay_systick>
		LED_Toggle(LED_PIN);
 80002e0:	2005      	movs	r0, #5
 80002e2:	f000 f863 	bl	80003ac <LED_Toggle>
		counter++;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3301      	adds	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
		demo_of_UART_print(counter);
 80002ec:	e7f3      	b.n	80002d6 <run_demo+0xe>
	...

080002f0 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <LED_Init+0xb8>)
 80002fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <LED_Init+0xb8>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));  
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800031a:	4013      	ands	r3, r2
 800031c:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 800031e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000332:	4313      	orrs	r3, r2
 8000334:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	2103      	movs	r1, #3
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	43db      	mvns	r3, r3
 8000348:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800034c:	4013      	ands	r3, r2
 800034e:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000364:	4313      	orrs	r3, r2
 8000366:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	2101      	movs	r1, #1
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800037c:	4013      	ands	r3, r2
 800037e:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000384:	68da      	ldr	r2, [r3, #12]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2103      	movs	r1, #3
 800038c:	fa01 f303 	lsl.w	r3, r1, r3
 8000390:	43db      	mvns	r3, r3
 8000392:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000396:	4013      	ands	r3, r2
 8000398:	60cb      	str	r3, [r1, #12]
	
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <LED_Toggle>:
}

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 80003b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b8:	695a      	ldr	r2, [r3, #20]
 80003ba:	2101      	movs	r1, #1
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c6:	4053      	eors	r3, r2
 80003c8:	614b      	str	r3, [r1, #20]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80003dc:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <UART2_Init+0x40>)
 80003de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e0:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <UART2_Init+0x40>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <UART2_Init+0x40>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <UART2_Init+0x40>)
 80003f0:	f023 030c 	bic.w	r3, r3, #12
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <UART2_Init+0x40>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fe:	4a06      	ldr	r2, [pc, #24]	; (8000418 <UART2_Init+0x40>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000408:	f000 f80a 	bl	8000420 <UART2_GPIO_Init>
	USART_Init(USART2);
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <UART2_Init+0x44>)
 800040e:	f000 f84f 	bl	80004b0 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	40004400 	.word	0x40004400

08000420 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <UART2_GPIO_Init+0x8c>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000428:	4a20      	ldr	r2, [pc, #128]	; (80004ac <UART2_GPIO_Init+0x8c>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000430:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800043e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000440:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800044a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800044e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000450:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800045a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800045e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000464:	6a1b      	ldr	r3, [r3, #32]
 8000466:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800046a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800046e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800047a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800047e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800048a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800048e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800049a:	f023 030c 	bic.w	r3, r3, #12
 800049e:	6053      	str	r3, [r2, #4]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40021000 	.word	0x40021000

080004b0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f023 0201 	bic.w	r2, r3, #1
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f242 028d 	movw	r2, #8333	; 0x208d
 80004ee:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f043 020c 	orr.w	r2, r3, #12
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a2c      	ldr	r2, [pc, #176]	; (80005b0 <USART_Init+0x100>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d129      	bne.n	8000558 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f043 0220 	orr.w	r2, r3, #32
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 0210 	bic.w	r2, r3, #16
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f023 0201 	bic.w	r2, r3, #1
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <USART_Init+0x104>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d10b      	bne.n	8000578 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <USART_Init+0x108>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <USART_Init+0x108>)
 8000572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000576:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f043 0201 	orr.w	r2, r3, #1
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000584:	bf00      	nop
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f9      	beq.n	8000586 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000592:	bf00      	nop
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	69db      	ldr	r3, [r3, #28]
 8000598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <USART_Init+0xe4>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40004c00 	.word	0x40004c00
 80005b4:	40004400 	.word	0x40004400
 80005b8:	40013800 	.word	0x40013800

080005bc <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e014      	b.n	80005f8 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80005ce:	bf00      	nop
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f9      	beq.n	80005d0 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80005ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ee:	f000 f819 	bl	8000624 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8e6      	bhi.n	80005ce <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000600:	bf00      	nop
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	61da      	str	r2, [r3, #28]
}   
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	fb03 f202 	mul.w	r2, r3, r2
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <USART_Delay+0x3c>)
 8000636:	fba3 1302 	umull	r1, r3, r3, r2
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	0852      	lsrs	r2, r2, #1
 800063e:	4413      	add	r3, r2
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000644:	bf00      	nop
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3b01      	subs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f9      	bne.n	8000646 <USART_Delay+0x22>
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	24924925 	.word	0x24924925

08000664 <init_systick>:
/**
 * @brief Initialization function for systick
 * 
 * @return struct systick* 
 */
struct systick * init_systick() {
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
    // Initialize systick
    systick->CSR &= ~(1 << 0); // Clear the CSR register
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <init_systick+0x4c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <init_systick+0x4c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f022 0201 	bic.w	r2, r2, #1
 8000676:	601a      	str	r2, [r3, #0]
    systick->CSR |= 1 << 2;    // Set the internal clock source
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <init_systick+0x4c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <init_systick+0x4c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f042 0204 	orr.w	r2, r2, #4
 8000686:	601a      	str	r2, [r3, #0]
    systick->CSR |= 1;    // Enable the systick counter
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <init_systick+0x4c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <init_systick+0x4c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f042 0201 	orr.w	r2, r2, #1
 8000696:	601a      	str	r2, [r3, #0]
    systick->RVR = 15999999;  // Set the reload value for 2 seconds delay
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <init_systick+0x4c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <init_systick+0x50>)
 800069e:	605a      	str	r2, [r3, #4]

    return systick;
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <init_systick+0x4c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000
 80006b4:	00f423ff 	.word	0x00f423ff

080006b8 <delay_systick>:

/**
 * @brief This function is to create a delay by consuming CPU cycle on counter
 */
void delay_systick() {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
    // Wait until the count flag counts down to 0. 
    while ((systick->CSR >> 16) == 0) { // Check the count flag bit to make sure the counter is not 1
 80006bc:	bf00      	nop
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <delay_systick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	0c1b      	lsrs	r3, r3, #16
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <delay_systick+0x6>
        // Wait
    }
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000000 	.word	0x20000000

080006dc <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80006e2:	4b6b      	ldr	r3, [pc, #428]	; (8000890 <System_Clock_Init+0x1b4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a6a      	ldr	r2, [pc, #424]	; (8000890 <System_Clock_Init+0x1b4>)
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80006ee:	4b68      	ldr	r3, [pc, #416]	; (8000890 <System_Clock_Init+0x1b4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a67      	ldr	r2, [pc, #412]	; (8000890 <System_Clock_Init+0x1b4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80006fa:	4b66      	ldr	r3, [pc, #408]	; (8000894 <System_Clock_Init+0x1b8>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a65      	ldr	r2, [pc, #404]	; (8000894 <System_Clock_Init+0x1b8>)
 8000700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000704:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000706:	bf00      	nop
 8000708:	4b62      	ldr	r3, [pc, #392]	; (8000894 <System_Clock_Init+0x1b8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000714:	2310      	movs	r3, #16
 8000716:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000718:	4b5e      	ldr	r3, [pc, #376]	; (8000894 <System_Clock_Init+0x1b8>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a5d      	ldr	r2, [pc, #372]	; (8000894 <System_Clock_Init+0x1b8>)
 800071e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000722:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000724:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <System_Clock_Init+0x1b8>)
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	061b      	lsls	r3, r3, #24
 800072c:	4959      	ldr	r1, [pc, #356]	; (8000894 <System_Clock_Init+0x1b8>)
 800072e:	4313      	orrs	r3, r2
 8000730:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000732:	4b58      	ldr	r3, [pc, #352]	; (8000894 <System_Clock_Init+0x1b8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a57      	ldr	r2, [pc, #348]	; (8000894 <System_Clock_Init+0x1b8>)
 8000738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800073c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800073e:	bf00      	nop
 8000740:	4b54      	ldr	r3, [pc, #336]	; (8000894 <System_Clock_Init+0x1b8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800074c:	d0f8      	beq.n	8000740 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800074e:	4b51      	ldr	r3, [pc, #324]	; (8000894 <System_Clock_Init+0x1b8>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a50      	ldr	r2, [pc, #320]	; (8000894 <System_Clock_Init+0x1b8>)
 8000754:	f023 0303 	bic.w	r3, r3, #3
 8000758:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800075a:	4b4e      	ldr	r3, [pc, #312]	; (8000894 <System_Clock_Init+0x1b8>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a4d      	ldr	r2, [pc, #308]	; (8000894 <System_Clock_Init+0x1b8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000766:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <System_Clock_Init+0x1b8>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800076e:	4a49      	ldr	r2, [pc, #292]	; (8000894 <System_Clock_Init+0x1b8>)
 8000770:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000774:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <System_Clock_Init+0x1b8>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800077e:	4a45      	ldr	r2, [pc, #276]	; (8000894 <System_Clock_Init+0x1b8>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <System_Clock_Init+0x1b8>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4a42      	ldr	r2, [pc, #264]	; (8000894 <System_Clock_Init+0x1b8>)
 800078c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000790:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <System_Clock_Init+0x1b8>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4a3f      	ldr	r2, [pc, #252]	; (8000894 <System_Clock_Init+0x1b8>)
 8000798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800079c:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <System_Clock_Init+0x1b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a3c      	ldr	r2, [pc, #240]	; (8000894 <System_Clock_Init+0x1b8>)
 80007a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80007aa:	bf00      	nop
 80007ac:	4b39      	ldr	r3, [pc, #228]	; (8000894 <System_Clock_Init+0x1b8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f9      	beq.n	80007ac <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80007b8:	4b36      	ldr	r3, [pc, #216]	; (8000894 <System_Clock_Init+0x1b8>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	4a35      	ldr	r2, [pc, #212]	; (8000894 <System_Clock_Init+0x1b8>)
 80007be:	f023 0303 	bic.w	r3, r3, #3
 80007c2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <System_Clock_Init+0x1b8>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	4a32      	ldr	r2, [pc, #200]	; (8000894 <System_Clock_Init+0x1b8>)
 80007ca:	f043 0303 	orr.w	r3, r3, #3
 80007ce:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80007d0:	bf00      	nop
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <System_Clock_Init+0x1b8>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f003 030c 	and.w	r3, r3, #12
 80007da:	2b0c      	cmp	r3, #12
 80007dc:	d1f9      	bne.n	80007d2 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <System_Clock_Init+0x1b8>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <System_Clock_Init+0x1b8>)
 80007e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007e8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <System_Clock_Init+0x1b8>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	4a29      	ldr	r2, [pc, #164]	; (8000894 <System_Clock_Init+0x1b8>)
 80007f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007f4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <System_Clock_Init+0x1b8>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4a26      	ldr	r2, [pc, #152]	; (8000894 <System_Clock_Init+0x1b8>)
 80007fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000800:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <System_Clock_Init+0x1b8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <System_Clock_Init+0x1b8>)
 8000808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800080c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800080e:	bf00      	nop
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <System_Clock_Init+0x1b8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000818:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800081c:	d0f8      	beq.n	8000810 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <System_Clock_Init+0x1b8>)
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <System_Clock_Init+0x1b8>)
 8000824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000828:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <System_Clock_Init+0x1b8>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <System_Clock_Init+0x1b8>)
 8000830:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000834:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <System_Clock_Init+0x1b8>)
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <System_Clock_Init+0x1b8>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <System_Clock_Init+0x1b8>)
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <System_Clock_Init+0x1b8>)
 8000848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <System_Clock_Init+0x1b8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <System_Clock_Init+0x1b8>)
 8000854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000858:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800085a:	bf00      	nop
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <System_Clock_Init+0x1b8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0f9      	beq.n	800085c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <System_Clock_Init+0x1b8>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <System_Clock_Init+0x1b8>)
 8000870:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <System_Clock_Init+0x1b8>)
 800087a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <System_Clock_Init+0x1b8>)
 800087e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000882:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40022000 	.word	0x40022000
 8000894:	40021000 	.word	0x40021000

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f000 f8aa 	bl	8000a20 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20018000 	.word	0x20018000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20000074 	.word	0x20000074
 8000900:	200001c0 	.word	0x200001c0

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <SystemInit+0x64>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <SystemInit+0x64>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <SystemInit+0x68>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <SystemInit+0x68>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <SystemInit+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <SystemInit+0x68>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <SystemInit+0x68>)
 8000930:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000934:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000938:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <SystemInit+0x68>)
 800093c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000940:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <SystemInit+0x68>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <SystemInit+0x68>)
 8000948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800094c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <SystemInit+0x68>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SystemInit+0x64>)
 8000956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800095a:	609a      	str	r2, [r3, #8]
#endif
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	40021000 	.word	0x40021000

08000970 <main>:
#include "project.h"
#include "printf.h"
#include <stdio.h>


int main(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000974:	f7ff feb2 	bl	80006dc <System_Clock_Init>
	LED_Init(LED_PIN);
 8000978:	2005      	movs	r0, #5
 800097a:	f7ff fcb9 	bl	80002f0 <LED_Init>
	UART2_Init();
 800097e:	f7ff fd2b 	bl	80003d8 <UART2_Init>
//	printf("hello world\n");
//	 print_systick();
	// use_header();
//	hello();
//	// application run function
	run_demo();
 8000982:	f7ff fca1 	bl	80002c8 <run_demo>
 8000986:	2300      	movs	r3, #0
	
}
 8000988:	4618      	mov	r0, r3
 800098a:	bd80      	pop	{r7, pc}

0800098c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000990:	f7ff ffb8 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f000 f837 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009be:	f7ff ffd7 	bl	8000970 <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80009d0:	0800137c 	.word	0x0800137c
  ldr r2, =_sbss
 80009d4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80009d8:	200001c0 	.word	0x200001c0

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <siprintf>:
 80009e0:	b40e      	push	{r1, r2, r3}
 80009e2:	b500      	push	{lr}
 80009e4:	b09c      	sub	sp, #112	; 0x70
 80009e6:	ab1d      	add	r3, sp, #116	; 0x74
 80009e8:	9002      	str	r0, [sp, #8]
 80009ea:	9006      	str	r0, [sp, #24]
 80009ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <siprintf+0x38>)
 80009f2:	9107      	str	r1, [sp, #28]
 80009f4:	9104      	str	r1, [sp, #16]
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <siprintf+0x3c>)
 80009f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80009fc:	9105      	str	r1, [sp, #20]
 80009fe:	6800      	ldr	r0, [r0, #0]
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	a902      	add	r1, sp, #8
 8000a04:	f000 f892 	bl	8000b2c <_svfiprintf_r>
 8000a08:	9b02      	ldr	r3, [sp, #8]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	b01c      	add	sp, #112	; 0x70
 8000a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a14:	b003      	add	sp, #12
 8000a16:	4770      	bx	lr
 8000a18:	20000050 	.word	0x20000050
 8000a1c:	ffff0208 	.word	0xffff0208

08000a20 <__errno>:
 8000a20:	4b01      	ldr	r3, [pc, #4]	; (8000a28 <__errno+0x8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000050 	.word	0x20000050

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	; (8000a64 <__libc_init_array+0x38>)
 8000a30:	4c0d      	ldr	r4, [pc, #52]	; (8000a68 <__libc_init_array+0x3c>)
 8000a32:	1b64      	subs	r4, r4, r5
 8000a34:	10a4      	asrs	r4, r4, #2
 8000a36:	2600      	movs	r6, #0
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	; (8000a6c <__libc_init_array+0x40>)
 8000a3e:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__libc_init_array+0x44>)
 8000a40:	f000 fc6a 	bl	8001318 <_init>
 8000a44:	1b64      	subs	r4, r4, r5
 8000a46:	10a4      	asrs	r4, r4, #2
 8000a48:	2600      	movs	r6, #0
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	4798      	blx	r3
 8000a56:	3601      	adds	r6, #1
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	4798      	blx	r3
 8000a60:	3601      	adds	r6, #1
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08001374 	.word	0x08001374
 8000a68:	08001374 	.word	0x08001374
 8000a6c:	08001374 	.word	0x08001374
 8000a70:	08001378 	.word	0x08001378

08000a74 <__retarget_lock_acquire_recursive>:
 8000a74:	4770      	bx	lr

08000a76 <__retarget_lock_release_recursive>:
 8000a76:	4770      	bx	lr

08000a78 <__ssputs_r>:
 8000a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a7c:	688e      	ldr	r6, [r1, #8]
 8000a7e:	461f      	mov	r7, r3
 8000a80:	42be      	cmp	r6, r7
 8000a82:	680b      	ldr	r3, [r1, #0]
 8000a84:	4682      	mov	sl, r0
 8000a86:	460c      	mov	r4, r1
 8000a88:	4690      	mov	r8, r2
 8000a8a:	d82c      	bhi.n	8000ae6 <__ssputs_r+0x6e>
 8000a8c:	898a      	ldrh	r2, [r1, #12]
 8000a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a92:	d026      	beq.n	8000ae2 <__ssputs_r+0x6a>
 8000a94:	6965      	ldr	r5, [r4, #20]
 8000a96:	6909      	ldr	r1, [r1, #16]
 8000a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a9c:	eba3 0901 	sub.w	r9, r3, r1
 8000aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000aa4:	1c7b      	adds	r3, r7, #1
 8000aa6:	444b      	add	r3, r9
 8000aa8:	106d      	asrs	r5, r5, #1
 8000aaa:	429d      	cmp	r5, r3
 8000aac:	bf38      	it	cc
 8000aae:	461d      	movcc	r5, r3
 8000ab0:	0553      	lsls	r3, r2, #21
 8000ab2:	d527      	bpl.n	8000b04 <__ssputs_r+0x8c>
 8000ab4:	4629      	mov	r1, r5
 8000ab6:	f000 f957 	bl	8000d68 <_malloc_r>
 8000aba:	4606      	mov	r6, r0
 8000abc:	b360      	cbz	r0, 8000b18 <__ssputs_r+0xa0>
 8000abe:	6921      	ldr	r1, [r4, #16]
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	f000 fbc7 	bl	8001254 <memcpy>
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	81a3      	strh	r3, [r4, #12]
 8000ad2:	6126      	str	r6, [r4, #16]
 8000ad4:	6165      	str	r5, [r4, #20]
 8000ad6:	444e      	add	r6, r9
 8000ad8:	eba5 0509 	sub.w	r5, r5, r9
 8000adc:	6026      	str	r6, [r4, #0]
 8000ade:	60a5      	str	r5, [r4, #8]
 8000ae0:	463e      	mov	r6, r7
 8000ae2:	42be      	cmp	r6, r7
 8000ae4:	d900      	bls.n	8000ae8 <__ssputs_r+0x70>
 8000ae6:	463e      	mov	r6, r7
 8000ae8:	6820      	ldr	r0, [r4, #0]
 8000aea:	4632      	mov	r2, r6
 8000aec:	4641      	mov	r1, r8
 8000aee:	f000 fb86 	bl	80011fe <memmove>
 8000af2:	68a3      	ldr	r3, [r4, #8]
 8000af4:	1b9b      	subs	r3, r3, r6
 8000af6:	60a3      	str	r3, [r4, #8]
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	4433      	add	r3, r6
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	2000      	movs	r0, #0
 8000b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b04:	462a      	mov	r2, r5
 8000b06:	f000 fb4b 	bl	80011a0 <_realloc_r>
 8000b0a:	4606      	mov	r6, r0
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d1e0      	bne.n	8000ad2 <__ssputs_r+0x5a>
 8000b10:	6921      	ldr	r1, [r4, #16]
 8000b12:	4650      	mov	r0, sl
 8000b14:	f000 fbac 	bl	8001270 <_free_r>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	f8ca 3000 	str.w	r3, [sl]
 8000b1e:	89a3      	ldrh	r3, [r4, #12]
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	81a3      	strh	r3, [r4, #12]
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b2a:	e7e9      	b.n	8000b00 <__ssputs_r+0x88>

08000b2c <_svfiprintf_r>:
 8000b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b30:	4698      	mov	r8, r3
 8000b32:	898b      	ldrh	r3, [r1, #12]
 8000b34:	061b      	lsls	r3, r3, #24
 8000b36:	b09d      	sub	sp, #116	; 0x74
 8000b38:	4607      	mov	r7, r0
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4614      	mov	r4, r2
 8000b3e:	d50e      	bpl.n	8000b5e <_svfiprintf_r+0x32>
 8000b40:	690b      	ldr	r3, [r1, #16]
 8000b42:	b963      	cbnz	r3, 8000b5e <_svfiprintf_r+0x32>
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	f000 f90f 	bl	8000d68 <_malloc_r>
 8000b4a:	6028      	str	r0, [r5, #0]
 8000b4c:	6128      	str	r0, [r5, #16]
 8000b4e:	b920      	cbnz	r0, 8000b5a <_svfiprintf_r+0x2e>
 8000b50:	230c      	movs	r3, #12
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	e0d0      	b.n	8000cfc <_svfiprintf_r+0x1d0>
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	616b      	str	r3, [r5, #20]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9309      	str	r3, [sp, #36]	; 0x24
 8000b62:	2320      	movs	r3, #32
 8000b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b6c:	2330      	movs	r3, #48	; 0x30
 8000b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000d14 <_svfiprintf_r+0x1e8>
 8000b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b76:	f04f 0901 	mov.w	r9, #1
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	469a      	mov	sl, r3
 8000b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b82:	b10a      	cbz	r2, 8000b88 <_svfiprintf_r+0x5c>
 8000b84:	2a25      	cmp	r2, #37	; 0x25
 8000b86:	d1f9      	bne.n	8000b7c <_svfiprintf_r+0x50>
 8000b88:	ebba 0b04 	subs.w	fp, sl, r4
 8000b8c:	d00b      	beq.n	8000ba6 <_svfiprintf_r+0x7a>
 8000b8e:	465b      	mov	r3, fp
 8000b90:	4622      	mov	r2, r4
 8000b92:	4629      	mov	r1, r5
 8000b94:	4638      	mov	r0, r7
 8000b96:	f7ff ff6f 	bl	8000a78 <__ssputs_r>
 8000b9a:	3001      	adds	r0, #1
 8000b9c:	f000 80a9 	beq.w	8000cf2 <_svfiprintf_r+0x1c6>
 8000ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ba2:	445a      	add	r2, fp
 8000ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8000ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 80a1 	beq.w	8000cf2 <_svfiprintf_r+0x1c6>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bba:	f10a 0a01 	add.w	sl, sl, #1
 8000bbe:	9304      	str	r3, [sp, #16]
 8000bc0:	9307      	str	r3, [sp, #28]
 8000bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8000bc8:	4654      	mov	r4, sl
 8000bca:	2205      	movs	r2, #5
 8000bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bd0:	4850      	ldr	r0, [pc, #320]	; (8000d14 <_svfiprintf_r+0x1e8>)
 8000bd2:	f7ff fafd 	bl	80001d0 <memchr>
 8000bd6:	9a04      	ldr	r2, [sp, #16]
 8000bd8:	b9d8      	cbnz	r0, 8000c12 <_svfiprintf_r+0xe6>
 8000bda:	06d0      	lsls	r0, r2, #27
 8000bdc:	bf44      	itt	mi
 8000bde:	2320      	movmi	r3, #32
 8000be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000be4:	0711      	lsls	r1, r2, #28
 8000be6:	bf44      	itt	mi
 8000be8:	232b      	movmi	r3, #43	; 0x2b
 8000bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bee:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8000bf4:	d015      	beq.n	8000c22 <_svfiprintf_r+0xf6>
 8000bf6:	9a07      	ldr	r2, [sp, #28]
 8000bf8:	4654      	mov	r4, sl
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f04f 0c0a 	mov.w	ip, #10
 8000c00:	4621      	mov	r1, r4
 8000c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c06:	3b30      	subs	r3, #48	; 0x30
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	d94d      	bls.n	8000ca8 <_svfiprintf_r+0x17c>
 8000c0c:	b1b0      	cbz	r0, 8000c3c <_svfiprintf_r+0x110>
 8000c0e:	9207      	str	r2, [sp, #28]
 8000c10:	e014      	b.n	8000c3c <_svfiprintf_r+0x110>
 8000c12:	eba0 0308 	sub.w	r3, r0, r8
 8000c16:	fa09 f303 	lsl.w	r3, r9, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	9304      	str	r3, [sp, #16]
 8000c1e:	46a2      	mov	sl, r4
 8000c20:	e7d2      	b.n	8000bc8 <_svfiprintf_r+0x9c>
 8000c22:	9b03      	ldr	r3, [sp, #12]
 8000c24:	1d19      	adds	r1, r3, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	9103      	str	r1, [sp, #12]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bfbb      	ittet	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	f042 0202 	orrlt.w	r2, r2, #2
 8000c34:	9307      	strge	r3, [sp, #28]
 8000c36:	9307      	strlt	r3, [sp, #28]
 8000c38:	bfb8      	it	lt
 8000c3a:	9204      	strlt	r2, [sp, #16]
 8000c3c:	7823      	ldrb	r3, [r4, #0]
 8000c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8000c40:	d10c      	bne.n	8000c5c <_svfiprintf_r+0x130>
 8000c42:	7863      	ldrb	r3, [r4, #1]
 8000c44:	2b2a      	cmp	r3, #42	; 0x2a
 8000c46:	d134      	bne.n	8000cb2 <_svfiprintf_r+0x186>
 8000c48:	9b03      	ldr	r3, [sp, #12]
 8000c4a:	1d1a      	adds	r2, r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	9203      	str	r2, [sp, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bfb8      	it	lt
 8000c54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000c58:	3402      	adds	r4, #2
 8000c5a:	9305      	str	r3, [sp, #20]
 8000c5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000d24 <_svfiprintf_r+0x1f8>
 8000c60:	7821      	ldrb	r1, [r4, #0]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4650      	mov	r0, sl
 8000c66:	f7ff fab3 	bl	80001d0 <memchr>
 8000c6a:	b138      	cbz	r0, 8000c7c <_svfiprintf_r+0x150>
 8000c6c:	9b04      	ldr	r3, [sp, #16]
 8000c6e:	eba0 000a 	sub.w	r0, r0, sl
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	4082      	lsls	r2, r0
 8000c76:	4313      	orrs	r3, r2
 8000c78:	3401      	adds	r4, #1
 8000c7a:	9304      	str	r3, [sp, #16]
 8000c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c80:	4825      	ldr	r0, [pc, #148]	; (8000d18 <_svfiprintf_r+0x1ec>)
 8000c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c86:	2206      	movs	r2, #6
 8000c88:	f7ff faa2 	bl	80001d0 <memchr>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	d038      	beq.n	8000d02 <_svfiprintf_r+0x1d6>
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <_svfiprintf_r+0x1f0>)
 8000c92:	bb1b      	cbnz	r3, 8000cdc <_svfiprintf_r+0x1b0>
 8000c94:	9b03      	ldr	r3, [sp, #12]
 8000c96:	3307      	adds	r3, #7
 8000c98:	f023 0307 	bic.w	r3, r3, #7
 8000c9c:	3308      	adds	r3, #8
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ca2:	4433      	add	r3, r6
 8000ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8000ca6:	e768      	b.n	8000b7a <_svfiprintf_r+0x4e>
 8000ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cac:	460c      	mov	r4, r1
 8000cae:	2001      	movs	r0, #1
 8000cb0:	e7a6      	b.n	8000c00 <_svfiprintf_r+0xd4>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	3401      	adds	r4, #1
 8000cb6:	9305      	str	r3, [sp, #20]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 0c0a 	mov.w	ip, #10
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cc4:	3a30      	subs	r2, #48	; 0x30
 8000cc6:	2a09      	cmp	r2, #9
 8000cc8:	d903      	bls.n	8000cd2 <_svfiprintf_r+0x1a6>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0c6      	beq.n	8000c5c <_svfiprintf_r+0x130>
 8000cce:	9105      	str	r1, [sp, #20]
 8000cd0:	e7c4      	b.n	8000c5c <_svfiprintf_r+0x130>
 8000cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e7f0      	b.n	8000cbe <_svfiprintf_r+0x192>
 8000cdc:	ab03      	add	r3, sp, #12
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	462a      	mov	r2, r5
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <_svfiprintf_r+0x1f4>)
 8000ce4:	a904      	add	r1, sp, #16
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f3af 8000 	nop.w
 8000cec:	1c42      	adds	r2, r0, #1
 8000cee:	4606      	mov	r6, r0
 8000cf0:	d1d6      	bne.n	8000ca0 <_svfiprintf_r+0x174>
 8000cf2:	89ab      	ldrh	r3, [r5, #12]
 8000cf4:	065b      	lsls	r3, r3, #25
 8000cf6:	f53f af2d 	bmi.w	8000b54 <_svfiprintf_r+0x28>
 8000cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cfc:	b01d      	add	sp, #116	; 0x74
 8000cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d02:	ab03      	add	r3, sp, #12
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	462a      	mov	r2, r5
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <_svfiprintf_r+0x1f4>)
 8000d0a:	a904      	add	r1, sp, #16
 8000d0c:	4638      	mov	r0, r7
 8000d0e:	f000 f919 	bl	8000f44 <_printf_i>
 8000d12:	e7eb      	b.n	8000cec <_svfiprintf_r+0x1c0>
 8000d14:	0800133f 	.word	0x0800133f
 8000d18:	08001349 	.word	0x08001349
 8000d1c:	00000000 	.word	0x00000000
 8000d20:	08000a79 	.word	0x08000a79
 8000d24:	08001345 	.word	0x08001345

08000d28 <sbrk_aligned>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	4e0e      	ldr	r6, [pc, #56]	; (8000d64 <sbrk_aligned+0x3c>)
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	6831      	ldr	r1, [r6, #0]
 8000d30:	4605      	mov	r5, r0
 8000d32:	b911      	cbnz	r1, 8000d3a <sbrk_aligned+0x12>
 8000d34:	f000 fa7e 	bl	8001234 <_sbrk_r>
 8000d38:	6030      	str	r0, [r6, #0]
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f000 fa79 	bl	8001234 <_sbrk_r>
 8000d42:	1c43      	adds	r3, r0, #1
 8000d44:	d00a      	beq.n	8000d5c <sbrk_aligned+0x34>
 8000d46:	1cc4      	adds	r4, r0, #3
 8000d48:	f024 0403 	bic.w	r4, r4, #3
 8000d4c:	42a0      	cmp	r0, r4
 8000d4e:	d007      	beq.n	8000d60 <sbrk_aligned+0x38>
 8000d50:	1a21      	subs	r1, r4, r0
 8000d52:	4628      	mov	r0, r5
 8000d54:	f000 fa6e 	bl	8001234 <_sbrk_r>
 8000d58:	3001      	adds	r0, #1
 8000d5a:	d101      	bne.n	8000d60 <sbrk_aligned+0x38>
 8000d5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000d60:	4620      	mov	r0, r4
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	200001b8 	.word	0x200001b8

08000d68 <_malloc_r>:
 8000d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	1ccd      	adds	r5, r1, #3
 8000d6e:	f025 0503 	bic.w	r5, r5, #3
 8000d72:	3508      	adds	r5, #8
 8000d74:	2d0c      	cmp	r5, #12
 8000d76:	bf38      	it	cc
 8000d78:	250c      	movcc	r5, #12
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	4607      	mov	r7, r0
 8000d7e:	db01      	blt.n	8000d84 <_malloc_r+0x1c>
 8000d80:	42a9      	cmp	r1, r5
 8000d82:	d905      	bls.n	8000d90 <_malloc_r+0x28>
 8000d84:	230c      	movs	r3, #12
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	2600      	movs	r6, #0
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000e64 <_malloc_r+0xfc>
 8000d94:	f000 f9f8 	bl	8001188 <__malloc_lock>
 8000d98:	f8d8 3000 	ldr.w	r3, [r8]
 8000d9c:	461c      	mov	r4, r3
 8000d9e:	bb5c      	cbnz	r4, 8000df8 <_malloc_r+0x90>
 8000da0:	4629      	mov	r1, r5
 8000da2:	4638      	mov	r0, r7
 8000da4:	f7ff ffc0 	bl	8000d28 <sbrk_aligned>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	4604      	mov	r4, r0
 8000dac:	d155      	bne.n	8000e5a <_malloc_r+0xf2>
 8000dae:	f8d8 4000 	ldr.w	r4, [r8]
 8000db2:	4626      	mov	r6, r4
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d145      	bne.n	8000e44 <_malloc_r+0xdc>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d048      	beq.n	8000e4e <_malloc_r+0xe6>
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	eb04 0903 	add.w	r9, r4, r3
 8000dc6:	f000 fa35 	bl	8001234 <_sbrk_r>
 8000dca:	4581      	cmp	r9, r0
 8000dcc:	d13f      	bne.n	8000e4e <_malloc_r+0xe6>
 8000dce:	6821      	ldr	r1, [r4, #0]
 8000dd0:	1a6d      	subs	r5, r5, r1
 8000dd2:	4629      	mov	r1, r5
 8000dd4:	4638      	mov	r0, r7
 8000dd6:	f7ff ffa7 	bl	8000d28 <sbrk_aligned>
 8000dda:	3001      	adds	r0, #1
 8000ddc:	d037      	beq.n	8000e4e <_malloc_r+0xe6>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	442b      	add	r3, r5
 8000de2:	6023      	str	r3, [r4, #0]
 8000de4:	f8d8 3000 	ldr.w	r3, [r8]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d038      	beq.n	8000e5e <_malloc_r+0xf6>
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	42a2      	cmp	r2, r4
 8000df0:	d12b      	bne.n	8000e4a <_malloc_r+0xe2>
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	e00f      	b.n	8000e18 <_malloc_r+0xb0>
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	1b52      	subs	r2, r2, r5
 8000dfc:	d41f      	bmi.n	8000e3e <_malloc_r+0xd6>
 8000dfe:	2a0b      	cmp	r2, #11
 8000e00:	d917      	bls.n	8000e32 <_malloc_r+0xca>
 8000e02:	1961      	adds	r1, r4, r5
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	6025      	str	r5, [r4, #0]
 8000e08:	bf18      	it	ne
 8000e0a:	6059      	strne	r1, [r3, #4]
 8000e0c:	6863      	ldr	r3, [r4, #4]
 8000e0e:	bf08      	it	eq
 8000e10:	f8c8 1000 	streq.w	r1, [r8]
 8000e14:	5162      	str	r2, [r4, r5]
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	4638      	mov	r0, r7
 8000e1a:	f104 060b 	add.w	r6, r4, #11
 8000e1e:	f000 f9b9 	bl	8001194 <__malloc_unlock>
 8000e22:	f026 0607 	bic.w	r6, r6, #7
 8000e26:	1d23      	adds	r3, r4, #4
 8000e28:	1af2      	subs	r2, r6, r3
 8000e2a:	d0ae      	beq.n	8000d8a <_malloc_r+0x22>
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	50a3      	str	r3, [r4, r2]
 8000e30:	e7ab      	b.n	8000d8a <_malloc_r+0x22>
 8000e32:	42a3      	cmp	r3, r4
 8000e34:	6862      	ldr	r2, [r4, #4]
 8000e36:	d1dd      	bne.n	8000df4 <_malloc_r+0x8c>
 8000e38:	f8c8 2000 	str.w	r2, [r8]
 8000e3c:	e7ec      	b.n	8000e18 <_malloc_r+0xb0>
 8000e3e:	4623      	mov	r3, r4
 8000e40:	6864      	ldr	r4, [r4, #4]
 8000e42:	e7ac      	b.n	8000d9e <_malloc_r+0x36>
 8000e44:	4634      	mov	r4, r6
 8000e46:	6876      	ldr	r6, [r6, #4]
 8000e48:	e7b4      	b.n	8000db4 <_malloc_r+0x4c>
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	e7cc      	b.n	8000de8 <_malloc_r+0x80>
 8000e4e:	230c      	movs	r3, #12
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4638      	mov	r0, r7
 8000e54:	f000 f99e 	bl	8001194 <__malloc_unlock>
 8000e58:	e797      	b.n	8000d8a <_malloc_r+0x22>
 8000e5a:	6025      	str	r5, [r4, #0]
 8000e5c:	e7dc      	b.n	8000e18 <_malloc_r+0xb0>
 8000e5e:	605b      	str	r3, [r3, #4]
 8000e60:	deff      	udf	#255	; 0xff
 8000e62:	bf00      	nop
 8000e64:	200001b4 	.word	0x200001b4

08000e68 <_printf_common>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	4699      	mov	r9, r3
 8000e70:	688a      	ldr	r2, [r1, #8]
 8000e72:	690b      	ldr	r3, [r1, #16]
 8000e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	bfb8      	it	lt
 8000e7c:	4613      	movlt	r3, r2
 8000e7e:	6033      	str	r3, [r6, #0]
 8000e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e84:	4607      	mov	r7, r0
 8000e86:	460c      	mov	r4, r1
 8000e88:	b10a      	cbz	r2, 8000e8e <_printf_common+0x26>
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	6033      	str	r3, [r6, #0]
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	0699      	lsls	r1, r3, #26
 8000e92:	bf42      	ittt	mi
 8000e94:	6833      	ldrmi	r3, [r6, #0]
 8000e96:	3302      	addmi	r3, #2
 8000e98:	6033      	strmi	r3, [r6, #0]
 8000e9a:	6825      	ldr	r5, [r4, #0]
 8000e9c:	f015 0506 	ands.w	r5, r5, #6
 8000ea0:	d106      	bne.n	8000eb0 <_printf_common+0x48>
 8000ea2:	f104 0a19 	add.w	sl, r4, #25
 8000ea6:	68e3      	ldr	r3, [r4, #12]
 8000ea8:	6832      	ldr	r2, [r6, #0]
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	42ab      	cmp	r3, r5
 8000eae:	dc26      	bgt.n	8000efe <_printf_common+0x96>
 8000eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000eb4:	1e13      	subs	r3, r2, #0
 8000eb6:	6822      	ldr	r2, [r4, #0]
 8000eb8:	bf18      	it	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	0692      	lsls	r2, r2, #26
 8000ebe:	d42b      	bmi.n	8000f18 <_printf_common+0xb0>
 8000ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	47c0      	blx	r8
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d01e      	beq.n	8000f0c <_printf_common+0xa4>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	6922      	ldr	r2, [r4, #16]
 8000ed2:	f003 0306 	and.w	r3, r3, #6
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf02      	ittt	eq
 8000eda:	68e5      	ldreq	r5, [r4, #12]
 8000edc:	6833      	ldreq	r3, [r6, #0]
 8000ede:	1aed      	subeq	r5, r5, r3
 8000ee0:	68a3      	ldr	r3, [r4, #8]
 8000ee2:	bf0c      	ite	eq
 8000ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee8:	2500      	movne	r5, #0
 8000eea:	4293      	cmp	r3, r2
 8000eec:	bfc4      	itt	gt
 8000eee:	1a9b      	subgt	r3, r3, r2
 8000ef0:	18ed      	addgt	r5, r5, r3
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	341a      	adds	r4, #26
 8000ef6:	42b5      	cmp	r5, r6
 8000ef8:	d11a      	bne.n	8000f30 <_printf_common+0xc8>
 8000efa:	2000      	movs	r0, #0
 8000efc:	e008      	b.n	8000f10 <_printf_common+0xa8>
 8000efe:	2301      	movs	r3, #1
 8000f00:	4652      	mov	r2, sl
 8000f02:	4649      	mov	r1, r9
 8000f04:	4638      	mov	r0, r7
 8000f06:	47c0      	blx	r8
 8000f08:	3001      	adds	r0, #1
 8000f0a:	d103      	bne.n	8000f14 <_printf_common+0xac>
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	3501      	adds	r5, #1
 8000f16:	e7c6      	b.n	8000ea6 <_printf_common+0x3e>
 8000f18:	18e1      	adds	r1, r4, r3
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	2030      	movs	r0, #48	; 0x30
 8000f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f22:	4422      	add	r2, r4
 8000f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	e7c7      	b.n	8000ec0 <_printf_common+0x58>
 8000f30:	2301      	movs	r3, #1
 8000f32:	4622      	mov	r2, r4
 8000f34:	4649      	mov	r1, r9
 8000f36:	4638      	mov	r0, r7
 8000f38:	47c0      	blx	r8
 8000f3a:	3001      	adds	r0, #1
 8000f3c:	d0e6      	beq.n	8000f0c <_printf_common+0xa4>
 8000f3e:	3601      	adds	r6, #1
 8000f40:	e7d9      	b.n	8000ef6 <_printf_common+0x8e>
	...

08000f44 <_printf_i>:
 8000f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	7e0f      	ldrb	r7, [r1, #24]
 8000f4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f4c:	2f78      	cmp	r7, #120	; 0x78
 8000f4e:	4691      	mov	r9, r2
 8000f50:	4680      	mov	r8, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	469a      	mov	sl, r3
 8000f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f5a:	d807      	bhi.n	8000f6c <_printf_i+0x28>
 8000f5c:	2f62      	cmp	r7, #98	; 0x62
 8000f5e:	d80a      	bhi.n	8000f76 <_printf_i+0x32>
 8000f60:	2f00      	cmp	r7, #0
 8000f62:	f000 80d4 	beq.w	800110e <_printf_i+0x1ca>
 8000f66:	2f58      	cmp	r7, #88	; 0x58
 8000f68:	f000 80c0 	beq.w	80010ec <_printf_i+0x1a8>
 8000f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f74:	e03a      	b.n	8000fec <_printf_i+0xa8>
 8000f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f7a:	2b15      	cmp	r3, #21
 8000f7c:	d8f6      	bhi.n	8000f6c <_printf_i+0x28>
 8000f7e:	a101      	add	r1, pc, #4	; (adr r1, 8000f84 <_printf_i+0x40>)
 8000f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f84:	08000fdd 	.word	0x08000fdd
 8000f88:	08000ff1 	.word	0x08000ff1
 8000f8c:	08000f6d 	.word	0x08000f6d
 8000f90:	08000f6d 	.word	0x08000f6d
 8000f94:	08000f6d 	.word	0x08000f6d
 8000f98:	08000f6d 	.word	0x08000f6d
 8000f9c:	08000ff1 	.word	0x08000ff1
 8000fa0:	08000f6d 	.word	0x08000f6d
 8000fa4:	08000f6d 	.word	0x08000f6d
 8000fa8:	08000f6d 	.word	0x08000f6d
 8000fac:	08000f6d 	.word	0x08000f6d
 8000fb0:	080010f5 	.word	0x080010f5
 8000fb4:	0800101d 	.word	0x0800101d
 8000fb8:	080010af 	.word	0x080010af
 8000fbc:	08000f6d 	.word	0x08000f6d
 8000fc0:	08000f6d 	.word	0x08000f6d
 8000fc4:	08001117 	.word	0x08001117
 8000fc8:	08000f6d 	.word	0x08000f6d
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	08000f6d 	.word	0x08000f6d
 8000fd4:	08000f6d 	.word	0x08000f6d
 8000fd8:	080010b7 	.word	0x080010b7
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	1d1a      	adds	r2, r3, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	602a      	str	r2, [r5, #0]
 8000fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fec:	2301      	movs	r3, #1
 8000fee:	e09f      	b.n	8001130 <_printf_i+0x1ec>
 8000ff0:	6820      	ldr	r0, [r4, #0]
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	0607      	lsls	r7, r0, #24
 8000ff6:	f103 0104 	add.w	r1, r3, #4
 8000ffa:	6029      	str	r1, [r5, #0]
 8000ffc:	d501      	bpl.n	8001002 <_printf_i+0xbe>
 8000ffe:	681e      	ldr	r6, [r3, #0]
 8001000:	e003      	b.n	800100a <_printf_i+0xc6>
 8001002:	0646      	lsls	r6, r0, #25
 8001004:	d5fb      	bpl.n	8000ffe <_printf_i+0xba>
 8001006:	f9b3 6000 	ldrsh.w	r6, [r3]
 800100a:	2e00      	cmp	r6, #0
 800100c:	da03      	bge.n	8001016 <_printf_i+0xd2>
 800100e:	232d      	movs	r3, #45	; 0x2d
 8001010:	4276      	negs	r6, r6
 8001012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <_printf_i+0x23c>)
 8001018:	230a      	movs	r3, #10
 800101a:	e012      	b.n	8001042 <_printf_i+0xfe>
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	6820      	ldr	r0, [r4, #0]
 8001020:	1d19      	adds	r1, r3, #4
 8001022:	6029      	str	r1, [r5, #0]
 8001024:	0605      	lsls	r5, r0, #24
 8001026:	d501      	bpl.n	800102c <_printf_i+0xe8>
 8001028:	681e      	ldr	r6, [r3, #0]
 800102a:	e002      	b.n	8001032 <_printf_i+0xee>
 800102c:	0641      	lsls	r1, r0, #25
 800102e:	d5fb      	bpl.n	8001028 <_printf_i+0xe4>
 8001030:	881e      	ldrh	r6, [r3, #0]
 8001032:	4853      	ldr	r0, [pc, #332]	; (8001180 <_printf_i+0x23c>)
 8001034:	2f6f      	cmp	r7, #111	; 0x6f
 8001036:	bf0c      	ite	eq
 8001038:	2308      	moveq	r3, #8
 800103a:	230a      	movne	r3, #10
 800103c:	2100      	movs	r1, #0
 800103e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001042:	6865      	ldr	r5, [r4, #4]
 8001044:	60a5      	str	r5, [r4, #8]
 8001046:	2d00      	cmp	r5, #0
 8001048:	bfa2      	ittt	ge
 800104a:	6821      	ldrge	r1, [r4, #0]
 800104c:	f021 0104 	bicge.w	r1, r1, #4
 8001050:	6021      	strge	r1, [r4, #0]
 8001052:	b90e      	cbnz	r6, 8001058 <_printf_i+0x114>
 8001054:	2d00      	cmp	r5, #0
 8001056:	d04b      	beq.n	80010f0 <_printf_i+0x1ac>
 8001058:	4615      	mov	r5, r2
 800105a:	fbb6 f1f3 	udiv	r1, r6, r3
 800105e:	fb03 6711 	mls	r7, r3, r1, r6
 8001062:	5dc7      	ldrb	r7, [r0, r7]
 8001064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001068:	4637      	mov	r7, r6
 800106a:	42bb      	cmp	r3, r7
 800106c:	460e      	mov	r6, r1
 800106e:	d9f4      	bls.n	800105a <_printf_i+0x116>
 8001070:	2b08      	cmp	r3, #8
 8001072:	d10b      	bne.n	800108c <_printf_i+0x148>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	07de      	lsls	r6, r3, #31
 8001078:	d508      	bpl.n	800108c <_printf_i+0x148>
 800107a:	6923      	ldr	r3, [r4, #16]
 800107c:	6861      	ldr	r1, [r4, #4]
 800107e:	4299      	cmp	r1, r3
 8001080:	bfde      	ittt	le
 8001082:	2330      	movle	r3, #48	; 0x30
 8001084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001088:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800108c:	1b52      	subs	r2, r2, r5
 800108e:	6122      	str	r2, [r4, #16]
 8001090:	f8cd a000 	str.w	sl, [sp]
 8001094:	464b      	mov	r3, r9
 8001096:	aa03      	add	r2, sp, #12
 8001098:	4621      	mov	r1, r4
 800109a:	4640      	mov	r0, r8
 800109c:	f7ff fee4 	bl	8000e68 <_printf_common>
 80010a0:	3001      	adds	r0, #1
 80010a2:	d14a      	bne.n	800113a <_printf_i+0x1f6>
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	b004      	add	sp, #16
 80010aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	f043 0320 	orr.w	r3, r3, #32
 80010b4:	6023      	str	r3, [r4, #0]
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <_printf_i+0x240>)
 80010b8:	2778      	movs	r7, #120	; 0x78
 80010ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	6829      	ldr	r1, [r5, #0]
 80010c2:	061f      	lsls	r7, r3, #24
 80010c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80010c8:	d402      	bmi.n	80010d0 <_printf_i+0x18c>
 80010ca:	065f      	lsls	r7, r3, #25
 80010cc:	bf48      	it	mi
 80010ce:	b2b6      	uxthmi	r6, r6
 80010d0:	07df      	lsls	r7, r3, #31
 80010d2:	bf48      	it	mi
 80010d4:	f043 0320 	orrmi.w	r3, r3, #32
 80010d8:	6029      	str	r1, [r5, #0]
 80010da:	bf48      	it	mi
 80010dc:	6023      	strmi	r3, [r4, #0]
 80010de:	b91e      	cbnz	r6, 80010e8 <_printf_i+0x1a4>
 80010e0:	6823      	ldr	r3, [r4, #0]
 80010e2:	f023 0320 	bic.w	r3, r3, #32
 80010e6:	6023      	str	r3, [r4, #0]
 80010e8:	2310      	movs	r3, #16
 80010ea:	e7a7      	b.n	800103c <_printf_i+0xf8>
 80010ec:	4824      	ldr	r0, [pc, #144]	; (8001180 <_printf_i+0x23c>)
 80010ee:	e7e4      	b.n	80010ba <_printf_i+0x176>
 80010f0:	4615      	mov	r5, r2
 80010f2:	e7bd      	b.n	8001070 <_printf_i+0x12c>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	6826      	ldr	r6, [r4, #0]
 80010f8:	6961      	ldr	r1, [r4, #20]
 80010fa:	1d18      	adds	r0, r3, #4
 80010fc:	6028      	str	r0, [r5, #0]
 80010fe:	0635      	lsls	r5, r6, #24
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	d501      	bpl.n	8001108 <_printf_i+0x1c4>
 8001104:	6019      	str	r1, [r3, #0]
 8001106:	e002      	b.n	800110e <_printf_i+0x1ca>
 8001108:	0670      	lsls	r0, r6, #25
 800110a:	d5fb      	bpl.n	8001104 <_printf_i+0x1c0>
 800110c:	8019      	strh	r1, [r3, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	6123      	str	r3, [r4, #16]
 8001112:	4615      	mov	r5, r2
 8001114:	e7bc      	b.n	8001090 <_printf_i+0x14c>
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	1d1a      	adds	r2, r3, #4
 800111a:	602a      	str	r2, [r5, #0]
 800111c:	681d      	ldr	r5, [r3, #0]
 800111e:	6862      	ldr	r2, [r4, #4]
 8001120:	2100      	movs	r1, #0
 8001122:	4628      	mov	r0, r5
 8001124:	f7ff f854 	bl	80001d0 <memchr>
 8001128:	b108      	cbz	r0, 800112e <_printf_i+0x1ea>
 800112a:	1b40      	subs	r0, r0, r5
 800112c:	6060      	str	r0, [r4, #4]
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	6123      	str	r3, [r4, #16]
 8001132:	2300      	movs	r3, #0
 8001134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001138:	e7aa      	b.n	8001090 <_printf_i+0x14c>
 800113a:	6923      	ldr	r3, [r4, #16]
 800113c:	462a      	mov	r2, r5
 800113e:	4649      	mov	r1, r9
 8001140:	4640      	mov	r0, r8
 8001142:	47d0      	blx	sl
 8001144:	3001      	adds	r0, #1
 8001146:	d0ad      	beq.n	80010a4 <_printf_i+0x160>
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	079b      	lsls	r3, r3, #30
 800114c:	d413      	bmi.n	8001176 <_printf_i+0x232>
 800114e:	68e0      	ldr	r0, [r4, #12]
 8001150:	9b03      	ldr	r3, [sp, #12]
 8001152:	4298      	cmp	r0, r3
 8001154:	bfb8      	it	lt
 8001156:	4618      	movlt	r0, r3
 8001158:	e7a6      	b.n	80010a8 <_printf_i+0x164>
 800115a:	2301      	movs	r3, #1
 800115c:	4632      	mov	r2, r6
 800115e:	4649      	mov	r1, r9
 8001160:	4640      	mov	r0, r8
 8001162:	47d0      	blx	sl
 8001164:	3001      	adds	r0, #1
 8001166:	d09d      	beq.n	80010a4 <_printf_i+0x160>
 8001168:	3501      	adds	r5, #1
 800116a:	68e3      	ldr	r3, [r4, #12]
 800116c:	9903      	ldr	r1, [sp, #12]
 800116e:	1a5b      	subs	r3, r3, r1
 8001170:	42ab      	cmp	r3, r5
 8001172:	dcf2      	bgt.n	800115a <_printf_i+0x216>
 8001174:	e7eb      	b.n	800114e <_printf_i+0x20a>
 8001176:	2500      	movs	r5, #0
 8001178:	f104 0619 	add.w	r6, r4, #25
 800117c:	e7f5      	b.n	800116a <_printf_i+0x226>
 800117e:	bf00      	nop
 8001180:	08001350 	.word	0x08001350
 8001184:	08001361 	.word	0x08001361

08001188 <__malloc_lock>:
 8001188:	4801      	ldr	r0, [pc, #4]	; (8001190 <__malloc_lock+0x8>)
 800118a:	f7ff bc73 	b.w	8000a74 <__retarget_lock_acquire_recursive>
 800118e:	bf00      	nop
 8001190:	200001b0 	.word	0x200001b0

08001194 <__malloc_unlock>:
 8001194:	4801      	ldr	r0, [pc, #4]	; (800119c <__malloc_unlock+0x8>)
 8001196:	f7ff bc6e 	b.w	8000a76 <__retarget_lock_release_recursive>
 800119a:	bf00      	nop
 800119c:	200001b0 	.word	0x200001b0

080011a0 <_realloc_r>:
 80011a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a4:	4680      	mov	r8, r0
 80011a6:	4614      	mov	r4, r2
 80011a8:	460e      	mov	r6, r1
 80011aa:	b921      	cbnz	r1, 80011b6 <_realloc_r+0x16>
 80011ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011b0:	4611      	mov	r1, r2
 80011b2:	f7ff bdd9 	b.w	8000d68 <_malloc_r>
 80011b6:	b92a      	cbnz	r2, 80011c4 <_realloc_r+0x24>
 80011b8:	f000 f85a 	bl	8001270 <_free_r>
 80011bc:	4625      	mov	r5, r4
 80011be:	4628      	mov	r0, r5
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c4:	f000 f8a0 	bl	8001308 <_malloc_usable_size_r>
 80011c8:	4284      	cmp	r4, r0
 80011ca:	4607      	mov	r7, r0
 80011cc:	d802      	bhi.n	80011d4 <_realloc_r+0x34>
 80011ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80011d2:	d812      	bhi.n	80011fa <_realloc_r+0x5a>
 80011d4:	4621      	mov	r1, r4
 80011d6:	4640      	mov	r0, r8
 80011d8:	f7ff fdc6 	bl	8000d68 <_malloc_r>
 80011dc:	4605      	mov	r5, r0
 80011de:	2800      	cmp	r0, #0
 80011e0:	d0ed      	beq.n	80011be <_realloc_r+0x1e>
 80011e2:	42bc      	cmp	r4, r7
 80011e4:	4622      	mov	r2, r4
 80011e6:	4631      	mov	r1, r6
 80011e8:	bf28      	it	cs
 80011ea:	463a      	movcs	r2, r7
 80011ec:	f000 f832 	bl	8001254 <memcpy>
 80011f0:	4631      	mov	r1, r6
 80011f2:	4640      	mov	r0, r8
 80011f4:	f000 f83c 	bl	8001270 <_free_r>
 80011f8:	e7e1      	b.n	80011be <_realloc_r+0x1e>
 80011fa:	4635      	mov	r5, r6
 80011fc:	e7df      	b.n	80011be <_realloc_r+0x1e>

080011fe <memmove>:
 80011fe:	4288      	cmp	r0, r1
 8001200:	b510      	push	{r4, lr}
 8001202:	eb01 0402 	add.w	r4, r1, r2
 8001206:	d902      	bls.n	800120e <memmove+0x10>
 8001208:	4284      	cmp	r4, r0
 800120a:	4623      	mov	r3, r4
 800120c:	d807      	bhi.n	800121e <memmove+0x20>
 800120e:	1e43      	subs	r3, r0, #1
 8001210:	42a1      	cmp	r1, r4
 8001212:	d008      	beq.n	8001226 <memmove+0x28>
 8001214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001218:	f803 2f01 	strb.w	r2, [r3, #1]!
 800121c:	e7f8      	b.n	8001210 <memmove+0x12>
 800121e:	4402      	add	r2, r0
 8001220:	4601      	mov	r1, r0
 8001222:	428a      	cmp	r2, r1
 8001224:	d100      	bne.n	8001228 <memmove+0x2a>
 8001226:	bd10      	pop	{r4, pc}
 8001228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800122c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001230:	e7f7      	b.n	8001222 <memmove+0x24>
	...

08001234 <_sbrk_r>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	4d06      	ldr	r5, [pc, #24]	; (8001250 <_sbrk_r+0x1c>)
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	602b      	str	r3, [r5, #0]
 8001240:	f7ff fb2a 	bl	8000898 <_sbrk>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d102      	bne.n	800124e <_sbrk_r+0x1a>
 8001248:	682b      	ldr	r3, [r5, #0]
 800124a:	b103      	cbz	r3, 800124e <_sbrk_r+0x1a>
 800124c:	6023      	str	r3, [r4, #0]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
 8001250:	200001bc 	.word	0x200001bc

08001254 <memcpy>:
 8001254:	440a      	add	r2, r1
 8001256:	4291      	cmp	r1, r2
 8001258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800125c:	d100      	bne.n	8001260 <memcpy+0xc>
 800125e:	4770      	bx	lr
 8001260:	b510      	push	{r4, lr}
 8001262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800126a:	4291      	cmp	r1, r2
 800126c:	d1f9      	bne.n	8001262 <memcpy+0xe>
 800126e:	bd10      	pop	{r4, pc}

08001270 <_free_r>:
 8001270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001272:	2900      	cmp	r1, #0
 8001274:	d044      	beq.n	8001300 <_free_r+0x90>
 8001276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800127a:	9001      	str	r0, [sp, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	f1a1 0404 	sub.w	r4, r1, #4
 8001282:	bfb8      	it	lt
 8001284:	18e4      	addlt	r4, r4, r3
 8001286:	f7ff ff7f 	bl	8001188 <__malloc_lock>
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <_free_r+0x94>)
 800128c:	9801      	ldr	r0, [sp, #4]
 800128e:	6813      	ldr	r3, [r2, #0]
 8001290:	b933      	cbnz	r3, 80012a0 <_free_r+0x30>
 8001292:	6063      	str	r3, [r4, #4]
 8001294:	6014      	str	r4, [r2, #0]
 8001296:	b003      	add	sp, #12
 8001298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800129c:	f7ff bf7a 	b.w	8001194 <__malloc_unlock>
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	d908      	bls.n	80012b6 <_free_r+0x46>
 80012a4:	6825      	ldr	r5, [r4, #0]
 80012a6:	1961      	adds	r1, r4, r5
 80012a8:	428b      	cmp	r3, r1
 80012aa:	bf01      	itttt	eq
 80012ac:	6819      	ldreq	r1, [r3, #0]
 80012ae:	685b      	ldreq	r3, [r3, #4]
 80012b0:	1949      	addeq	r1, r1, r5
 80012b2:	6021      	streq	r1, [r4, #0]
 80012b4:	e7ed      	b.n	8001292 <_free_r+0x22>
 80012b6:	461a      	mov	r2, r3
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	b10b      	cbz	r3, 80012c0 <_free_r+0x50>
 80012bc:	42a3      	cmp	r3, r4
 80012be:	d9fa      	bls.n	80012b6 <_free_r+0x46>
 80012c0:	6811      	ldr	r1, [r2, #0]
 80012c2:	1855      	adds	r5, r2, r1
 80012c4:	42a5      	cmp	r5, r4
 80012c6:	d10b      	bne.n	80012e0 <_free_r+0x70>
 80012c8:	6824      	ldr	r4, [r4, #0]
 80012ca:	4421      	add	r1, r4
 80012cc:	1854      	adds	r4, r2, r1
 80012ce:	42a3      	cmp	r3, r4
 80012d0:	6011      	str	r1, [r2, #0]
 80012d2:	d1e0      	bne.n	8001296 <_free_r+0x26>
 80012d4:	681c      	ldr	r4, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	6053      	str	r3, [r2, #4]
 80012da:	440c      	add	r4, r1
 80012dc:	6014      	str	r4, [r2, #0]
 80012de:	e7da      	b.n	8001296 <_free_r+0x26>
 80012e0:	d902      	bls.n	80012e8 <_free_r+0x78>
 80012e2:	230c      	movs	r3, #12
 80012e4:	6003      	str	r3, [r0, #0]
 80012e6:	e7d6      	b.n	8001296 <_free_r+0x26>
 80012e8:	6825      	ldr	r5, [r4, #0]
 80012ea:	1961      	adds	r1, r4, r5
 80012ec:	428b      	cmp	r3, r1
 80012ee:	bf04      	itt	eq
 80012f0:	6819      	ldreq	r1, [r3, #0]
 80012f2:	685b      	ldreq	r3, [r3, #4]
 80012f4:	6063      	str	r3, [r4, #4]
 80012f6:	bf04      	itt	eq
 80012f8:	1949      	addeq	r1, r1, r5
 80012fa:	6021      	streq	r1, [r4, #0]
 80012fc:	6054      	str	r4, [r2, #4]
 80012fe:	e7ca      	b.n	8001296 <_free_r+0x26>
 8001300:	b003      	add	sp, #12
 8001302:	bd30      	pop	{r4, r5, pc}
 8001304:	200001b4 	.word	0x200001b4

08001308 <_malloc_usable_size_r>:
 8001308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800130c:	1f18      	subs	r0, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	bfbc      	itt	lt
 8001312:	580b      	ldrlt	r3, [r1, r0]
 8001314:	18c0      	addlt	r0, r0, r3
 8001316:	4770      	bx	lr

08001318 <_init>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	bf00      	nop
 800131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131e:	bc08      	pop	{r3}
 8001320:	469e      	mov	lr, r3
 8001322:	4770      	bx	lr

08001324 <_fini>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	bf00      	nop
 8001328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800132a:	bc08      	pop	{r3}
 800132c:	469e      	mov	lr, r3
 800132e:	4770      	bx	lr
