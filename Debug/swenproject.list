
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001904  08001904  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001904  08001904  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001904  08001904  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001904  08001904  00011904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800190c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000054  08001960  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08001960  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000275d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cb1  00000000  00000000  00022824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  000234d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000191  00000000  00000000  00023738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fe5  00000000  00000000  000238c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004fa6  00000000  00000000  000498ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f8b  00000000  00000000  0004e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b84  00000000  00000000  001427e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00143364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001870 	.word	0x08001870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001870 	.word	0x08001870

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <blue_button_check>:


/** 
The blue button is wired in such a way that it is always on except when it is pressed. Thus all the logic is reversed from the black button.
*/
void blue_button_check () {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    GPIO_Init ();
 8000274:	f000 f89a 	bl	80003ac <GPIO_Init>
    while (1) {
      // Print message when the blue button is pressed
      if (!(B1_GPIO_Port->IDR & B1_Pin)) {
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <blue_button_check+0x1c>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f9      	bne.n	8000278 <blue_button_check+0x8>
              printf ("Blue button pressed\n");
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <blue_button_check+0x20>)
 8000286:	f000 fab5 	bl	80007f4 <puts>
      if (!(B1_GPIO_Port->IDR & B1_Pin)) {
 800028a:	e7f5      	b.n	8000278 <blue_button_check+0x8>
 800028c:	48000800 	.word	0x48000800
 8000290:	08001888 	.word	0x08001888

08000294 <SysTick_Handler>:
// Configure the systick
// Initialize Systick
// Handle interruprs
static int count = 0;

void SysTick_Handler(){ //hardware runs it for you. m
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
    count++;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <SysTick_Handler+0x18>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	4a03      	ldr	r2, [pc, #12]	; (80002ac <SysTick_Handler+0x18>)
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	20000070 	.word	0x20000070

080002b0 <activity_11>:

void activity_11(){
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
    init_systick();
 80002b6:	f000 fa7d 	bl	80007b4 <init_systick>
    int seconds = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
    init_systick();
 80002be:	f000 fa79 	bl	80007b4 <init_systick>
    printf("%02d:%02d:%02d\r", seconds / 3600, seconds /60 % 60, seconds % 60);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a34      	ldr	r2, [pc, #208]	; (8000398 <activity_11+0xe8>)
 80002c6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ca:	441a      	add	r2, r3
 80002cc:	12d2      	asrs	r2, r2, #11
 80002ce:	17db      	asrs	r3, r3, #31
 80002d0:	1ad4      	subs	r4, r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a31      	ldr	r2, [pc, #196]	; (800039c <activity_11+0xec>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	441a      	add	r2, r3
 80002dc:	1152      	asrs	r2, r2, #5
 80002de:	17db      	asrs	r3, r3, #31
 80002e0:	1ad2      	subs	r2, r2, r3
 80002e2:	4b2e      	ldr	r3, [pc, #184]	; (800039c <activity_11+0xec>)
 80002e4:	fb83 1302 	smull	r1, r3, r3, r2
 80002e8:	4413      	add	r3, r2
 80002ea:	1159      	asrs	r1, r3, #5
 80002ec:	17d3      	asrs	r3, r2, #31
 80002ee:	1ac9      	subs	r1, r1, r3
 80002f0:	460b      	mov	r3, r1
 80002f2:	011b      	lsls	r3, r3, #4
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	1ad1      	subs	r1, r2, r3
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <activity_11+0xec>)
 80002fe:	fb83 0302 	smull	r0, r3, r3, r2
 8000302:	4413      	add	r3, r2
 8000304:	1158      	asrs	r0, r3, #5
 8000306:	17d3      	asrs	r3, r2, #31
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4603      	mov	r3, r0
 800030c:	011b      	lsls	r3, r3, #4
 800030e:	1a1b      	subs	r3, r3, r0
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	1ad0      	subs	r0, r2, r3
 8000314:	4603      	mov	r3, r0
 8000316:	460a      	mov	r2, r1
 8000318:	4621      	mov	r1, r4
 800031a:	4821      	ldr	r0, [pc, #132]	; (80003a0 <activity_11+0xf0>)
 800031c:	f000 fa86 	bl	800082c <printf>
    while (1){
        if (count == 1000){ //if count == 10 to make it run 10 times faster
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <activity_11+0xf4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000328:	d1fa      	bne.n	8000320 <activity_11+0x70>
            seconds += 1;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3301      	adds	r3, #1
 800032e:	607b      	str	r3, [r7, #4]
            count = 0;
 8000330:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <activity_11+0xf4>)
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
            printf("%02d:%02d$%02d\r", seconds / 3600, seconds /60 % 60, seconds % 60);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a17      	ldr	r2, [pc, #92]	; (8000398 <activity_11+0xe8>)
 800033a:	fb82 1203 	smull	r1, r2, r2, r3
 800033e:	441a      	add	r2, r3
 8000340:	12d2      	asrs	r2, r2, #11
 8000342:	17db      	asrs	r3, r3, #31
 8000344:	1ad4      	subs	r4, r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a14      	ldr	r2, [pc, #80]	; (800039c <activity_11+0xec>)
 800034a:	fb82 1203 	smull	r1, r2, r2, r3
 800034e:	441a      	add	r2, r3
 8000350:	1152      	asrs	r2, r2, #5
 8000352:	17db      	asrs	r3, r3, #31
 8000354:	1ad2      	subs	r2, r2, r3
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <activity_11+0xec>)
 8000358:	fb83 1302 	smull	r1, r3, r3, r2
 800035c:	4413      	add	r3, r2
 800035e:	1159      	asrs	r1, r3, #5
 8000360:	17d3      	asrs	r3, r2, #31
 8000362:	1ac9      	subs	r1, r1, r3
 8000364:	460b      	mov	r3, r1
 8000366:	011b      	lsls	r3, r3, #4
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	1ad1      	subs	r1, r2, r3
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <activity_11+0xec>)
 8000372:	fb83 0302 	smull	r0, r3, r3, r2
 8000376:	4413      	add	r3, r2
 8000378:	1158      	asrs	r0, r3, #5
 800037a:	17d3      	asrs	r3, r2, #31
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4603      	mov	r3, r0
 8000380:	011b      	lsls	r3, r3, #4
 8000382:	1a1b      	subs	r3, r3, r0
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	1ad0      	subs	r0, r2, r3
 8000388:	4603      	mov	r3, r0
 800038a:	460a      	mov	r2, r1
 800038c:	4621      	mov	r1, r4
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <activity_11+0xf8>)
 8000390:	f000 fa4c 	bl	800082c <printf>
        if (count == 1000){ //if count == 10 to make it run 10 times faster
 8000394:	e7c4      	b.n	8000320 <activity_11+0x70>
 8000396:	bf00      	nop
 8000398:	91a2b3c5 	.word	0x91a2b3c5
 800039c:	88888889 	.word	0x88888889
 80003a0:	0800189c 	.word	0x0800189c
 80003a4:	20000070 	.word	0x20000070
 80003a8:	080018ac 	.word	0x080018ac

080003ac <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b28      	ldr	r3, [pc, #160]	; (8000464 <GPIO_Init+0xb8>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a27      	ldr	r2, [pc, #156]	; (8000464 <GPIO_Init+0xb8>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4b25      	ldr	r3, [pc, #148]	; (8000464 <GPIO_Init+0xb8>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	613b      	str	r3, [r7, #16]
 80003d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <GPIO_Init+0xb8>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a21      	ldr	r2, [pc, #132]	; (8000464 <GPIO_Init+0xb8>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <GPIO_Init+0xb8>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <GPIO_Init+0xb8>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <GPIO_Init+0xb8>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <GPIO_Init+0xb8>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <GPIO_Init+0xb8>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <GPIO_Init+0xb8>)
 8000410:	f043 0302 	orr.w	r3, r3, #2
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b13      	ldr	r3, [pc, #76]	; (8000464 <GPIO_Init+0xb8>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0302 	and.w	r3, r3, #2
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000426:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000428:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800042c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <GPIO_Init+0xbc>)
 800043a:	f000 fbb3 	bl	8000ba4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 800043e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000442:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000444:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000448:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	4619      	mov	r1, r3
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fba4 	bl	8000ba4 <HAL_GPIO_Init>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
}
 800045c:	bf00      	nop
 800045e:	3728      	adds	r7, #40	; 0x28
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	48000800 	.word	0x48000800

0800046c <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <LED_Init+0xb8>)
 8000476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000478:	4a2a      	ldr	r2, [pc, #168]	; (8000524 <LED_Init+0xb8>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));  
 8000480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2103      	movs	r1, #3
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	43db      	mvns	r3, r3
 8000492:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000496:	4013      	ands	r3, r2
 8000498:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 800049a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	2101      	movs	r1, #1
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004ae:	4313      	orrs	r3, r2
 80004b0:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 80004b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004b6:	689a      	ldr	r2, [r3, #8]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	2103      	movs	r1, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004c8:	4013      	ands	r3, r2
 80004ca:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 80004cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004e0:	4313      	orrs	r3, r2
 80004e2:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 80004e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	2101      	movs	r1, #1
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004f8:	4013      	ands	r3, r2
 80004fa:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000500:	68da      	ldr	r2, [r3, #12]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2103      	movs	r1, #3
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000512:	4013      	ands	r3, r2
 8000514:	60cb      	str	r3, [r1, #12]
	
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <UART2_Init+0x40>)
 800052e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <UART2_Init+0x40>)
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <UART2_Init+0x40>)
 800053a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <UART2_Init+0x40>)
 8000540:	f023 030c 	bic.w	r3, r3, #12
 8000544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <UART2_Init+0x40>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <UART2_Init+0x40>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000558:	f000 f80a 	bl	8000570 <UART2_GPIO_Init>
	USART_Init(USART2);
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <UART2_Init+0x44>)
 800055e:	f000 f84f 	bl	8000600 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40004400 	.word	0x40004400

08000570 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <UART2_GPIO_Init+0x8c>)
 8000576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <UART2_GPIO_Init+0x8c>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800058e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800059a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800059e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005a4:	6a1b      	ldr	r3, [r3, #32]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80005b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005b4:	6a1b      	ldr	r3, [r3, #32]
 80005b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ba:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005be:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80005c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ca:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80005ce:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80005d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005de:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80005e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ea:	f023 030c 	bic.w	r3, r3, #12
 80005ee:	6053      	str	r3, [r2, #4]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 0201 	bic.w	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f242 028d 	movw	r2, #8333	; 0x208d
 800063e:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f043 020c 	orr.w	r2, r3, #12
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <USART_Init+0x100>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d129      	bne.n	80006a8 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f043 0220 	orr.w	r2, r3, #32
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f023 0210 	bic.w	r2, r3, #16
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 0201 	bic.w	r2, r3, #1
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <USART_Init+0x104>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d10b      	bne.n	80006c8 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6a1b      	ldr	r3, [r3, #32]
 80006b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <USART_Init+0x108>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <USART_Init+0x108>)
 80006c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006c6:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f043 0201 	orr.w	r2, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80006d4:	bf00      	nop
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f9      	beq.n	80006d6 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80006e2:	bf00      	nop
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	69db      	ldr	r3, [r3, #28]
 80006e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f9      	beq.n	80006e4 <USART_Init+0xe4>
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40004c00 	.word	0x40004c00
 8000704:	40004400 	.word	0x40004400
 8000708:	40013800 	.word	0x40013800

0800070c <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e014      	b.n	8000748 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800071e:	bf00      	nop
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0f9      	beq.n	8000720 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b29a      	uxth	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800073a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800073e:	f000 f819 	bl	8000774 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8e6      	bhi.n	800071e <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000750:	bf00      	nop
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f9      	beq.n	8000752 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	61da      	str	r2, [r3, #28]
}   
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	fb03 f202 	mul.w	r2, r3, r2
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <USART_Delay+0x3c>)
 8000786:	fba3 1302 	umull	r1, r3, r3, r2
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	0852      	lsrs	r2, r2, #1
 800078e:	4413      	add	r3, r2
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000794:	bf00      	nop
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3b01      	subs	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f9      	bne.n	8000796 <USART_Delay+0x22>
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	24924925 	.word	0x24924925

080007b4 <init_systick>:
 * @brief Initialization function for systick
 * 
 * @return struct systick* 
 */
void init_systick()
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

    //clear csr register

    // SysTick->CSR &= ~(1 << 0);

    systick->CSR = 0;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <init_systick+0x38>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]

    //set timer to 10 ms
    systick->RVR = 7999999;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <init_systick+0x38>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <init_systick+0x3c>)
 80007c6:	605a      	str	r2, [r3, #4]

    //set to internal clock
    systick->CSR = (1 << 2);
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <init_systick+0x38>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2204      	movs	r2, #4
 80007ce:	601a      	str	r2, [r3, #0]
    //start timer
    systick->CSR |= 1;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <init_systick+0x38>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <init_systick+0x38>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	601a      	str	r2, [r3, #0]

}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000
 80007f0:	007a11ff 	.word	0x007a11ff

080007f4 <puts>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[80];

int puts (const char* str) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    int ret = sprintf (buffer, "%s\r\n", str);
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <puts+0x2c>)
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <puts+0x30>)
 8000802:	f000 fb79 	bl	8000ef8 <siprintf>
 8000806:	60f8      	str	r0, [r7, #12]
    USART_Write (USART2, (unsigned char*) buffer, ret);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	461a      	mov	r2, r3
 800080c:	4905      	ldr	r1, [pc, #20]	; (8000824 <puts+0x30>)
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <puts+0x34>)
 8000810:	f7ff ff7c 	bl	800070c <USART_Write>
    return ret;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	080018bc 	.word	0x080018bc
 8000824:	20000074 	.word	0x20000074
 8000828:	40004400 	.word	0x40004400

0800082c <printf>:
int putchar (int c) {
    USART_Write (USART2, (unsigned char*) &c, 1);
    return c;
}

int printf (const char *format, ...) {
 800082c:	b40f      	push	{r0, r1, r2, r3}
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
   va_list aptr;
   int ret;

   va_start(aptr, format);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	603b      	str	r3, [r7, #0]
   ret = vsprintf(buffer, format, aptr);
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	6939      	ldr	r1, [r7, #16]
 800083e:	4815      	ldr	r0, [pc, #84]	; (8000894 <printf+0x68>)
 8000840:	f000 fb90 	bl	8000f64 <vsiprintf>
 8000844:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   if (buffer [ret - 1] == '\n') {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <printf+0x68>)
 800084c:	5cd3      	ldrb	r3, [r2, r3]
 800084e:	2b0a      	cmp	r3, #10
 8000850:	d111      	bne.n	8000876 <printf+0x4a>
       buffer [ret - 1] = '\r';
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <printf+0x68>)
 8000858:	210d      	movs	r1, #13
 800085a:	54d1      	strb	r1, [r2, r3]
       buffer [ret] = '\n';
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <printf+0x68>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	220a      	movs	r2, #10
 8000864:	701a      	strb	r2, [r3, #0]
       buffer [ret + 1] = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <printf+0x68>)
 800086c:	2100      	movs	r1, #0
 800086e:	54d1      	strb	r1, [r2, r3]
       ret++;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3301      	adds	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
   }

   USART_Write (USART2, (unsigned char*) buffer, ret);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	461a      	mov	r2, r3
 800087a:	4906      	ldr	r1, [pc, #24]	; (8000894 <printf+0x68>)
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <printf+0x6c>)
 800087e:	f7ff ff45 	bl	800070c <USART_Write>

   return(ret);
 8000882:	687b      	ldr	r3, [r7, #4]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800088e:	b004      	add	sp, #16
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000074 	.word	0x20000074
 8000898:	40004400 	.word	0x40004400

0800089c <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80008a2:	4b6b      	ldr	r3, [pc, #428]	; (8000a50 <System_Clock_Init+0x1b4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a6a      	ldr	r2, [pc, #424]	; (8000a50 <System_Clock_Init+0x1b4>)
 80008a8:	f023 0307 	bic.w	r3, r3, #7
 80008ac:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80008ae:	4b68      	ldr	r3, [pc, #416]	; (8000a50 <System_Clock_Init+0x1b4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a67      	ldr	r2, [pc, #412]	; (8000a50 <System_Clock_Init+0x1b4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80008ba:	4b66      	ldr	r3, [pc, #408]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a65      	ldr	r2, [pc, #404]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80008c6:	bf00      	nop
 80008c8:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80008d4:	2310      	movs	r3, #16
 80008d6:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80008d8:	4b5e      	ldr	r3, [pc, #376]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a5d      	ldr	r2, [pc, #372]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008de:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80008e2:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80008e4:	4b5b      	ldr	r3, [pc, #364]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	061b      	lsls	r3, r3, #24
 80008ec:	4959      	ldr	r1, [pc, #356]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008ee:	4313      	orrs	r3, r2
 80008f0:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80008f2:	4b58      	ldr	r3, [pc, #352]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a57      	ldr	r2, [pc, #348]	; (8000a54 <System_Clock_Init+0x1b8>)
 80008f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008fc:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 80008fe:	bf00      	nop
 8000900:	4b54      	ldr	r3, [pc, #336]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800090c:	d0f8      	beq.n	8000900 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800090e:	4b51      	ldr	r3, [pc, #324]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	4a50      	ldr	r2, [pc, #320]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000914:	f023 0303 	bic.w	r3, r3, #3
 8000918:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800091a:	4b4e      	ldr	r3, [pc, #312]	; (8000a54 <System_Clock_Init+0x1b8>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	4a4d      	ldr	r2, [pc, #308]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800092e:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000930:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000934:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800093e:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000946:	4b43      	ldr	r3, [pc, #268]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <System_Clock_Init+0x1b8>)
 800094c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000950:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000952:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800095c:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000964:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000968:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800096a:	bf00      	nop
 800096c:	4b39      	ldr	r3, [pc, #228]	; (8000a54 <System_Clock_Init+0x1b8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000978:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <System_Clock_Init+0x1b8>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4a35      	ldr	r2, [pc, #212]	; (8000a54 <System_Clock_Init+0x1b8>)
 800097e:	f023 0303 	bic.w	r3, r3, #3
 8000982:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <System_Clock_Init+0x1b8>)
 800098a:	f043 0303 	orr.w	r3, r3, #3
 800098e:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000990:	bf00      	nop
 8000992:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 030c 	and.w	r3, r3, #12
 800099a:	2b0c      	cmp	r3, #12
 800099c:	d1f9      	bne.n	8000992 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009a8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	4a26      	ldr	r2, [pc, #152]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80009c0:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80009c2:	4b24      	ldr	r3, [pc, #144]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80009cc:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80009ce:	bf00      	nop
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80009dc:	d0f8      	beq.n	80009d0 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80009e8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009f0:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80009f4:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <System_Clock_Init+0x1b8>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a0c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a18:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000a1a:	bf00      	nop
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a30:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <System_Clock_Init+0x1b8>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40022000 	.word	0x40022000
 8000a54:	40021000 	.word	0x40021000

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f000 fa76 	bl	8000f78 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20018000 	.word	0x20018000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	200000c4 	.word	0x200000c4
 8000ac0:	20000210 	.word	0x20000210

08000ac4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <SystemInit+0x64>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SystemInit+0x64>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <SystemInit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SystemInit+0x68>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <SystemInit+0x68>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <SystemInit+0x68>)
 8000af0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000af8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <SystemInit+0x68>)
 8000afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b00:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemInit+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <SystemInit+0x68>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <SystemInit+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	40021000 	.word	0x40021000

08000b30 <main>:
#include <stdio.h>
#include "Activity_11.h"



int main(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000b34:	f7ff feb2 	bl	800089c <System_Clock_Init>
	LED_Init(LED_PIN);
 8000b38:	2007      	movs	r0, #7
 8000b3a:	f7ff fc97 	bl	800046c <LED_Init>
	UART2_Init();
 8000b3e:	f7ff fcf3 	bl	8000528 <UART2_Init>
	blue_button_check();
 8000b42:	f7ff fb95 	bl	8000270 <blue_button_check>
	// run_project();
	activity_11();
 8000b46:	f7ff fbb3 	bl	80002b0 <activity_11>
 8000b4a:	2300      	movs	r3, #0
	// LED_Toggle(LED_PIN);
	// LED_Off(LED_PIN);
	// run_demo();
	// read_bytes();
	// readlines();
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ffb6 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	; (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f000 fa01 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff ffd5 	bl	8000b30 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b94:	0800190c 	.word	0x0800190c
  ldr r2, =_sbss
 8000b98:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000b9c:	20000210 	.word	0x20000210

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb2:	e17f      	b.n	8000eb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8171 	beq.w	8000eae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d005      	beq.n	8000be4 <HAL_GPIO_Init+0x40>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d118      	bne.n	8000c84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	f003 0201 	and.w	r2, r3, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d017      	beq.n	8000cc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d123      	bne.n	8000d14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	08da      	lsrs	r2, r3, #3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	08da      	lsrs	r2, r3, #3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3208      	adds	r2, #8
 8000d0e:	6939      	ldr	r1, [r7, #16]
 8000d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0203 	and.w	r2, r3, #3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80ac 	beq.w	8000eae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a5e      	ldr	r2, [pc, #376]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <HAL_GPIO_Init+0x330>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d6e:	4a5a      	ldr	r2, [pc, #360]	; (8000ed8 <HAL_GPIO_Init+0x334>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x242>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x338>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x23e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4e      	ldr	r2, [pc, #312]	; (8000ee0 <HAL_GPIO_Init+0x33c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x23a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <HAL_GPIO_Init+0x340>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x236>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x344>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x232>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4b      	ldr	r2, [pc, #300]	; (8000eec <HAL_GPIO_Init+0x348>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x22e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_GPIO_Init+0x34c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x22a>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x244>
 8000de6:	2300      	movs	r3, #0
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df8:	4937      	ldr	r1, [pc, #220]	; (8000ed8 <HAL_GPIO_Init+0x334>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e2a:	4a32      	ldr	r2, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e54:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_GPIO_Init+0x350>)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f47f ae78 	bne.w	8000bb4 <HAL_GPIO_Init+0x10>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	48001000 	.word	0x48001000
 8000eec:	48001400 	.word	0x48001400
 8000ef0:	48001800 	.word	0x48001800
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <siprintf>:
 8000ef8:	b40e      	push	{r1, r2, r3}
 8000efa:	b500      	push	{lr}
 8000efc:	b09c      	sub	sp, #112	; 0x70
 8000efe:	ab1d      	add	r3, sp, #116	; 0x74
 8000f00:	9002      	str	r0, [sp, #8]
 8000f02:	9006      	str	r0, [sp, #24]
 8000f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <siprintf+0x38>)
 8000f0a:	9107      	str	r1, [sp, #28]
 8000f0c:	9104      	str	r1, [sp, #16]
 8000f0e:	4909      	ldr	r1, [pc, #36]	; (8000f34 <siprintf+0x3c>)
 8000f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f14:	9105      	str	r1, [sp, #20]
 8000f16:	6800      	ldr	r0, [r0, #0]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	a902      	add	r1, sp, #8
 8000f1c:	f000 f8b2 	bl	8001084 <_svfiprintf_r>
 8000f20:	9b02      	ldr	r3, [sp, #8]
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	b01c      	add	sp, #112	; 0x70
 8000f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f2c:	b003      	add	sp, #12
 8000f2e:	4770      	bx	lr
 8000f30:	20000050 	.word	0x20000050
 8000f34:	ffff0208 	.word	0xffff0208

08000f38 <_vsiprintf_r>:
 8000f38:	b500      	push	{lr}
 8000f3a:	b09b      	sub	sp, #108	; 0x6c
 8000f3c:	9100      	str	r1, [sp, #0]
 8000f3e:	9104      	str	r1, [sp, #16]
 8000f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000f44:	9105      	str	r1, [sp, #20]
 8000f46:	9102      	str	r1, [sp, #8]
 8000f48:	4905      	ldr	r1, [pc, #20]	; (8000f60 <_vsiprintf_r+0x28>)
 8000f4a:	9103      	str	r1, [sp, #12]
 8000f4c:	4669      	mov	r1, sp
 8000f4e:	f000 f899 	bl	8001084 <_svfiprintf_r>
 8000f52:	9b00      	ldr	r3, [sp, #0]
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	b01b      	add	sp, #108	; 0x6c
 8000f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f5e:	bf00      	nop
 8000f60:	ffff0208 	.word	0xffff0208

08000f64 <vsiprintf>:
 8000f64:	4613      	mov	r3, r2
 8000f66:	460a      	mov	r2, r1
 8000f68:	4601      	mov	r1, r0
 8000f6a:	4802      	ldr	r0, [pc, #8]	; (8000f74 <vsiprintf+0x10>)
 8000f6c:	6800      	ldr	r0, [r0, #0]
 8000f6e:	f7ff bfe3 	b.w	8000f38 <_vsiprintf_r>
 8000f72:	bf00      	nop
 8000f74:	20000050 	.word	0x20000050

08000f78 <__errno>:
 8000f78:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <__errno+0x8>)
 8000f7a:	6818      	ldr	r0, [r3, #0]
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000050 	.word	0x20000050

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4d0d      	ldr	r5, [pc, #52]	; (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1b64      	subs	r4, r4, r5
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2600      	movs	r6, #0
 8000f90:	42a6      	cmp	r6, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4d0b      	ldr	r5, [pc, #44]	; (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	; (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 fc6a 	bl	8001870 <_init>
 8000f9c:	1b64      	subs	r4, r4, r5
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	42a6      	cmp	r6, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fac:	4798      	blx	r3
 8000fae:	3601      	adds	r6, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb6:	4798      	blx	r3
 8000fb8:	3601      	adds	r6, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	08001904 	.word	0x08001904
 8000fc0:	08001904 	.word	0x08001904
 8000fc4:	08001904 	.word	0x08001904
 8000fc8:	08001908 	.word	0x08001908

08000fcc <__retarget_lock_acquire_recursive>:
 8000fcc:	4770      	bx	lr

08000fce <__retarget_lock_release_recursive>:
 8000fce:	4770      	bx	lr

08000fd0 <__ssputs_r>:
 8000fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd4:	688e      	ldr	r6, [r1, #8]
 8000fd6:	461f      	mov	r7, r3
 8000fd8:	42be      	cmp	r6, r7
 8000fda:	680b      	ldr	r3, [r1, #0]
 8000fdc:	4682      	mov	sl, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	d82c      	bhi.n	800103e <__ssputs_r+0x6e>
 8000fe4:	898a      	ldrh	r2, [r1, #12]
 8000fe6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000fea:	d026      	beq.n	800103a <__ssputs_r+0x6a>
 8000fec:	6965      	ldr	r5, [r4, #20]
 8000fee:	6909      	ldr	r1, [r1, #16]
 8000ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ff4:	eba3 0901 	sub.w	r9, r3, r1
 8000ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ffc:	1c7b      	adds	r3, r7, #1
 8000ffe:	444b      	add	r3, r9
 8001000:	106d      	asrs	r5, r5, #1
 8001002:	429d      	cmp	r5, r3
 8001004:	bf38      	it	cc
 8001006:	461d      	movcc	r5, r3
 8001008:	0553      	lsls	r3, r2, #21
 800100a:	d527      	bpl.n	800105c <__ssputs_r+0x8c>
 800100c:	4629      	mov	r1, r5
 800100e:	f000 f957 	bl	80012c0 <_malloc_r>
 8001012:	4606      	mov	r6, r0
 8001014:	b360      	cbz	r0, 8001070 <__ssputs_r+0xa0>
 8001016:	6921      	ldr	r1, [r4, #16]
 8001018:	464a      	mov	r2, r9
 800101a:	f000 fbc7 	bl	80017ac <memcpy>
 800101e:	89a3      	ldrh	r3, [r4, #12]
 8001020:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	6126      	str	r6, [r4, #16]
 800102c:	6165      	str	r5, [r4, #20]
 800102e:	444e      	add	r6, r9
 8001030:	eba5 0509 	sub.w	r5, r5, r9
 8001034:	6026      	str	r6, [r4, #0]
 8001036:	60a5      	str	r5, [r4, #8]
 8001038:	463e      	mov	r6, r7
 800103a:	42be      	cmp	r6, r7
 800103c:	d900      	bls.n	8001040 <__ssputs_r+0x70>
 800103e:	463e      	mov	r6, r7
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	4632      	mov	r2, r6
 8001044:	4641      	mov	r1, r8
 8001046:	f000 fb86 	bl	8001756 <memmove>
 800104a:	68a3      	ldr	r3, [r4, #8]
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	60a3      	str	r3, [r4, #8]
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	4433      	add	r3, r6
 8001054:	6023      	str	r3, [r4, #0]
 8001056:	2000      	movs	r0, #0
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105c:	462a      	mov	r2, r5
 800105e:	f000 fb4b 	bl	80016f8 <_realloc_r>
 8001062:	4606      	mov	r6, r0
 8001064:	2800      	cmp	r0, #0
 8001066:	d1e0      	bne.n	800102a <__ssputs_r+0x5a>
 8001068:	6921      	ldr	r1, [r4, #16]
 800106a:	4650      	mov	r0, sl
 800106c:	f000 fbac 	bl	80017c8 <_free_r>
 8001070:	230c      	movs	r3, #12
 8001072:	f8ca 3000 	str.w	r3, [sl]
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001082:	e7e9      	b.n	8001058 <__ssputs_r+0x88>

08001084 <_svfiprintf_r>:
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001088:	4698      	mov	r8, r3
 800108a:	898b      	ldrh	r3, [r1, #12]
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	b09d      	sub	sp, #116	; 0x74
 8001090:	4607      	mov	r7, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4614      	mov	r4, r2
 8001096:	d50e      	bpl.n	80010b6 <_svfiprintf_r+0x32>
 8001098:	690b      	ldr	r3, [r1, #16]
 800109a:	b963      	cbnz	r3, 80010b6 <_svfiprintf_r+0x32>
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	f000 f90f 	bl	80012c0 <_malloc_r>
 80010a2:	6028      	str	r0, [r5, #0]
 80010a4:	6128      	str	r0, [r5, #16]
 80010a6:	b920      	cbnz	r0, 80010b2 <_svfiprintf_r+0x2e>
 80010a8:	230c      	movs	r3, #12
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b0:	e0d0      	b.n	8001254 <_svfiprintf_r+0x1d0>
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	616b      	str	r3, [r5, #20]
 80010b6:	2300      	movs	r3, #0
 80010b8:	9309      	str	r3, [sp, #36]	; 0x24
 80010ba:	2320      	movs	r3, #32
 80010bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80010c4:	2330      	movs	r3, #48	; 0x30
 80010c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800126c <_svfiprintf_r+0x1e8>
 80010ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010ce:	f04f 0901 	mov.w	r9, #1
 80010d2:	4623      	mov	r3, r4
 80010d4:	469a      	mov	sl, r3
 80010d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010da:	b10a      	cbz	r2, 80010e0 <_svfiprintf_r+0x5c>
 80010dc:	2a25      	cmp	r2, #37	; 0x25
 80010de:	d1f9      	bne.n	80010d4 <_svfiprintf_r+0x50>
 80010e0:	ebba 0b04 	subs.w	fp, sl, r4
 80010e4:	d00b      	beq.n	80010fe <_svfiprintf_r+0x7a>
 80010e6:	465b      	mov	r3, fp
 80010e8:	4622      	mov	r2, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	4638      	mov	r0, r7
 80010ee:	f7ff ff6f 	bl	8000fd0 <__ssputs_r>
 80010f2:	3001      	adds	r0, #1
 80010f4:	f000 80a9 	beq.w	800124a <_svfiprintf_r+0x1c6>
 80010f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010fa:	445a      	add	r2, fp
 80010fc:	9209      	str	r2, [sp, #36]	; 0x24
 80010fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a1 	beq.w	800124a <_svfiprintf_r+0x1c6>
 8001108:	2300      	movs	r3, #0
 800110a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800110e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001112:	f10a 0a01 	add.w	sl, sl, #1
 8001116:	9304      	str	r3, [sp, #16]
 8001118:	9307      	str	r3, [sp, #28]
 800111a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800111e:	931a      	str	r3, [sp, #104]	; 0x68
 8001120:	4654      	mov	r4, sl
 8001122:	2205      	movs	r2, #5
 8001124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001128:	4850      	ldr	r0, [pc, #320]	; (800126c <_svfiprintf_r+0x1e8>)
 800112a:	f7ff f851 	bl	80001d0 <memchr>
 800112e:	9a04      	ldr	r2, [sp, #16]
 8001130:	b9d8      	cbnz	r0, 800116a <_svfiprintf_r+0xe6>
 8001132:	06d0      	lsls	r0, r2, #27
 8001134:	bf44      	itt	mi
 8001136:	2320      	movmi	r3, #32
 8001138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800113c:	0711      	lsls	r1, r2, #28
 800113e:	bf44      	itt	mi
 8001140:	232b      	movmi	r3, #43	; 0x2b
 8001142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001146:	f89a 3000 	ldrb.w	r3, [sl]
 800114a:	2b2a      	cmp	r3, #42	; 0x2a
 800114c:	d015      	beq.n	800117a <_svfiprintf_r+0xf6>
 800114e:	9a07      	ldr	r2, [sp, #28]
 8001150:	4654      	mov	r4, sl
 8001152:	2000      	movs	r0, #0
 8001154:	f04f 0c0a 	mov.w	ip, #10
 8001158:	4621      	mov	r1, r4
 800115a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800115e:	3b30      	subs	r3, #48	; 0x30
 8001160:	2b09      	cmp	r3, #9
 8001162:	d94d      	bls.n	8001200 <_svfiprintf_r+0x17c>
 8001164:	b1b0      	cbz	r0, 8001194 <_svfiprintf_r+0x110>
 8001166:	9207      	str	r2, [sp, #28]
 8001168:	e014      	b.n	8001194 <_svfiprintf_r+0x110>
 800116a:	eba0 0308 	sub.w	r3, r0, r8
 800116e:	fa09 f303 	lsl.w	r3, r9, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	46a2      	mov	sl, r4
 8001178:	e7d2      	b.n	8001120 <_svfiprintf_r+0x9c>
 800117a:	9b03      	ldr	r3, [sp, #12]
 800117c:	1d19      	adds	r1, r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	9103      	str	r1, [sp, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfbb      	ittet	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	f042 0202 	orrlt.w	r2, r2, #2
 800118c:	9307      	strge	r3, [sp, #28]
 800118e:	9307      	strlt	r3, [sp, #28]
 8001190:	bfb8      	it	lt
 8001192:	9204      	strlt	r2, [sp, #16]
 8001194:	7823      	ldrb	r3, [r4, #0]
 8001196:	2b2e      	cmp	r3, #46	; 0x2e
 8001198:	d10c      	bne.n	80011b4 <_svfiprintf_r+0x130>
 800119a:	7863      	ldrb	r3, [r4, #1]
 800119c:	2b2a      	cmp	r3, #42	; 0x2a
 800119e:	d134      	bne.n	800120a <_svfiprintf_r+0x186>
 80011a0:	9b03      	ldr	r3, [sp, #12]
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	9203      	str	r2, [sp, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bfb8      	it	lt
 80011ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80011b0:	3402      	adds	r4, #2
 80011b2:	9305      	str	r3, [sp, #20]
 80011b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800127c <_svfiprintf_r+0x1f8>
 80011b8:	7821      	ldrb	r1, [r4, #0]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4650      	mov	r0, sl
 80011be:	f7ff f807 	bl	80001d0 <memchr>
 80011c2:	b138      	cbz	r0, 80011d4 <_svfiprintf_r+0x150>
 80011c4:	9b04      	ldr	r3, [sp, #16]
 80011c6:	eba0 000a 	sub.w	r0, r0, sl
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	4082      	lsls	r2, r0
 80011ce:	4313      	orrs	r3, r2
 80011d0:	3401      	adds	r4, #1
 80011d2:	9304      	str	r3, [sp, #16]
 80011d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011d8:	4825      	ldr	r0, [pc, #148]	; (8001270 <_svfiprintf_r+0x1ec>)
 80011da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011de:	2206      	movs	r2, #6
 80011e0:	f7fe fff6 	bl	80001d0 <memchr>
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d038      	beq.n	800125a <_svfiprintf_r+0x1d6>
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <_svfiprintf_r+0x1f0>)
 80011ea:	bb1b      	cbnz	r3, 8001234 <_svfiprintf_r+0x1b0>
 80011ec:	9b03      	ldr	r3, [sp, #12]
 80011ee:	3307      	adds	r3, #7
 80011f0:	f023 0307 	bic.w	r3, r3, #7
 80011f4:	3308      	adds	r3, #8
 80011f6:	9303      	str	r3, [sp, #12]
 80011f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011fa:	4433      	add	r3, r6
 80011fc:	9309      	str	r3, [sp, #36]	; 0x24
 80011fe:	e768      	b.n	80010d2 <_svfiprintf_r+0x4e>
 8001200:	fb0c 3202 	mla	r2, ip, r2, r3
 8001204:	460c      	mov	r4, r1
 8001206:	2001      	movs	r0, #1
 8001208:	e7a6      	b.n	8001158 <_svfiprintf_r+0xd4>
 800120a:	2300      	movs	r3, #0
 800120c:	3401      	adds	r4, #1
 800120e:	9305      	str	r3, [sp, #20]
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0c0a 	mov.w	ip, #10
 8001216:	4620      	mov	r0, r4
 8001218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800121c:	3a30      	subs	r2, #48	; 0x30
 800121e:	2a09      	cmp	r2, #9
 8001220:	d903      	bls.n	800122a <_svfiprintf_r+0x1a6>
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0c6      	beq.n	80011b4 <_svfiprintf_r+0x130>
 8001226:	9105      	str	r1, [sp, #20]
 8001228:	e7c4      	b.n	80011b4 <_svfiprintf_r+0x130>
 800122a:	fb0c 2101 	mla	r1, ip, r1, r2
 800122e:	4604      	mov	r4, r0
 8001230:	2301      	movs	r3, #1
 8001232:	e7f0      	b.n	8001216 <_svfiprintf_r+0x192>
 8001234:	ab03      	add	r3, sp, #12
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	462a      	mov	r2, r5
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <_svfiprintf_r+0x1f4>)
 800123c:	a904      	add	r1, sp, #16
 800123e:	4638      	mov	r0, r7
 8001240:	f3af 8000 	nop.w
 8001244:	1c42      	adds	r2, r0, #1
 8001246:	4606      	mov	r6, r0
 8001248:	d1d6      	bne.n	80011f8 <_svfiprintf_r+0x174>
 800124a:	89ab      	ldrh	r3, [r5, #12]
 800124c:	065b      	lsls	r3, r3, #25
 800124e:	f53f af2d 	bmi.w	80010ac <_svfiprintf_r+0x28>
 8001252:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001254:	b01d      	add	sp, #116	; 0x74
 8001256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125a:	ab03      	add	r3, sp, #12
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	462a      	mov	r2, r5
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_svfiprintf_r+0x1f4>)
 8001262:	a904      	add	r1, sp, #16
 8001264:	4638      	mov	r0, r7
 8001266:	f000 f919 	bl	800149c <_printf_i>
 800126a:	e7eb      	b.n	8001244 <_svfiprintf_r+0x1c0>
 800126c:	080018cf 	.word	0x080018cf
 8001270:	080018d9 	.word	0x080018d9
 8001274:	00000000 	.word	0x00000000
 8001278:	08000fd1 	.word	0x08000fd1
 800127c:	080018d5 	.word	0x080018d5

08001280 <sbrk_aligned>:
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4e0e      	ldr	r6, [pc, #56]	; (80012bc <sbrk_aligned+0x3c>)
 8001284:	460c      	mov	r4, r1
 8001286:	6831      	ldr	r1, [r6, #0]
 8001288:	4605      	mov	r5, r0
 800128a:	b911      	cbnz	r1, 8001292 <sbrk_aligned+0x12>
 800128c:	f000 fa7e 	bl	800178c <_sbrk_r>
 8001290:	6030      	str	r0, [r6, #0]
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 fa79 	bl	800178c <_sbrk_r>
 800129a:	1c43      	adds	r3, r0, #1
 800129c:	d00a      	beq.n	80012b4 <sbrk_aligned+0x34>
 800129e:	1cc4      	adds	r4, r0, #3
 80012a0:	f024 0403 	bic.w	r4, r4, #3
 80012a4:	42a0      	cmp	r0, r4
 80012a6:	d007      	beq.n	80012b8 <sbrk_aligned+0x38>
 80012a8:	1a21      	subs	r1, r4, r0
 80012aa:	4628      	mov	r0, r5
 80012ac:	f000 fa6e 	bl	800178c <_sbrk_r>
 80012b0:	3001      	adds	r0, #1
 80012b2:	d101      	bne.n	80012b8 <sbrk_aligned+0x38>
 80012b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80012b8:	4620      	mov	r0, r4
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	20000208 	.word	0x20000208

080012c0 <_malloc_r>:
 80012c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012c4:	1ccd      	adds	r5, r1, #3
 80012c6:	f025 0503 	bic.w	r5, r5, #3
 80012ca:	3508      	adds	r5, #8
 80012cc:	2d0c      	cmp	r5, #12
 80012ce:	bf38      	it	cc
 80012d0:	250c      	movcc	r5, #12
 80012d2:	2d00      	cmp	r5, #0
 80012d4:	4607      	mov	r7, r0
 80012d6:	db01      	blt.n	80012dc <_malloc_r+0x1c>
 80012d8:	42a9      	cmp	r1, r5
 80012da:	d905      	bls.n	80012e8 <_malloc_r+0x28>
 80012dc:	230c      	movs	r3, #12
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	2600      	movs	r6, #0
 80012e2:	4630      	mov	r0, r6
 80012e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80013bc <_malloc_r+0xfc>
 80012ec:	f000 f9f8 	bl	80016e0 <__malloc_lock>
 80012f0:	f8d8 3000 	ldr.w	r3, [r8]
 80012f4:	461c      	mov	r4, r3
 80012f6:	bb5c      	cbnz	r4, 8001350 <_malloc_r+0x90>
 80012f8:	4629      	mov	r1, r5
 80012fa:	4638      	mov	r0, r7
 80012fc:	f7ff ffc0 	bl	8001280 <sbrk_aligned>
 8001300:	1c43      	adds	r3, r0, #1
 8001302:	4604      	mov	r4, r0
 8001304:	d155      	bne.n	80013b2 <_malloc_r+0xf2>
 8001306:	f8d8 4000 	ldr.w	r4, [r8]
 800130a:	4626      	mov	r6, r4
 800130c:	2e00      	cmp	r6, #0
 800130e:	d145      	bne.n	800139c <_malloc_r+0xdc>
 8001310:	2c00      	cmp	r4, #0
 8001312:	d048      	beq.n	80013a6 <_malloc_r+0xe6>
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	4631      	mov	r1, r6
 8001318:	4638      	mov	r0, r7
 800131a:	eb04 0903 	add.w	r9, r4, r3
 800131e:	f000 fa35 	bl	800178c <_sbrk_r>
 8001322:	4581      	cmp	r9, r0
 8001324:	d13f      	bne.n	80013a6 <_malloc_r+0xe6>
 8001326:	6821      	ldr	r1, [r4, #0]
 8001328:	1a6d      	subs	r5, r5, r1
 800132a:	4629      	mov	r1, r5
 800132c:	4638      	mov	r0, r7
 800132e:	f7ff ffa7 	bl	8001280 <sbrk_aligned>
 8001332:	3001      	adds	r0, #1
 8001334:	d037      	beq.n	80013a6 <_malloc_r+0xe6>
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	442b      	add	r3, r5
 800133a:	6023      	str	r3, [r4, #0]
 800133c:	f8d8 3000 	ldr.w	r3, [r8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d038      	beq.n	80013b6 <_malloc_r+0xf6>
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	42a2      	cmp	r2, r4
 8001348:	d12b      	bne.n	80013a2 <_malloc_r+0xe2>
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	e00f      	b.n	8001370 <_malloc_r+0xb0>
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	1b52      	subs	r2, r2, r5
 8001354:	d41f      	bmi.n	8001396 <_malloc_r+0xd6>
 8001356:	2a0b      	cmp	r2, #11
 8001358:	d917      	bls.n	800138a <_malloc_r+0xca>
 800135a:	1961      	adds	r1, r4, r5
 800135c:	42a3      	cmp	r3, r4
 800135e:	6025      	str	r5, [r4, #0]
 8001360:	bf18      	it	ne
 8001362:	6059      	strne	r1, [r3, #4]
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	bf08      	it	eq
 8001368:	f8c8 1000 	streq.w	r1, [r8]
 800136c:	5162      	str	r2, [r4, r5]
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	4638      	mov	r0, r7
 8001372:	f104 060b 	add.w	r6, r4, #11
 8001376:	f000 f9b9 	bl	80016ec <__malloc_unlock>
 800137a:	f026 0607 	bic.w	r6, r6, #7
 800137e:	1d23      	adds	r3, r4, #4
 8001380:	1af2      	subs	r2, r6, r3
 8001382:	d0ae      	beq.n	80012e2 <_malloc_r+0x22>
 8001384:	1b9b      	subs	r3, r3, r6
 8001386:	50a3      	str	r3, [r4, r2]
 8001388:	e7ab      	b.n	80012e2 <_malloc_r+0x22>
 800138a:	42a3      	cmp	r3, r4
 800138c:	6862      	ldr	r2, [r4, #4]
 800138e:	d1dd      	bne.n	800134c <_malloc_r+0x8c>
 8001390:	f8c8 2000 	str.w	r2, [r8]
 8001394:	e7ec      	b.n	8001370 <_malloc_r+0xb0>
 8001396:	4623      	mov	r3, r4
 8001398:	6864      	ldr	r4, [r4, #4]
 800139a:	e7ac      	b.n	80012f6 <_malloc_r+0x36>
 800139c:	4634      	mov	r4, r6
 800139e:	6876      	ldr	r6, [r6, #4]
 80013a0:	e7b4      	b.n	800130c <_malloc_r+0x4c>
 80013a2:	4613      	mov	r3, r2
 80013a4:	e7cc      	b.n	8001340 <_malloc_r+0x80>
 80013a6:	230c      	movs	r3, #12
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4638      	mov	r0, r7
 80013ac:	f000 f99e 	bl	80016ec <__malloc_unlock>
 80013b0:	e797      	b.n	80012e2 <_malloc_r+0x22>
 80013b2:	6025      	str	r5, [r4, #0]
 80013b4:	e7dc      	b.n	8001370 <_malloc_r+0xb0>
 80013b6:	605b      	str	r3, [r3, #4]
 80013b8:	deff      	udf	#255	; 0xff
 80013ba:	bf00      	nop
 80013bc:	20000204 	.word	0x20000204

080013c0 <_printf_common>:
 80013c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c4:	4616      	mov	r6, r2
 80013c6:	4699      	mov	r9, r3
 80013c8:	688a      	ldr	r2, [r1, #8]
 80013ca:	690b      	ldr	r3, [r1, #16]
 80013cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bfb8      	it	lt
 80013d4:	4613      	movlt	r3, r2
 80013d6:	6033      	str	r3, [r6, #0]
 80013d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013dc:	4607      	mov	r7, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	b10a      	cbz	r2, 80013e6 <_printf_common+0x26>
 80013e2:	3301      	adds	r3, #1
 80013e4:	6033      	str	r3, [r6, #0]
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	0699      	lsls	r1, r3, #26
 80013ea:	bf42      	ittt	mi
 80013ec:	6833      	ldrmi	r3, [r6, #0]
 80013ee:	3302      	addmi	r3, #2
 80013f0:	6033      	strmi	r3, [r6, #0]
 80013f2:	6825      	ldr	r5, [r4, #0]
 80013f4:	f015 0506 	ands.w	r5, r5, #6
 80013f8:	d106      	bne.n	8001408 <_printf_common+0x48>
 80013fa:	f104 0a19 	add.w	sl, r4, #25
 80013fe:	68e3      	ldr	r3, [r4, #12]
 8001400:	6832      	ldr	r2, [r6, #0]
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	42ab      	cmp	r3, r5
 8001406:	dc26      	bgt.n	8001456 <_printf_common+0x96>
 8001408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800140c:	1e13      	subs	r3, r2, #0
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	bf18      	it	ne
 8001412:	2301      	movne	r3, #1
 8001414:	0692      	lsls	r2, r2, #26
 8001416:	d42b      	bmi.n	8001470 <_printf_common+0xb0>
 8001418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800141c:	4649      	mov	r1, r9
 800141e:	4638      	mov	r0, r7
 8001420:	47c0      	blx	r8
 8001422:	3001      	adds	r0, #1
 8001424:	d01e      	beq.n	8001464 <_printf_common+0xa4>
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	6922      	ldr	r2, [r4, #16]
 800142a:	f003 0306 	and.w	r3, r3, #6
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf02      	ittt	eq
 8001432:	68e5      	ldreq	r5, [r4, #12]
 8001434:	6833      	ldreq	r3, [r6, #0]
 8001436:	1aed      	subeq	r5, r5, r3
 8001438:	68a3      	ldr	r3, [r4, #8]
 800143a:	bf0c      	ite	eq
 800143c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001440:	2500      	movne	r5, #0
 8001442:	4293      	cmp	r3, r2
 8001444:	bfc4      	itt	gt
 8001446:	1a9b      	subgt	r3, r3, r2
 8001448:	18ed      	addgt	r5, r5, r3
 800144a:	2600      	movs	r6, #0
 800144c:	341a      	adds	r4, #26
 800144e:	42b5      	cmp	r5, r6
 8001450:	d11a      	bne.n	8001488 <_printf_common+0xc8>
 8001452:	2000      	movs	r0, #0
 8001454:	e008      	b.n	8001468 <_printf_common+0xa8>
 8001456:	2301      	movs	r3, #1
 8001458:	4652      	mov	r2, sl
 800145a:	4649      	mov	r1, r9
 800145c:	4638      	mov	r0, r7
 800145e:	47c0      	blx	r8
 8001460:	3001      	adds	r0, #1
 8001462:	d103      	bne.n	800146c <_printf_common+0xac>
 8001464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146c:	3501      	adds	r5, #1
 800146e:	e7c6      	b.n	80013fe <_printf_common+0x3e>
 8001470:	18e1      	adds	r1, r4, r3
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	2030      	movs	r0, #48	; 0x30
 8001476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800147a:	4422      	add	r2, r4
 800147c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001484:	3302      	adds	r3, #2
 8001486:	e7c7      	b.n	8001418 <_printf_common+0x58>
 8001488:	2301      	movs	r3, #1
 800148a:	4622      	mov	r2, r4
 800148c:	4649      	mov	r1, r9
 800148e:	4638      	mov	r0, r7
 8001490:	47c0      	blx	r8
 8001492:	3001      	adds	r0, #1
 8001494:	d0e6      	beq.n	8001464 <_printf_common+0xa4>
 8001496:	3601      	adds	r6, #1
 8001498:	e7d9      	b.n	800144e <_printf_common+0x8e>
	...

0800149c <_printf_i>:
 800149c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	7e0f      	ldrb	r7, [r1, #24]
 80014a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80014a4:	2f78      	cmp	r7, #120	; 0x78
 80014a6:	4691      	mov	r9, r2
 80014a8:	4680      	mov	r8, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	469a      	mov	sl, r3
 80014ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80014b2:	d807      	bhi.n	80014c4 <_printf_i+0x28>
 80014b4:	2f62      	cmp	r7, #98	; 0x62
 80014b6:	d80a      	bhi.n	80014ce <_printf_i+0x32>
 80014b8:	2f00      	cmp	r7, #0
 80014ba:	f000 80d4 	beq.w	8001666 <_printf_i+0x1ca>
 80014be:	2f58      	cmp	r7, #88	; 0x58
 80014c0:	f000 80c0 	beq.w	8001644 <_printf_i+0x1a8>
 80014c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014cc:	e03a      	b.n	8001544 <_printf_i+0xa8>
 80014ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014d2:	2b15      	cmp	r3, #21
 80014d4:	d8f6      	bhi.n	80014c4 <_printf_i+0x28>
 80014d6:	a101      	add	r1, pc, #4	; (adr r1, 80014dc <_printf_i+0x40>)
 80014d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80014dc:	08001535 	.word	0x08001535
 80014e0:	08001549 	.word	0x08001549
 80014e4:	080014c5 	.word	0x080014c5
 80014e8:	080014c5 	.word	0x080014c5
 80014ec:	080014c5 	.word	0x080014c5
 80014f0:	080014c5 	.word	0x080014c5
 80014f4:	08001549 	.word	0x08001549
 80014f8:	080014c5 	.word	0x080014c5
 80014fc:	080014c5 	.word	0x080014c5
 8001500:	080014c5 	.word	0x080014c5
 8001504:	080014c5 	.word	0x080014c5
 8001508:	0800164d 	.word	0x0800164d
 800150c:	08001575 	.word	0x08001575
 8001510:	08001607 	.word	0x08001607
 8001514:	080014c5 	.word	0x080014c5
 8001518:	080014c5 	.word	0x080014c5
 800151c:	0800166f 	.word	0x0800166f
 8001520:	080014c5 	.word	0x080014c5
 8001524:	08001575 	.word	0x08001575
 8001528:	080014c5 	.word	0x080014c5
 800152c:	080014c5 	.word	0x080014c5
 8001530:	0800160f 	.word	0x0800160f
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	1d1a      	adds	r2, r3, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	602a      	str	r2, [r5, #0]
 800153c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001544:	2301      	movs	r3, #1
 8001546:	e09f      	b.n	8001688 <_printf_i+0x1ec>
 8001548:	6820      	ldr	r0, [r4, #0]
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	0607      	lsls	r7, r0, #24
 800154e:	f103 0104 	add.w	r1, r3, #4
 8001552:	6029      	str	r1, [r5, #0]
 8001554:	d501      	bpl.n	800155a <_printf_i+0xbe>
 8001556:	681e      	ldr	r6, [r3, #0]
 8001558:	e003      	b.n	8001562 <_printf_i+0xc6>
 800155a:	0646      	lsls	r6, r0, #25
 800155c:	d5fb      	bpl.n	8001556 <_printf_i+0xba>
 800155e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001562:	2e00      	cmp	r6, #0
 8001564:	da03      	bge.n	800156e <_printf_i+0xd2>
 8001566:	232d      	movs	r3, #45	; 0x2d
 8001568:	4276      	negs	r6, r6
 800156a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800156e:	485a      	ldr	r0, [pc, #360]	; (80016d8 <_printf_i+0x23c>)
 8001570:	230a      	movs	r3, #10
 8001572:	e012      	b.n	800159a <_printf_i+0xfe>
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	6820      	ldr	r0, [r4, #0]
 8001578:	1d19      	adds	r1, r3, #4
 800157a:	6029      	str	r1, [r5, #0]
 800157c:	0605      	lsls	r5, r0, #24
 800157e:	d501      	bpl.n	8001584 <_printf_i+0xe8>
 8001580:	681e      	ldr	r6, [r3, #0]
 8001582:	e002      	b.n	800158a <_printf_i+0xee>
 8001584:	0641      	lsls	r1, r0, #25
 8001586:	d5fb      	bpl.n	8001580 <_printf_i+0xe4>
 8001588:	881e      	ldrh	r6, [r3, #0]
 800158a:	4853      	ldr	r0, [pc, #332]	; (80016d8 <_printf_i+0x23c>)
 800158c:	2f6f      	cmp	r7, #111	; 0x6f
 800158e:	bf0c      	ite	eq
 8001590:	2308      	moveq	r3, #8
 8001592:	230a      	movne	r3, #10
 8001594:	2100      	movs	r1, #0
 8001596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800159a:	6865      	ldr	r5, [r4, #4]
 800159c:	60a5      	str	r5, [r4, #8]
 800159e:	2d00      	cmp	r5, #0
 80015a0:	bfa2      	ittt	ge
 80015a2:	6821      	ldrge	r1, [r4, #0]
 80015a4:	f021 0104 	bicge.w	r1, r1, #4
 80015a8:	6021      	strge	r1, [r4, #0]
 80015aa:	b90e      	cbnz	r6, 80015b0 <_printf_i+0x114>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	d04b      	beq.n	8001648 <_printf_i+0x1ac>
 80015b0:	4615      	mov	r5, r2
 80015b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80015b6:	fb03 6711 	mls	r7, r3, r1, r6
 80015ba:	5dc7      	ldrb	r7, [r0, r7]
 80015bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80015c0:	4637      	mov	r7, r6
 80015c2:	42bb      	cmp	r3, r7
 80015c4:	460e      	mov	r6, r1
 80015c6:	d9f4      	bls.n	80015b2 <_printf_i+0x116>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d10b      	bne.n	80015e4 <_printf_i+0x148>
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	07de      	lsls	r6, r3, #31
 80015d0:	d508      	bpl.n	80015e4 <_printf_i+0x148>
 80015d2:	6923      	ldr	r3, [r4, #16]
 80015d4:	6861      	ldr	r1, [r4, #4]
 80015d6:	4299      	cmp	r1, r3
 80015d8:	bfde      	ittt	le
 80015da:	2330      	movle	r3, #48	; 0x30
 80015dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80015e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80015e4:	1b52      	subs	r2, r2, r5
 80015e6:	6122      	str	r2, [r4, #16]
 80015e8:	f8cd a000 	str.w	sl, [sp]
 80015ec:	464b      	mov	r3, r9
 80015ee:	aa03      	add	r2, sp, #12
 80015f0:	4621      	mov	r1, r4
 80015f2:	4640      	mov	r0, r8
 80015f4:	f7ff fee4 	bl	80013c0 <_printf_common>
 80015f8:	3001      	adds	r0, #1
 80015fa:	d14a      	bne.n	8001692 <_printf_i+0x1f6>
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001600:	b004      	add	sp, #16
 8001602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	f043 0320 	orr.w	r3, r3, #32
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	4833      	ldr	r0, [pc, #204]	; (80016dc <_printf_i+0x240>)
 8001610:	2778      	movs	r7, #120	; 0x78
 8001612:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	6829      	ldr	r1, [r5, #0]
 800161a:	061f      	lsls	r7, r3, #24
 800161c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001620:	d402      	bmi.n	8001628 <_printf_i+0x18c>
 8001622:	065f      	lsls	r7, r3, #25
 8001624:	bf48      	it	mi
 8001626:	b2b6      	uxthmi	r6, r6
 8001628:	07df      	lsls	r7, r3, #31
 800162a:	bf48      	it	mi
 800162c:	f043 0320 	orrmi.w	r3, r3, #32
 8001630:	6029      	str	r1, [r5, #0]
 8001632:	bf48      	it	mi
 8001634:	6023      	strmi	r3, [r4, #0]
 8001636:	b91e      	cbnz	r6, 8001640 <_printf_i+0x1a4>
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f023 0320 	bic.w	r3, r3, #32
 800163e:	6023      	str	r3, [r4, #0]
 8001640:	2310      	movs	r3, #16
 8001642:	e7a7      	b.n	8001594 <_printf_i+0xf8>
 8001644:	4824      	ldr	r0, [pc, #144]	; (80016d8 <_printf_i+0x23c>)
 8001646:	e7e4      	b.n	8001612 <_printf_i+0x176>
 8001648:	4615      	mov	r5, r2
 800164a:	e7bd      	b.n	80015c8 <_printf_i+0x12c>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	6826      	ldr	r6, [r4, #0]
 8001650:	6961      	ldr	r1, [r4, #20]
 8001652:	1d18      	adds	r0, r3, #4
 8001654:	6028      	str	r0, [r5, #0]
 8001656:	0635      	lsls	r5, r6, #24
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	d501      	bpl.n	8001660 <_printf_i+0x1c4>
 800165c:	6019      	str	r1, [r3, #0]
 800165e:	e002      	b.n	8001666 <_printf_i+0x1ca>
 8001660:	0670      	lsls	r0, r6, #25
 8001662:	d5fb      	bpl.n	800165c <_printf_i+0x1c0>
 8001664:	8019      	strh	r1, [r3, #0]
 8001666:	2300      	movs	r3, #0
 8001668:	6123      	str	r3, [r4, #16]
 800166a:	4615      	mov	r5, r2
 800166c:	e7bc      	b.n	80015e8 <_printf_i+0x14c>
 800166e:	682b      	ldr	r3, [r5, #0]
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	602a      	str	r2, [r5, #0]
 8001674:	681d      	ldr	r5, [r3, #0]
 8001676:	6862      	ldr	r2, [r4, #4]
 8001678:	2100      	movs	r1, #0
 800167a:	4628      	mov	r0, r5
 800167c:	f7fe fda8 	bl	80001d0 <memchr>
 8001680:	b108      	cbz	r0, 8001686 <_printf_i+0x1ea>
 8001682:	1b40      	subs	r0, r0, r5
 8001684:	6060      	str	r0, [r4, #4]
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	6123      	str	r3, [r4, #16]
 800168a:	2300      	movs	r3, #0
 800168c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001690:	e7aa      	b.n	80015e8 <_printf_i+0x14c>
 8001692:	6923      	ldr	r3, [r4, #16]
 8001694:	462a      	mov	r2, r5
 8001696:	4649      	mov	r1, r9
 8001698:	4640      	mov	r0, r8
 800169a:	47d0      	blx	sl
 800169c:	3001      	adds	r0, #1
 800169e:	d0ad      	beq.n	80015fc <_printf_i+0x160>
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	079b      	lsls	r3, r3, #30
 80016a4:	d413      	bmi.n	80016ce <_printf_i+0x232>
 80016a6:	68e0      	ldr	r0, [r4, #12]
 80016a8:	9b03      	ldr	r3, [sp, #12]
 80016aa:	4298      	cmp	r0, r3
 80016ac:	bfb8      	it	lt
 80016ae:	4618      	movlt	r0, r3
 80016b0:	e7a6      	b.n	8001600 <_printf_i+0x164>
 80016b2:	2301      	movs	r3, #1
 80016b4:	4632      	mov	r2, r6
 80016b6:	4649      	mov	r1, r9
 80016b8:	4640      	mov	r0, r8
 80016ba:	47d0      	blx	sl
 80016bc:	3001      	adds	r0, #1
 80016be:	d09d      	beq.n	80015fc <_printf_i+0x160>
 80016c0:	3501      	adds	r5, #1
 80016c2:	68e3      	ldr	r3, [r4, #12]
 80016c4:	9903      	ldr	r1, [sp, #12]
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	42ab      	cmp	r3, r5
 80016ca:	dcf2      	bgt.n	80016b2 <_printf_i+0x216>
 80016cc:	e7eb      	b.n	80016a6 <_printf_i+0x20a>
 80016ce:	2500      	movs	r5, #0
 80016d0:	f104 0619 	add.w	r6, r4, #25
 80016d4:	e7f5      	b.n	80016c2 <_printf_i+0x226>
 80016d6:	bf00      	nop
 80016d8:	080018e0 	.word	0x080018e0
 80016dc:	080018f1 	.word	0x080018f1

080016e0 <__malloc_lock>:
 80016e0:	4801      	ldr	r0, [pc, #4]	; (80016e8 <__malloc_lock+0x8>)
 80016e2:	f7ff bc73 	b.w	8000fcc <__retarget_lock_acquire_recursive>
 80016e6:	bf00      	nop
 80016e8:	20000200 	.word	0x20000200

080016ec <__malloc_unlock>:
 80016ec:	4801      	ldr	r0, [pc, #4]	; (80016f4 <__malloc_unlock+0x8>)
 80016ee:	f7ff bc6e 	b.w	8000fce <__retarget_lock_release_recursive>
 80016f2:	bf00      	nop
 80016f4:	20000200 	.word	0x20000200

080016f8 <_realloc_r>:
 80016f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fc:	4680      	mov	r8, r0
 80016fe:	4614      	mov	r4, r2
 8001700:	460e      	mov	r6, r1
 8001702:	b921      	cbnz	r1, 800170e <_realloc_r+0x16>
 8001704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001708:	4611      	mov	r1, r2
 800170a:	f7ff bdd9 	b.w	80012c0 <_malloc_r>
 800170e:	b92a      	cbnz	r2, 800171c <_realloc_r+0x24>
 8001710:	f000 f85a 	bl	80017c8 <_free_r>
 8001714:	4625      	mov	r5, r4
 8001716:	4628      	mov	r0, r5
 8001718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800171c:	f000 f8a0 	bl	8001860 <_malloc_usable_size_r>
 8001720:	4284      	cmp	r4, r0
 8001722:	4607      	mov	r7, r0
 8001724:	d802      	bhi.n	800172c <_realloc_r+0x34>
 8001726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800172a:	d812      	bhi.n	8001752 <_realloc_r+0x5a>
 800172c:	4621      	mov	r1, r4
 800172e:	4640      	mov	r0, r8
 8001730:	f7ff fdc6 	bl	80012c0 <_malloc_r>
 8001734:	4605      	mov	r5, r0
 8001736:	2800      	cmp	r0, #0
 8001738:	d0ed      	beq.n	8001716 <_realloc_r+0x1e>
 800173a:	42bc      	cmp	r4, r7
 800173c:	4622      	mov	r2, r4
 800173e:	4631      	mov	r1, r6
 8001740:	bf28      	it	cs
 8001742:	463a      	movcs	r2, r7
 8001744:	f000 f832 	bl	80017ac <memcpy>
 8001748:	4631      	mov	r1, r6
 800174a:	4640      	mov	r0, r8
 800174c:	f000 f83c 	bl	80017c8 <_free_r>
 8001750:	e7e1      	b.n	8001716 <_realloc_r+0x1e>
 8001752:	4635      	mov	r5, r6
 8001754:	e7df      	b.n	8001716 <_realloc_r+0x1e>

08001756 <memmove>:
 8001756:	4288      	cmp	r0, r1
 8001758:	b510      	push	{r4, lr}
 800175a:	eb01 0402 	add.w	r4, r1, r2
 800175e:	d902      	bls.n	8001766 <memmove+0x10>
 8001760:	4284      	cmp	r4, r0
 8001762:	4623      	mov	r3, r4
 8001764:	d807      	bhi.n	8001776 <memmove+0x20>
 8001766:	1e43      	subs	r3, r0, #1
 8001768:	42a1      	cmp	r1, r4
 800176a:	d008      	beq.n	800177e <memmove+0x28>
 800176c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001770:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001774:	e7f8      	b.n	8001768 <memmove+0x12>
 8001776:	4402      	add	r2, r0
 8001778:	4601      	mov	r1, r0
 800177a:	428a      	cmp	r2, r1
 800177c:	d100      	bne.n	8001780 <memmove+0x2a>
 800177e:	bd10      	pop	{r4, pc}
 8001780:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001784:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001788:	e7f7      	b.n	800177a <memmove+0x24>
	...

0800178c <_sbrk_r>:
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	4d06      	ldr	r5, [pc, #24]	; (80017a8 <_sbrk_r+0x1c>)
 8001790:	2300      	movs	r3, #0
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	f7ff f95e 	bl	8000a58 <_sbrk>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d102      	bne.n	80017a6 <_sbrk_r+0x1a>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	b103      	cbz	r3, 80017a6 <_sbrk_r+0x1a>
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	2000020c 	.word	0x2000020c

080017ac <memcpy>:
 80017ac:	440a      	add	r2, r1
 80017ae:	4291      	cmp	r1, r2
 80017b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80017b4:	d100      	bne.n	80017b8 <memcpy+0xc>
 80017b6:	4770      	bx	lr
 80017b8:	b510      	push	{r4, lr}
 80017ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017c2:	4291      	cmp	r1, r2
 80017c4:	d1f9      	bne.n	80017ba <memcpy+0xe>
 80017c6:	bd10      	pop	{r4, pc}

080017c8 <_free_r>:
 80017c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80017ca:	2900      	cmp	r1, #0
 80017cc:	d044      	beq.n	8001858 <_free_r+0x90>
 80017ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017d2:	9001      	str	r0, [sp, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f1a1 0404 	sub.w	r4, r1, #4
 80017da:	bfb8      	it	lt
 80017dc:	18e4      	addlt	r4, r4, r3
 80017de:	f7ff ff7f 	bl	80016e0 <__malloc_lock>
 80017e2:	4a1e      	ldr	r2, [pc, #120]	; (800185c <_free_r+0x94>)
 80017e4:	9801      	ldr	r0, [sp, #4]
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	b933      	cbnz	r3, 80017f8 <_free_r+0x30>
 80017ea:	6063      	str	r3, [r4, #4]
 80017ec:	6014      	str	r4, [r2, #0]
 80017ee:	b003      	add	sp, #12
 80017f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017f4:	f7ff bf7a 	b.w	80016ec <__malloc_unlock>
 80017f8:	42a3      	cmp	r3, r4
 80017fa:	d908      	bls.n	800180e <_free_r+0x46>
 80017fc:	6825      	ldr	r5, [r4, #0]
 80017fe:	1961      	adds	r1, r4, r5
 8001800:	428b      	cmp	r3, r1
 8001802:	bf01      	itttt	eq
 8001804:	6819      	ldreq	r1, [r3, #0]
 8001806:	685b      	ldreq	r3, [r3, #4]
 8001808:	1949      	addeq	r1, r1, r5
 800180a:	6021      	streq	r1, [r4, #0]
 800180c:	e7ed      	b.n	80017ea <_free_r+0x22>
 800180e:	461a      	mov	r2, r3
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	b10b      	cbz	r3, 8001818 <_free_r+0x50>
 8001814:	42a3      	cmp	r3, r4
 8001816:	d9fa      	bls.n	800180e <_free_r+0x46>
 8001818:	6811      	ldr	r1, [r2, #0]
 800181a:	1855      	adds	r5, r2, r1
 800181c:	42a5      	cmp	r5, r4
 800181e:	d10b      	bne.n	8001838 <_free_r+0x70>
 8001820:	6824      	ldr	r4, [r4, #0]
 8001822:	4421      	add	r1, r4
 8001824:	1854      	adds	r4, r2, r1
 8001826:	42a3      	cmp	r3, r4
 8001828:	6011      	str	r1, [r2, #0]
 800182a:	d1e0      	bne.n	80017ee <_free_r+0x26>
 800182c:	681c      	ldr	r4, [r3, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	6053      	str	r3, [r2, #4]
 8001832:	440c      	add	r4, r1
 8001834:	6014      	str	r4, [r2, #0]
 8001836:	e7da      	b.n	80017ee <_free_r+0x26>
 8001838:	d902      	bls.n	8001840 <_free_r+0x78>
 800183a:	230c      	movs	r3, #12
 800183c:	6003      	str	r3, [r0, #0]
 800183e:	e7d6      	b.n	80017ee <_free_r+0x26>
 8001840:	6825      	ldr	r5, [r4, #0]
 8001842:	1961      	adds	r1, r4, r5
 8001844:	428b      	cmp	r3, r1
 8001846:	bf04      	itt	eq
 8001848:	6819      	ldreq	r1, [r3, #0]
 800184a:	685b      	ldreq	r3, [r3, #4]
 800184c:	6063      	str	r3, [r4, #4]
 800184e:	bf04      	itt	eq
 8001850:	1949      	addeq	r1, r1, r5
 8001852:	6021      	streq	r1, [r4, #0]
 8001854:	6054      	str	r4, [r2, #4]
 8001856:	e7ca      	b.n	80017ee <_free_r+0x26>
 8001858:	b003      	add	sp, #12
 800185a:	bd30      	pop	{r4, r5, pc}
 800185c:	20000204 	.word	0x20000204

08001860 <_malloc_usable_size_r>:
 8001860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001864:	1f18      	subs	r0, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	bfbc      	itt	lt
 800186a:	580b      	ldrlt	r3, [r1, r0]
 800186c:	18c0      	addlt	r0, r0, r3
 800186e:	4770      	bx	lr

08001870 <_init>:
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001872:	bf00      	nop
 8001874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001876:	bc08      	pop	{r3}
 8001878:	469e      	mov	lr, r3
 800187a:	4770      	bx	lr

0800187c <_fini>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	bf00      	nop
 8001880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001882:	bc08      	pop	{r3}
 8001884:	469e      	mov	lr, r3
 8001886:	4770      	bx	lr
