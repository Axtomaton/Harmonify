
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08001f44  08001f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002140  08002140  00027b20  2**0
                  CONTENTS
  4 .ARM          00000000  08002140  08002140  00027b20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002140  08002140  00027b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007b20  20000000  08002148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20007b20  08009c68  00027b20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007d28  08009c68  00027d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027b20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000353a  00000000  00000000  00027b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001099  00000000  00000000  0002b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000318  00000000  00000000  0002c168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000021c  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001549  00000000  00000000  0002c69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ea3  00000000  00000000  0002dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4699  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000db8  00000000  00000000  00128124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00128edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007b20 	.word	0x20007b20
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f2c 	.word	0x08001f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007b24 	.word	0x20007b24
 80001cc:	08001f2c 	.word	0x08001f2c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <SysTick_Handler>:
// Configure the systick
// Initialize Systick
// Handle interruprs
static int count = 0;

void SysTick_Handler(){ //hardware runs it for you. m
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    count++;
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SysTick_Handler+0x18>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	3301      	adds	r3, #1
 800029a:	4a03      	ldr	r2, [pc, #12]	; (80002a8 <SysTick_Handler+0x18>)
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	20007b3c 	.word	0x20007b3c

080002ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	db0b      	blt.n	80002d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 021f 	and.w	r2, r3, #31
 80002c4:	4907      	ldr	r1, [pc, #28]	; (80002e4 <__NVIC_EnableIRQ+0x38>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	095b      	lsrs	r3, r3, #5
 80002cc:	2001      	movs	r0, #1
 80002ce:	fa00 f202 	lsl.w	r2, r0, r2
 80002d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002fe:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <GPIO_Init+0xc4>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a2a      	ldr	r2, [pc, #168]	; (80003ac <GPIO_Init+0xc4>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b28      	ldr	r3, [pc, #160]	; (80003ac <GPIO_Init+0xc4>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0304 	and.w	r3, r3, #4
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <GPIO_Init+0xc4>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a24      	ldr	r2, [pc, #144]	; (80003ac <GPIO_Init+0xc4>)
 800031c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <GPIO_Init+0xc4>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <GPIO_Init+0xc4>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a1e      	ldr	r2, [pc, #120]	; (80003ac <GPIO_Init+0xc4>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <GPIO_Init+0xc4>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <GPIO_Init+0xc4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a18      	ldr	r2, [pc, #96]	; (80003ac <GPIO_Init+0xc4>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <GPIO_Init+0xc4>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 800035e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000362:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000364:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000368:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4619      	mov	r1, r3
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <GPIO_Init+0xc8>)
 8000376:	f000 ff5b 	bl	8001230 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 800037a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800037e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000380:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000384:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000386:	2302      	movs	r3, #2
 8000388:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 ff4c 	bl	8001230 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000398:	2028      	movs	r0, #40	; 0x28
 800039a:	f7ff ff87 	bl	80002ac <__NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800039e:	2017      	movs	r0, #23
 80003a0:	f7ff ff84 	bl	80002ac <__NVIC_EnableIRQ>
 80003a4:	bf00      	nop
 80003a6:	3728      	adds	r7, #40	; 0x28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000800 	.word	0x48000800

080003b4 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <LED_Init+0xb8>)
 80003be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c0:	4a2a      	ldr	r2, [pc, #168]	; (800046c <LED_Init+0xb8>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));  
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f6:	4313      	orrs	r3, r2
 80003f8:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	2103      	movs	r1, #3
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	43db      	mvns	r3, r3
 800040c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000410:	4013      	ands	r3, r2
 8000412:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	2103      	movs	r1, #3
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000428:	4313      	orrs	r3, r2
 800042a:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 800042c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000430:	685a      	ldr	r2, [r3, #4]
 8000432:	2101      	movs	r1, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000440:	4013      	ands	r3, r2
 8000442:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000448:	68da      	ldr	r2, [r3, #12]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	43db      	mvns	r3, r3
 8000456:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800045a:	4013      	ands	r3, r2
 800045c:	60cb      	str	r3, [r1, #12]
	
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <LED_On>:

//******************************************************************************************
// Turn LED On
//******************************************************************************************
void LED_On(int pin){
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	GPIOA->ODR |= (1UL<<pin);
 8000478:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	2101      	movs	r1, #1
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800048a:	4313      	orrs	r3, r2
 800048c:	614b      	str	r3, [r1, #20]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <LED_Off>:

//******************************************************************************************
// Turn LED Off
//******************************************************************************************
void LED_Off(int pin){
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1UL<<pin);
 80004a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2101      	movs	r1, #1
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004b6:	4013      	ands	r3, r2
 80004b8:	614b      	str	r3, [r1, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LED_Toggle>:

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 80004ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2101      	movs	r1, #1
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004e0:	4053      	eors	r3, r2
 80004e2:	614b      	str	r3, [r1, #20]
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <UART2_Init+0x40>)
 80004f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <UART2_Init+0x40>)
 80004fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fe:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <UART2_Init+0x40>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <UART2_Init+0x40>)
 8000508:	f023 030c 	bic.w	r3, r3, #12
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <UART2_Init+0x40>)
 8000512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <UART2_Init+0x40>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000520:	f000 f80a 	bl	8000538 <UART2_GPIO_Init>
	USART_Init(USART2);
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <UART2_Init+0x44>)
 8000526:	f000 f84f 	bl	80005c8 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40004400 	.word	0x40004400

08000538 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <UART2_GPIO_Init+0x8c>)
 800053e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <UART2_GPIO_Init+0x8c>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000556:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000562:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000566:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800056c:	6a1b      	ldr	r3, [r3, #32]
 800056e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000576:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800057c:	6a1b      	ldr	r3, [r3, #32]
 800057e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000582:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000586:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000592:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000596:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005a6:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80005a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005b2:	f023 030c 	bic.w	r3, r3, #12
 80005b6:	6053      	str	r3, [r2, #4]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f023 0201 	bic.w	r2, r3, #1
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f242 028d 	movw	r2, #8333	; 0x208d
 8000606:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f043 020c 	orr.w	r2, r3, #12
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <USART_Init+0x100>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d129      	bne.n	8000670 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f043 0220 	orr.w	r2, r3, #32
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f023 0210 	bic.w	r2, r3, #16
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f023 0201 	bic.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <USART_Init+0x104>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d10b      	bne.n	8000690 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <USART_Init+0x108>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	4a11      	ldr	r2, [pc, #68]	; (80006d0 <USART_Init+0x108>)
 800068a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800068e:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f043 0201 	orr.w	r2, r3, #1
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 800069c:	bf00      	nop
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80006aa:	bf00      	nop
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f9      	beq.n	80006ac <USART_Init+0xe4>
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40004c00 	.word	0x40004c00
 80006cc:	40004400 	.word	0x40004400
 80006d0:	40013800 	.word	0x40013800

080006d4 <USART_Read_Nonblocking>:


uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)){
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	69db      	ldr	r3, [r3, #28]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <USART_Read_Nonblocking+0x1e>
	// USART resets the RXNE flag automatically after reading DR
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	e000      	b.n	80006f4 <USART_Read_Nonblocking+0x20>
	// Reading USART_DR automatically clears the RXNE flag
	}
	return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000708:	bf00      	nop
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0f9      	beq.n	800070a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	e014      	b.n	8000766 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800073c:	bf00      	nop
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b29a      	uxth	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000758:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800075c:	f000 f818 	bl	8000790 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3301      	adds	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	429a      	cmp	r2, r3
 800076c:	d8e6      	bhi.n	800073c <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800076e:	bf00      	nop
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f9      	beq.n	8000770 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	61da      	str	r2, [r3, #28]
}   
 8000788:	bf00      	nop
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2264      	movs	r2, #100	; 0x64
 800079c:	fb03 f202 	mul.w	r2, r3, r2
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <USART_Delay+0x3c>)
 80007a2:	fba3 1302 	umull	r1, r3, r3, r2
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	0852      	lsrs	r2, r2, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	089b      	lsrs	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80007b0:	bf00      	nop
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f9      	bne.n	80007b2 <USART_Delay+0x22>
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	24924925 	.word	0x24924925

080007d0 <init_systick>:
 * @brief Initialization function for systick
 * 
 * @return struct systick* 
 */
void init_systick()
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    //clear csr register

    // SysTick->CSR &= ~(1 << 0);

    // systick->CSR = 0; // Clear CSR
    systick->RVR = 79; // Set to 10 ms
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <init_systick+0x48>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	224f      	movs	r2, #79	; 0x4f
 80007da:	605a      	str	r2, [r3, #4]
    systick->CSR = systick->CSR | (1<<2);
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <init_systick+0x48>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <init_systick+0x48>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 0204 	orr.w	r2, r2, #4
 80007ea:	601a      	str	r2, [r3, #0]
    systick->CSR = systick->CSR | (1 << 1);
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <init_systick+0x48>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <init_systick+0x48>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f042 0202 	orr.w	r2, r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
    systick->CSR = systick->CSR | (1 << 0);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <init_systick+0x48>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <init_systick+0x48>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f042 0201 	orr.w	r2, r2, #1
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000

0800081c <delay_systick>:

// This fucion is to create delay using SysTick timer counter
void delay_systick()
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
    // Create a for loop that loops 10 times
    // Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
    // register in a loop. When that bit is set exit this inner loop
    // to do another pass in the outer loop of 10.

        while (!(systick->CSR & (1 << 16)));
 8000820:	bf00      	nop
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <delay_systick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0f8      	beq.n	8000822 <delay_systick+0x6>
        // while(x == 0){
        //     if ((SysTick->CSR >> 16) == 1) {
        //          x = 1;
        //     }
        // }
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000000 	.word	0x20000000

08000840 <USART2_IRQHandler>:

/**
 * @brief - This function enables USART2 read interruprs at the NVIC level. Only enable the interrupr for 
 * RXNE 
 */
void USART2_IRQHandler(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    if(USART2->ISR & USART_ISR_RXNE){
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <USART2_IRQHandler+0x2c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 0320 	and.w	r3, r3, #32
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <USART2_IRQHandler+0x24>
        uint8_t data = USART_Read(USART2);
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <USART2_IRQHandler+0x2c>)
 8000854:	f7ff ff54 	bl	8000700 <USART_Read>
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
        printf("%c", data);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f822 	bl	80008a8 <putchar>
        // USART_Write(USART2, &data, 1);
    }

}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400

08000870 <puts>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

int puts (const char* str) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    int ret = sprintf (buffer, "%s\r\n", str);
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <puts+0x2c>)
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <puts+0x30>)
 800087e:	f000 fe99 	bl	80015b4 <siprintf>
 8000882:	60f8      	str	r0, [r7, #12]
    USART_Write (USART2, (unsigned char*) buffer, ret);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	461a      	mov	r2, r3
 8000888:	4905      	ldr	r1, [pc, #20]	; (80008a0 <puts+0x30>)
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <puts+0x34>)
 800088c:	f7ff ff4d 	bl	800072a <USART_Write>
    return ret;
 8000890:	68fb      	ldr	r3, [r7, #12]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08001f44 	.word	0x08001f44
 80008a0:	20007b40 	.word	0x20007b40
 80008a4:	40004400 	.word	0x40004400

080008a8 <putchar>:
	USART_Write (USART2, (unsigned char*) "\r\n", 2);
	return ret;
}


int putchar (int c) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    USART_Write (USART2, (unsigned char*) &c, 1);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2201      	movs	r2, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <putchar+0x20>)
 80008b8:	f7ff ff37 	bl	800072a <USART_Write>
    return c;
 80008bc:	687b      	ldr	r3, [r7, #4]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40004400 	.word	0x40004400

080008cc <printf>:

int printf (const char *format, ...) {
 80008cc:	b40f      	push	{r0, r1, r2, r3}
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
   va_list aptr;
   int ret;

   va_start(aptr, format);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	603b      	str	r3, [r7, #0]
   ret = vsprintf(buffer, format, aptr);
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <printf+0x68>)
 80008e0:	f000 fe9e 	bl	8001620 <vsiprintf>
 80008e4:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   if (buffer [ret - 1] == '\n') {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <printf+0x68>)
 80008ec:	5cd3      	ldrb	r3, [r2, r3]
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	d111      	bne.n	8000916 <printf+0x4a>
       buffer [ret - 1] = '\r';
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <printf+0x68>)
 80008f8:	210d      	movs	r1, #13
 80008fa:	54d1      	strb	r1, [r2, r3]
       buffer [ret] = '\n';
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <printf+0x68>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	220a      	movs	r2, #10
 8000904:	701a      	strb	r2, [r3, #0]
       buffer [ret + 1] = 0;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <printf+0x68>)
 800090c:	2100      	movs	r1, #0
 800090e:	54d1      	strb	r1, [r2, r3]
       ret++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
   }

   USART_Write (USART2, (unsigned char*) buffer, ret);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	461a      	mov	r2, r3
 800091a:	4906      	ldr	r1, [pc, #24]	; (8000934 <printf+0x68>)
 800091c:	4806      	ldr	r0, [pc, #24]	; (8000938 <printf+0x6c>)
 800091e:	f7ff ff04 	bl	800072a <USART_Write>

   return(ret);
 8000922:	687b      	ldr	r3, [r7, #4]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800092e:	b004      	add	sp, #16
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20007b40 	.word	0x20007b40
 8000938:	40004400 	.word	0x40004400

0800093c <getTitle>:
/**
 * parses song the title of the current song
 * @param current_song - referene to the song currently being parsed.
 * @param size - length of the current song array.
 */
void getTitle (unsigned char* current_song, int size) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	// gets title bytes
    for (int i = 0; i < size; i++){
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e02e      	b.n	80009aa <getTitle+0x6e>
        if (current_song[i] == 0xFF && current_song[i+1] == 0x03){
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2bff      	cmp	r3, #255	; 0xff
 8000956:	d125      	bne.n	80009a4 <getTitle+0x68>
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d11e      	bne.n	80009a4 <getTitle+0x68>
            int index = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
            int length = current_song[i+2];
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3302      	adds	r3, #2
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
            printf("Song Title: ");
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <getTitle+0x84>)
 8000978:	f7ff ffa8 	bl	80008cc <printf>
            while(index < length){
 800097c:	e00d      	b.n	800099a <getTitle+0x5e>
                printf("%c", current_song[i+3]);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3303      	adds	r3, #3
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff8d 	bl	80008a8 <putchar>
                i++, index++;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	3301      	adds	r3, #1
 8000998:	613b      	str	r3, [r7, #16]
            while(index < length){
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbed      	blt.n	800097e <getTitle+0x42>
            }
            break;
 80009a2:	e006      	b.n	80009b2 <getTitle+0x76>
    for (int i = 0; i < size; i++){
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbcc      	blt.n	800094c <getTitle+0x10>
        }
    }
    printf("\r\n");
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <getTitle+0x88>)
 80009b4:	f7ff ff5c 	bl	8000870 <puts>
}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08001f58 	.word	0x08001f58
 80009c4:	08001f68 	.word	0x08001f68

080009c8 <getCopyright>:
/**
 * parses the copyright of the current song
 * @param current_song- referene to the song currently being parsed
 * @param size- length of the current song array
 */
void getCopyright (unsigned char* current_song, int size) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	// gets copyright bytes
    for (int i = 0; i < size; i++){
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e02e      	b.n	8000a36 <getCopyright+0x6e>
        if (current_song[i] == 0xFF && current_song[i+1] == 0x02){
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2bff      	cmp	r3, #255	; 0xff
 80009e2:	d125      	bne.n	8000a30 <getCopyright+0x68>
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d11e      	bne.n	8000a30 <getCopyright+0x68>
            int index = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
            int length = current_song[i+2];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3302      	adds	r3, #2
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	60fb      	str	r3, [r7, #12]
            printf("Copyright: ");
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <getCopyright+0x84>)
 8000a04:	f7ff ff62 	bl	80008cc <printf>
            while(index < length){
 8000a08:	e00d      	b.n	8000a26 <getCopyright+0x5e>
	            printf("%c", current_song[i+3]);
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff47 	bl	80008a8 <putchar>
	            i++, index++;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	3301      	adds	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
            while(index < length){
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbed      	blt.n	8000a0a <getCopyright+0x42>
	        }
            break;
 8000a2e:	e006      	b.n	8000a3e <getCopyright+0x76>
    for (int i = 0; i < size; i++){
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbcc      	blt.n	80009d8 <getCopyright+0x10>
        }
    }
    printf("\r\n"); //formatting
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <getCopyright+0x88>)
 8000a40:	f7ff ff16 	bl	8000870 <puts>
}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	08001f6c 	.word	0x08001f6c
 8000a50:	08001f68 	.word	0x08001f68

08000a54 <getTempo>:
/**
 * parses the tempo of the current song. also sets tempo
 * @param current_song- referene to the song currently being parsed
 * @param size- length of the current song array
 */
void getTempo(unsigned char* current_song, int size) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++){
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e02b      	b.n	8000abc <getTempo+0x68>
        if (current_song[i] == 0xFF && current_song[i+1] == 0x51){
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2bff      	cmp	r3, #255	; 0xff
 8000a6e:	d122      	bne.n	8000ab6 <getTempo+0x62>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3301      	adds	r3, #1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b51      	cmp	r3, #81	; 0x51
 8000a7c:	d11b      	bne.n	8000ab6 <getTempo+0x62>
            printf("Tempo: ");
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <getTempo+0x7c>)
 8000a80:	f7ff ff24 	bl	80008cc <printf>
            int temp = ((current_song[i + 3]<<16) | (current_song[i+4]<<8) | (current_song[i+5]));
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	3303      	adds	r3, #3
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	041a      	lsls	r2, r3, #16
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3304      	adds	r3, #4
 8000a94:	6879      	ldr	r1, [r7, #4]
 8000a96:	440b      	add	r3, r1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	3205      	adds	r2, #5
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	440a      	add	r2, r1
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
            printf("%d\r\n",  temp);
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <getTempo+0x80>)
 8000ab0:	f7ff ff0c 	bl	80008cc <printf>
            break;
 8000ab4:	e007      	b.n	8000ac6 <getTempo+0x72>
    for (int i = 0; i < size; i++){
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbcf      	blt.n	8000a64 <getTempo+0x10>
        }
    }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08001f78 	.word	0x08001f78
 8000ad4:	08001f80 	.word	0x08001f80

08000ad8 <next_song>:
/**
 * Parses song.c for details related to the next song avaliable. Retrieves the song title, copyright, and tempo.
* @param current_song- referene to the song currently being parsed
* @param size- length of the current song array
 */
void next_song(unsigned char* current_song, int size){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
    getTitle(current_song, size);
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff29 	bl	800093c <getTitle>
    getCopyright(current_song, size);
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff6b 	bl	80009c8 <getCopyright>
    getTempo(current_song, size);
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffad 	bl	8000a54 <getTempo>
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <EXTI15_10_IRQHandler>:


/**
 * @brief - handler for the blue button
 */
void EXTI15_10_IRQHandler () {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	EXTI->PR1 |= (1 << 13); // clear the pending bit
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <EXTI15_10_IRQHandler+0x44>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <EXTI15_10_IRQHandler+0x44>)
 8000b0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b12:	6153      	str	r3, [r2, #20]
	mode = !mode; // toggle between local and remote modes
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <EXTI15_10_IRQHandler+0x48>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	bf0c      	ite	eq
 8000b1c:	2301      	moveq	r3, #1
 8000b1e:	2300      	movne	r3, #0
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <EXTI15_10_IRQHandler+0x48>)
 8000b26:	601a      	str	r2, [r3, #0]
    printf("\r\n%s\r\n", (mode == 1) ? "***REMOTE MODE ACTIVE***" : "***MANUAL OVERRIDE ACTIVE***");
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <EXTI15_10_IRQHandler+0x48>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <EXTI15_10_IRQHandler+0x30>
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <EXTI15_10_IRQHandler+0x4c>)
 8000b32:	e000      	b.n	8000b36 <EXTI15_10_IRQHandler+0x32>
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <EXTI15_10_IRQHandler+0x50>)
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <EXTI15_10_IRQHandler+0x54>)
 8000b3a:	f7ff fec7 	bl	80008cc <printf>
	LED_Off(LED_PIN); //turn off the led
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f7ff fcab 	bl	800049a <LED_Off>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010400 	.word	0x40010400
 8000b4c:	20007bc4 	.word	0x20007bc4
 8000b50:	08001f88 	.word	0x08001f88
 8000b54:	08001fa4 	.word	0x08001fa4
 8000b58:	08001fc4 	.word	0x08001fc4

08000b5c <EXTI9_5_IRQHandler>:

/**
 * @brief - handler for the s1 button
 * 
 */
void EXTI9_5_IRQHandler() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
    EXTI->PR1 |= (1 << 9); // Clear the pending bit
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <EXTI9_5_IRQHandler+0x4c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <EXTI9_5_IRQHandler+0x4c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	6153      	str	r3, [r2, #20]
	if (mode == 1){
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <EXTI9_5_IRQHandler+0x50>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d114      	bne.n	8000ba0 <EXTI9_5_IRQHandler+0x44>
		GPIO_PinState status = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fd01 	bl	8001584 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
		if(status == 1) {
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d103      	bne.n	8000b94 <EXTI9_5_IRQHandler+0x38>
            button_mode = 1;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <EXTI9_5_IRQHandler+0x54>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
        else if(status == 0) { //button is released
            button_mode = 2;
        }
	}
	
}
 8000b92:	e005      	b.n	8000ba0 <EXTI9_5_IRQHandler+0x44>
        else if(status == 0) { //button is released
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <EXTI9_5_IRQHandler+0x44>
            button_mode = 2;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <EXTI9_5_IRQHandler+0x54>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40010400 	.word	0x40010400
 8000bac:	20007bc4 	.word	0x20007bc4
 8000bb0:	20007bd4 	.word	0x20007bd4

08000bb4 <printPrompt>:


/*
* @brief - prints the prompt for the user
*/
void printPrompt() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    printf("***REMOTE LED CONTROL MENU***\n");
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <printPrompt+0x38>)
 8000bba:	f7ff fe59 	bl	8000870 <puts>
    printf("Available User Commands\n");
 8000bbe:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <printPrompt+0x3c>)
 8000bc0:	f7ff fe56 	bl	8000870 <puts>
    printf("NEXT – Show next song info\n");
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <printPrompt+0x40>)
 8000bc6:	f7ff fe53 	bl	8000870 <puts>
    printf("PLAY – Play the song (LED on)\n");
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <printPrompt+0x44>)
 8000bcc:	f7ff fe50 	bl	8000870 <puts>
    printf("PAUSE – Pause the song (LED flash)\n");
 8000bd0:	480a      	ldr	r0, [pc, #40]	; (8000bfc <printPrompt+0x48>)
 8000bd2:	f7ff fe4d 	bl	8000870 <puts>
    printf("STOP – Stop the song (LED off)\n");
 8000bd6:	480a      	ldr	r0, [pc, #40]	; (8000c00 <printPrompt+0x4c>)
 8000bd8:	f7ff fe4a 	bl	8000870 <puts>
    printf("HELP – Show this menu\n");
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <printPrompt+0x50>)
 8000bde:	f7ff fe47 	bl	8000870 <puts>
    printf("QUIT – Exit the program\n");
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <printPrompt+0x54>)
 8000be4:	f7ff fe44 	bl	8000870 <puts>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	08001fcc 	.word	0x08001fcc
 8000bf0:	08001fec 	.word	0x08001fec
 8000bf4:	08002004 	.word	0x08002004
 8000bf8:	08002024 	.word	0x08002024
 8000bfc:	08002044 	.word	0x08002044
 8000c00:	0800206c 	.word	0x0800206c
 8000c04:	08002090 	.word	0x08002090
 8000c08:	080020a8 	.word	0x080020a8

08000c0c <playSong>:

/**
 * @brief - turns on the led
 */
void playSong(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	LED_On(LED_PIN);
 8000c10:	2007      	movs	r0, #7
 8000c12:	f7ff fc2d 	bl	8000470 <LED_On>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <nextSong>:

/**
 * @brief - displays the next song info
 */
void nextSong(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
	song current_song_array = get_song(current_song_num);
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <nextSong+0x44>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f963 	bl	8000ef8 <get_song>
	unsigned char* current_song = current_song_array.p_song;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
	int size = current_song_array.size; 
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60bb      	str	r3, [r7, #8]
	next_song(current_song, size); //retrieve the next song details
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff ff4b 	bl	8000ad8 <next_song>
	current_song_num = (current_song_num == 4) ? 0 : current_song_num + 1; //back to first song if at last song else increment
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <nextSong+0x44>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d003      	beq.n	8000c52 <nextSong+0x36>
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <nextSong+0x44>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	e000      	b.n	8000c54 <nextSong+0x38>
 8000c52:	2300      	movs	r3, #0
 8000c54:	4a02      	ldr	r2, [pc, #8]	; (8000c60 <nextSong+0x44>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20007bc8 	.word	0x20007bc8

08000c64 <stopSong>:

/**
 * @brief - turns the led off
 */
void stopSong(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	LED_Off(LED_PIN);
 8000c68:	2007      	movs	r0, #7
 8000c6a:	f7ff fc16 	bl	800049a <LED_Off>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <led_toggler>:
/**
 * @brief - toggles led on and of
 * 
 * @param n boolean
 */
void led_toggler(int n){
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	if (n == 1){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d103      	bne.n	8000c88 <led_toggler+0x16>
		LED_On(LED_PIN);
 8000c80:	2007      	movs	r0, #7
 8000c82:	f7ff fbf5 	bl	8000470 <LED_On>
	}
	else{
		LED_Off(LED_PIN);
	}
}
 8000c86:	e002      	b.n	8000c8e <led_toggler+0x1c>
		LED_Off(LED_PIN);
 8000c88:	2007      	movs	r0, #7
 8000c8a:	f7ff fc06 	bl	800049a <LED_Off>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <run_project>:


void run_project(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a4      	sub	sp, #144	; 0x90
 8000c9c:	af00      	add	r7, sp, #0
	printPrompt();
 8000c9e:	f7ff ff89 	bl	8000bb4 <printPrompt>
	init_systick(); 
 8000ca2:	f7ff fd95 	bl	80007d0 <init_systick>
	GPIO_Init();
 8000ca6:	f7ff fb1f 	bl	80002e8 <GPIO_Init>
	char input[128]; // buffer for input
	int buffer_index = 0; // index to keep track of position in buffer
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int count = 0; // count for pause to make sure flashing 1/sec
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int pause = 0; // flag to keep track of whether light should be flashing or not. pseudo-boolean
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char byte; // used to store each character when reading user input

	while(1){
		if(mode == 0){ //MODE = LOCAL
 8000cbc:	4b7f      	ldr	r3, [pc, #508]	; (8000ebc <run_project+0x224>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 8093 	bne.w	8000dec <run_project+0x154>
			delay_systick(); // start systick timer
 8000cc6:	f7ff fda9 	bl	800081c <delay_systick>
			byte = USART_Read_Nonblocking(USART2); // read in character
 8000cca:	487d      	ldr	r0, [pc, #500]	; (8000ec0 <run_project+0x228>)
 8000ccc:	f7ff fd02 	bl	80006d4 <USART_Read_Nonblocking>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			printf("%c", byte);
 8000cd6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fde4 	bl	80008a8 <putchar>
			if(byte == '\r'){ // once enter is pressed
 8000ce0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000ce4:	2b0d      	cmp	r3, #13
 8000ce6:	d15b      	bne.n	8000da0 <run_project+0x108>
				input[buffer_index] = '\0'; //add terminating character
 8000ce8:	463a      	mov	r2, r7
 8000cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
				buffer_index = 0; // reset the index to prepare for the next command
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				printf("%s\r\n", (char*)input);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4871      	ldr	r0, [pc, #452]	; (8000ec4 <run_project+0x22c>)
 8000d00:	f7ff fde4 	bl	80008cc <printf>

				if(strcmp(input, "NEXT") == 0){ // if user entered next
 8000d04:	463b      	mov	r3, r7
 8000d06:	4970      	ldr	r1, [pc, #448]	; (8000ec8 <run_project+0x230>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa61 	bl	80001d0 <strcmp>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d105      	bne.n	8000d20 <run_project+0x88>
					pause = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					nextSong();
 8000d1a:	f7ff ff7f 	bl	8000c1c <nextSong>
 8000d1e:	e04f      	b.n	8000dc0 <run_project+0x128>
				}
				else if(strcmp(input, "PLAY") == 0){ // turn on led
 8000d20:	463b      	mov	r3, r7
 8000d22:	496a      	ldr	r1, [pc, #424]	; (8000ecc <run_project+0x234>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fa53 	bl	80001d0 <strcmp>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d105      	bne.n	8000d3c <run_project+0xa4>
					pause = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					playSong();
 8000d36:	f7ff ff69 	bl	8000c0c <playSong>
 8000d3a:	e041      	b.n	8000dc0 <run_project+0x128>
				}
				else if (strcmp(input, "HELP") == 0){ //prints the help menu
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4964      	ldr	r1, [pc, #400]	; (8000ed0 <run_project+0x238>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa45 	bl	80001d0 <strcmp>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <run_project+0xba>
					printPrompt();
 8000d4c:	f7ff ff32 	bl	8000bb4 <printPrompt>
 8000d50:	e036      	b.n	8000dc0 <run_project+0x128>
				}
				else if(strcmp(input, "PAUSE") == 0){ // if user entered pause
 8000d52:	463b      	mov	r3, r7
 8000d54:	495f      	ldr	r1, [pc, #380]	; (8000ed4 <run_project+0x23c>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fa3a 	bl	80001d0 <strcmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d103      	bne.n	8000d6a <run_project+0xd2>
					pause = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d68:	e02a      	b.n	8000dc0 <run_project+0x128>
				}
				else if(strcmp(input, "STOP") == 0) { // turns off led
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	495a      	ldr	r1, [pc, #360]	; (8000ed8 <run_project+0x240>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa2e 	bl	80001d0 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <run_project+0xee>
					pause = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					stopSong();
 8000d80:	f7ff ff70 	bl	8000c64 <stopSong>
 8000d84:	e01c      	b.n	8000dc0 <run_project+0x128>
				}
				else if (strcmp(input, "QUIT") == 0){ //quit the program
 8000d86:	463b      	mov	r3, r7
 8000d88:	4954      	ldr	r1, [pc, #336]	; (8000edc <run_project+0x244>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa20 	bl	80001d0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 808c 	beq.w	8000eb0 <run_project+0x218>
					break;
				}
				else{ 
					printf("Invalid Command\r\n");
 8000d98:	4851      	ldr	r0, [pc, #324]	; (8000ee0 <run_project+0x248>)
 8000d9a:	f7ff fd69 	bl	8000870 <puts>
 8000d9e:	e00f      	b.n	8000dc0 <run_project+0x128>
				}
			}

			else if(byte != 0){ // if not enter, keep adding to buffer
 8000da0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00b      	beq.n	8000dc0 <run_project+0x128>
				input[buffer_index] = (char) byte;
 8000da8:	463a      	mov	r2, r7
 8000daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dae:	4413      	add	r3, r2
 8000db0:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000db4:	701a      	strb	r2, [r3, #0]
				buffer_index++;
 8000db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			}

			if (pause == 1){ // if pause is set, flash the led
 8000dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f47f af79 	bne.w	8000cbc <run_project+0x24>
				if(count == 1000){
 8000dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dd2:	d105      	bne.n	8000de0 <run_project+0x148>
					LED_Toggle(LED_PIN);
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f7ff fb76 	bl	80004c6 <LED_Toggle>
					count = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				}
				count++;
 8000de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000de4:	3301      	adds	r3, #1
 8000de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000dea:	e767      	b.n	8000cbc <run_project+0x24>
			}
		}

		
		else if(mode == 1){ // remote mode controls. Not allowed to type. 
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <run_project+0x224>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	f47f af63 	bne.w	8000cbc <run_project+0x24>
			delay_systick(); 
 8000df6:	f7ff fd11 	bl	800081c <delay_systick>
			byte = USART_Read_Nonblocking(USART2);
 8000dfa:	4831      	ldr	r0, [pc, #196]	; (8000ec0 <run_project+0x228>)
 8000dfc:	f7ff fc6a 	bl	80006d4 <USART_Read_Nonblocking>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

			if (button_mode == 1){
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <run_project+0x24c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <run_project+0x180>
				button_count++;
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <run_project+0x250>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a34      	ldr	r2, [pc, #208]	; (8000ee8 <run_project+0x250>)
 8000e16:	6013      	str	r3, [r2, #0]
				// printf("%d\n", button_count);
			}

			if (button_mode == 2 && button_count > 80){ //long pressed
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <run_project+0x24c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d10e      	bne.n	8000e3e <run_project+0x1a6>
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <run_project+0x250>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b50      	cmp	r3, #80	; 0x50
 8000e26:	dd0a      	ble.n	8000e3e <run_project+0x1a6>
				stopSong();
 8000e28:	f7ff ff1c 	bl	8000c64 <stopSong>
				button_count = 0;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <run_project+0x250>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
				listening = 0;
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <run_project+0x254>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
				button_mode = 0;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <run_project+0x24c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
			}

			if (button_pressed == 0 && button_mode == 2) {
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <run_project+0x258>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d119      	bne.n	8000e7a <run_project+0x1e2>
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <run_project+0x24c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d115      	bne.n	8000e7a <run_project+0x1e2>
				// Toggle LED and reset button states
				led_toggle = !led_toggle;
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <run_project+0x25c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf0c      	ite	eq
 8000e56:	2301      	moveq	r3, #1
 8000e58:	2300      	movne	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <run_project+0x25c>)
 8000e60:	601a      	str	r2, [r3, #0]
				led_toggler(led_toggle);
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <run_project+0x25c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff03 	bl	8000c72 <led_toggler>
				button_mode = 0;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <run_project+0x24c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
				button_pressed = 1;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <run_project+0x258>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e019      	b.n	8000eae <run_project+0x216>
			} 
			else if (button_pressed == 1 && button_mode == 2 && button_count <=40) {
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <run_project+0x258>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	f47f af1c 	bne.w	8000cbc <run_project+0x24>
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <run_project+0x24c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	f47f af17 	bne.w	8000cbc <run_project+0x24>
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <run_project+0x250>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b28      	cmp	r3, #40	; 0x28
 8000e94:	f73f af12 	bgt.w	8000cbc <run_project+0x24>
				// If button pressed and mode is 2 and button count is within limits
				nextSong(); // Assuming this function plays the next song
 8000e98:	f7ff fec0 	bl	8000c1c <nextSong>
				// printf("%d", button_count); // Print button count (for debugging?)
				button_pressed = 0;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <run_project+0x258>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
				button_mode = 0; 
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <run_project+0x24c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
				button_count = 0; // Reset button count
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <run_project+0x250>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
		if(mode == 0){ //MODE = LOCAL
 8000eae:	e705      	b.n	8000cbc <run_project+0x24>
					break;
 8000eb0:	bf00      	nop
			}
		
		}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3790      	adds	r7, #144	; 0x90
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20007bc4 	.word	0x20007bc4
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	080020c4 	.word	0x080020c4
 8000ec8:	080020cc 	.word	0x080020cc
 8000ecc:	080020d4 	.word	0x080020d4
 8000ed0:	080020dc 	.word	0x080020dc
 8000ed4:	080020e4 	.word	0x080020e4
 8000ed8:	080020ec 	.word	0x080020ec
 8000edc:	080020f4 	.word	0x080020f4
 8000ee0:	080020fc 	.word	0x080020fc
 8000ee4:	20007bd4 	.word	0x20007bd4
 8000ee8:	20007bcc 	.word	0x20007bcc
 8000eec:	20007bd0 	.word	0x20007bd0
 8000ef0:	20007bd8 	.word	0x20007bd8
 8000ef4:	20007bc0 	.word	0x20007bc0

08000ef8 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <get_song+0x2c>)
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f14:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc90      	pop	{r4, r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20007aa8 	.word	0x20007aa8

08000f28 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000f2e:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <System_Clock_Init+0x1b4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <System_Clock_Init+0x1b4>)
 8000f34:	f023 0307 	bic.w	r3, r3, #7
 8000f38:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <System_Clock_Init+0x1b4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a67      	ldr	r2, [pc, #412]	; (80010dc <System_Clock_Init+0x1b4>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000f46:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a65      	ldr	r2, [pc, #404]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000f52:	bf00      	nop
 8000f54:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f9      	beq.n	8000f54 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000f60:	2310      	movs	r3, #16
 8000f62:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000f64:	4b5e      	ldr	r3, [pc, #376]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4a5d      	ldr	r2, [pc, #372]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f6a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000f6e:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	061b      	lsls	r3, r3, #24
 8000f78:	4959      	ldr	r1, [pc, #356]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000f7e:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a57      	ldr	r2, [pc, #348]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f88:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000f8a:	bf00      	nop
 8000f8c:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f98:	d0f8      	beq.n	8000f8c <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000f9a:	4b51      	ldr	r3, [pc, #324]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a50      	ldr	r2, [pc, #320]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fa0:	f023 0303 	bic.w	r3, r3, #3
 8000fa4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000fb2:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000fba:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fbc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000fc0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fca:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000fd2:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000fdc:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4a3f      	ldr	r2, [pc, #252]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe8:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a3c      	ldr	r2, [pc, #240]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000ff6:	bf00      	nop
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <System_Clock_Init+0x1b8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f9      	beq.n	8000ff8 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <System_Clock_Init+0x1b8>)
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001016:	f043 0303 	orr.w	r3, r3, #3
 800101a:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800101c:	bf00      	nop
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d1f9      	bne.n	800101e <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <System_Clock_Init+0x1b8>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001034:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <System_Clock_Init+0x1b8>)
 800103c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001040:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001048:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800104c:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001058:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800105a:	bf00      	nop
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <System_Clock_Init+0x1b8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001068:	d0f8      	beq.n	800105c <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <System_Clock_Init+0x1b8>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001074:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <System_Clock_Init+0x1b8>)
 800107c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001080:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <System_Clock_Init+0x1b8>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <System_Clock_Init+0x1b8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010a4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 80010a6:	bf00      	nop
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f9      	beq.n	80010a8 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010bc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <System_Clock_Init+0x1b8>)
 80010ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ce:	6613      	str	r3, [r2, #96]	; 0x60
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40022000 	.word	0x40022000
 80010e0:	40021000 	.word	0x40021000

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f000 fa8e 	bl	8001634 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20018000 	.word	0x20018000
 8001144:	00000400 	.word	0x00000400
 8001148:	20007bdc 	.word	0x20007bdc
 800114c:	20007d28 	.word	0x20007d28

08001150 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <SystemInit+0x64>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <SystemInit+0x64>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <SystemInit+0x68>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <SystemInit+0x68>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <SystemInit+0x68>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <SystemInit+0x68>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <SystemInit+0x68>)
 800117c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001180:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001184:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <SystemInit+0x68>)
 8001188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800118c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <SystemInit+0x68>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <SystemInit+0x68>)
 8001194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <SystemInit+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SystemInit+0x64>)
 80011a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a6:	609a      	str	r2, [r3, #8]
#endif
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	40021000 	.word	0x40021000

080011bc <main>:
#include <stdio.h>
#include "Activity_11.h"



int main(void){
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	System_Clock_Init(); // set System Clock = 80 MHz
 80011c0:	f7ff feb2 	bl	8000f28 <System_Clock_Init>
	LED_Init(LED_PIN);
 80011c4:	2007      	movs	r0, #7
 80011c6:	f7ff f8f5 	bl	80003b4 <LED_Init>
	UART2_Init();
 80011ca:	f7ff f991 	bl	80004f0 <UART2_Init>
	// NVIC_EnableIRQ(USART2_IRQn);
	USART2_IRQHandler();
 80011ce:	f7ff fb37 	bl	8000840 <USART2_IRQHandler>
	run_project();
 80011d2:	f7ff fd61 	bl	8000c98 <run_project>
 80011d6:	2300      	movs	r3, #0
	// LED_Toggle(LED_PIN);
	// LED_Off(LED_PIN);
	// run_demo();
	// read_bytes();
	// readlines();
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ffb6 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f000 fa19 	bl	8001640 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff ffd5 	bl	80011bc <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20007b20 	.word	0x20007b20
  ldr r2, =_sidata
 8001220:	08002148 	.word	0x08002148
  ldr r2, =_sbss
 8001224:	20007b20 	.word	0x20007b20
  ldr r4, =_ebss
 8001228:	20007d28 	.word	0x20007d28

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e17f      	b.n	8001540 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8171 	beq.w	800153a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 0201 	and.w	r2, r3, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d118      	bne.n	8001310 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012e4:	2201      	movs	r2, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	f003 0201 	and.w	r2, r3, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b03      	cmp	r3, #3
 800131a:	d017      	beq.n	800134c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d123      	bne.n	80013a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80ac 	beq.w	800153a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_GPIO_Init+0x330>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fa:	4a5a      	ldr	r2, [pc, #360]	; (8001564 <HAL_GPIO_Init+0x334>)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x242>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4f      	ldr	r2, [pc, #316]	; (8001568 <HAL_GPIO_Init+0x338>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x23e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_GPIO_Init+0x33c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x23a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <HAL_GPIO_Init+0x340>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x236>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_GPIO_Init+0x344>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x232>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	; (8001578 <HAL_GPIO_Init+0x348>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x22e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4a      	ldr	r2, [pc, #296]	; (800157c <HAL_GPIO_Init+0x34c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x22a>
 8001456:	2306      	movs	r3, #6
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800145a:	2307      	movs	r3, #7
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x244>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x244>
 8001472:	2300      	movs	r3, #0
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001484:	4937      	ldr	r1, [pc, #220]	; (8001564 <HAL_GPIO_Init+0x334>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b6:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_GPIO_Init+0x350>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_GPIO_Init+0x350>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <HAL_GPIO_Init+0x350>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	f47f ae78 	bne.w	8001240 <HAL_GPIO_Init+0x10>
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	48001400 	.word	0x48001400
 800157c:	48001800 	.word	0x48001800
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e001      	b.n	80015a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <siprintf>:
 80015b4:	b40e      	push	{r1, r2, r3}
 80015b6:	b500      	push	{lr}
 80015b8:	b09c      	sub	sp, #112	; 0x70
 80015ba:	ab1d      	add	r3, sp, #116	; 0x74
 80015bc:	9002      	str	r0, [sp, #8]
 80015be:	9006      	str	r0, [sp, #24]
 80015c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <siprintf+0x38>)
 80015c6:	9107      	str	r1, [sp, #28]
 80015c8:	9104      	str	r1, [sp, #16]
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <siprintf+0x3c>)
 80015cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80015d0:	9105      	str	r1, [sp, #20]
 80015d2:	6800      	ldr	r0, [r0, #0]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	a902      	add	r1, sp, #8
 80015d8:	f000 f8b2 	bl	8001740 <_svfiprintf_r>
 80015dc:	9b02      	ldr	r3, [sp, #8]
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	b01c      	add	sp, #112	; 0x70
 80015e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80015e8:	b003      	add	sp, #12
 80015ea:	4770      	bx	lr
 80015ec:	20007b1c 	.word	0x20007b1c
 80015f0:	ffff0208 	.word	0xffff0208

080015f4 <_vsiprintf_r>:
 80015f4:	b500      	push	{lr}
 80015f6:	b09b      	sub	sp, #108	; 0x6c
 80015f8:	9100      	str	r1, [sp, #0]
 80015fa:	9104      	str	r1, [sp, #16]
 80015fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001600:	9105      	str	r1, [sp, #20]
 8001602:	9102      	str	r1, [sp, #8]
 8001604:	4905      	ldr	r1, [pc, #20]	; (800161c <_vsiprintf_r+0x28>)
 8001606:	9103      	str	r1, [sp, #12]
 8001608:	4669      	mov	r1, sp
 800160a:	f000 f899 	bl	8001740 <_svfiprintf_r>
 800160e:	9b00      	ldr	r3, [sp, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	b01b      	add	sp, #108	; 0x6c
 8001616:	f85d fb04 	ldr.w	pc, [sp], #4
 800161a:	bf00      	nop
 800161c:	ffff0208 	.word	0xffff0208

08001620 <vsiprintf>:
 8001620:	4613      	mov	r3, r2
 8001622:	460a      	mov	r2, r1
 8001624:	4601      	mov	r1, r0
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <vsiprintf+0x10>)
 8001628:	6800      	ldr	r0, [r0, #0]
 800162a:	f7ff bfe3 	b.w	80015f4 <_vsiprintf_r>
 800162e:	bf00      	nop
 8001630:	20007b1c 	.word	0x20007b1c

08001634 <__errno>:
 8001634:	4b01      	ldr	r3, [pc, #4]	; (800163c <__errno+0x8>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20007b1c 	.word	0x20007b1c

08001640 <__libc_init_array>:
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	4d0d      	ldr	r5, [pc, #52]	; (8001678 <__libc_init_array+0x38>)
 8001644:	4c0d      	ldr	r4, [pc, #52]	; (800167c <__libc_init_array+0x3c>)
 8001646:	1b64      	subs	r4, r4, r5
 8001648:	10a4      	asrs	r4, r4, #2
 800164a:	2600      	movs	r6, #0
 800164c:	42a6      	cmp	r6, r4
 800164e:	d109      	bne.n	8001664 <__libc_init_array+0x24>
 8001650:	4d0b      	ldr	r5, [pc, #44]	; (8001680 <__libc_init_array+0x40>)
 8001652:	4c0c      	ldr	r4, [pc, #48]	; (8001684 <__libc_init_array+0x44>)
 8001654:	f000 fc6a 	bl	8001f2c <_init>
 8001658:	1b64      	subs	r4, r4, r5
 800165a:	10a4      	asrs	r4, r4, #2
 800165c:	2600      	movs	r6, #0
 800165e:	42a6      	cmp	r6, r4
 8001660:	d105      	bne.n	800166e <__libc_init_array+0x2e>
 8001662:	bd70      	pop	{r4, r5, r6, pc}
 8001664:	f855 3b04 	ldr.w	r3, [r5], #4
 8001668:	4798      	blx	r3
 800166a:	3601      	adds	r6, #1
 800166c:	e7ee      	b.n	800164c <__libc_init_array+0xc>
 800166e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001672:	4798      	blx	r3
 8001674:	3601      	adds	r6, #1
 8001676:	e7f2      	b.n	800165e <__libc_init_array+0x1e>
 8001678:	08002140 	.word	0x08002140
 800167c:	08002140 	.word	0x08002140
 8001680:	08002140 	.word	0x08002140
 8001684:	08002144 	.word	0x08002144

08001688 <__retarget_lock_acquire_recursive>:
 8001688:	4770      	bx	lr

0800168a <__retarget_lock_release_recursive>:
 800168a:	4770      	bx	lr

0800168c <__ssputs_r>:
 800168c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001690:	688e      	ldr	r6, [r1, #8]
 8001692:	461f      	mov	r7, r3
 8001694:	42be      	cmp	r6, r7
 8001696:	680b      	ldr	r3, [r1, #0]
 8001698:	4682      	mov	sl, r0
 800169a:	460c      	mov	r4, r1
 800169c:	4690      	mov	r8, r2
 800169e:	d82c      	bhi.n	80016fa <__ssputs_r+0x6e>
 80016a0:	898a      	ldrh	r2, [r1, #12]
 80016a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80016a6:	d026      	beq.n	80016f6 <__ssputs_r+0x6a>
 80016a8:	6965      	ldr	r5, [r4, #20]
 80016aa:	6909      	ldr	r1, [r1, #16]
 80016ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80016b0:	eba3 0901 	sub.w	r9, r3, r1
 80016b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80016b8:	1c7b      	adds	r3, r7, #1
 80016ba:	444b      	add	r3, r9
 80016bc:	106d      	asrs	r5, r5, #1
 80016be:	429d      	cmp	r5, r3
 80016c0:	bf38      	it	cc
 80016c2:	461d      	movcc	r5, r3
 80016c4:	0553      	lsls	r3, r2, #21
 80016c6:	d527      	bpl.n	8001718 <__ssputs_r+0x8c>
 80016c8:	4629      	mov	r1, r5
 80016ca:	f000 f957 	bl	800197c <_malloc_r>
 80016ce:	4606      	mov	r6, r0
 80016d0:	b360      	cbz	r0, 800172c <__ssputs_r+0xa0>
 80016d2:	6921      	ldr	r1, [r4, #16]
 80016d4:	464a      	mov	r2, r9
 80016d6:	f000 fbc7 	bl	8001e68 <memcpy>
 80016da:	89a3      	ldrh	r3, [r4, #12]
 80016dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	6126      	str	r6, [r4, #16]
 80016e8:	6165      	str	r5, [r4, #20]
 80016ea:	444e      	add	r6, r9
 80016ec:	eba5 0509 	sub.w	r5, r5, r9
 80016f0:	6026      	str	r6, [r4, #0]
 80016f2:	60a5      	str	r5, [r4, #8]
 80016f4:	463e      	mov	r6, r7
 80016f6:	42be      	cmp	r6, r7
 80016f8:	d900      	bls.n	80016fc <__ssputs_r+0x70>
 80016fa:	463e      	mov	r6, r7
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	4632      	mov	r2, r6
 8001700:	4641      	mov	r1, r8
 8001702:	f000 fb86 	bl	8001e12 <memmove>
 8001706:	68a3      	ldr	r3, [r4, #8]
 8001708:	1b9b      	subs	r3, r3, r6
 800170a:	60a3      	str	r3, [r4, #8]
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	4433      	add	r3, r6
 8001710:	6023      	str	r3, [r4, #0]
 8001712:	2000      	movs	r0, #0
 8001714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001718:	462a      	mov	r2, r5
 800171a:	f000 fb4b 	bl	8001db4 <_realloc_r>
 800171e:	4606      	mov	r6, r0
 8001720:	2800      	cmp	r0, #0
 8001722:	d1e0      	bne.n	80016e6 <__ssputs_r+0x5a>
 8001724:	6921      	ldr	r1, [r4, #16]
 8001726:	4650      	mov	r0, sl
 8001728:	f000 fbac 	bl	8001e84 <_free_r>
 800172c:	230c      	movs	r3, #12
 800172e:	f8ca 3000 	str.w	r3, [sl]
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173e:	e7e9      	b.n	8001714 <__ssputs_r+0x88>

08001740 <_svfiprintf_r>:
 8001740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001744:	4698      	mov	r8, r3
 8001746:	898b      	ldrh	r3, [r1, #12]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	b09d      	sub	sp, #116	; 0x74
 800174c:	4607      	mov	r7, r0
 800174e:	460d      	mov	r5, r1
 8001750:	4614      	mov	r4, r2
 8001752:	d50e      	bpl.n	8001772 <_svfiprintf_r+0x32>
 8001754:	690b      	ldr	r3, [r1, #16]
 8001756:	b963      	cbnz	r3, 8001772 <_svfiprintf_r+0x32>
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	f000 f90f 	bl	800197c <_malloc_r>
 800175e:	6028      	str	r0, [r5, #0]
 8001760:	6128      	str	r0, [r5, #16]
 8001762:	b920      	cbnz	r0, 800176e <_svfiprintf_r+0x2e>
 8001764:	230c      	movs	r3, #12
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800176c:	e0d0      	b.n	8001910 <_svfiprintf_r+0x1d0>
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	616b      	str	r3, [r5, #20]
 8001772:	2300      	movs	r3, #0
 8001774:	9309      	str	r3, [sp, #36]	; 0x24
 8001776:	2320      	movs	r3, #32
 8001778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800177c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001780:	2330      	movs	r3, #48	; 0x30
 8001782:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001928 <_svfiprintf_r+0x1e8>
 8001786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800178a:	f04f 0901 	mov.w	r9, #1
 800178e:	4623      	mov	r3, r4
 8001790:	469a      	mov	sl, r3
 8001792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001796:	b10a      	cbz	r2, 800179c <_svfiprintf_r+0x5c>
 8001798:	2a25      	cmp	r2, #37	; 0x25
 800179a:	d1f9      	bne.n	8001790 <_svfiprintf_r+0x50>
 800179c:	ebba 0b04 	subs.w	fp, sl, r4
 80017a0:	d00b      	beq.n	80017ba <_svfiprintf_r+0x7a>
 80017a2:	465b      	mov	r3, fp
 80017a4:	4622      	mov	r2, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	4638      	mov	r0, r7
 80017aa:	f7ff ff6f 	bl	800168c <__ssputs_r>
 80017ae:	3001      	adds	r0, #1
 80017b0:	f000 80a9 	beq.w	8001906 <_svfiprintf_r+0x1c6>
 80017b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017b6:	445a      	add	r2, fp
 80017b8:	9209      	str	r2, [sp, #36]	; 0x24
 80017ba:	f89a 3000 	ldrb.w	r3, [sl]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80a1 	beq.w	8001906 <_svfiprintf_r+0x1c6>
 80017c4:	2300      	movs	r3, #0
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017ce:	f10a 0a01 	add.w	sl, sl, #1
 80017d2:	9304      	str	r3, [sp, #16]
 80017d4:	9307      	str	r3, [sp, #28]
 80017d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017da:	931a      	str	r3, [sp, #104]	; 0x68
 80017dc:	4654      	mov	r4, sl
 80017de:	2205      	movs	r2, #5
 80017e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017e4:	4850      	ldr	r0, [pc, #320]	; (8001928 <_svfiprintf_r+0x1e8>)
 80017e6:	f7fe fd03 	bl	80001f0 <memchr>
 80017ea:	9a04      	ldr	r2, [sp, #16]
 80017ec:	b9d8      	cbnz	r0, 8001826 <_svfiprintf_r+0xe6>
 80017ee:	06d0      	lsls	r0, r2, #27
 80017f0:	bf44      	itt	mi
 80017f2:	2320      	movmi	r3, #32
 80017f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017f8:	0711      	lsls	r1, r2, #28
 80017fa:	bf44      	itt	mi
 80017fc:	232b      	movmi	r3, #43	; 0x2b
 80017fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001802:	f89a 3000 	ldrb.w	r3, [sl]
 8001806:	2b2a      	cmp	r3, #42	; 0x2a
 8001808:	d015      	beq.n	8001836 <_svfiprintf_r+0xf6>
 800180a:	9a07      	ldr	r2, [sp, #28]
 800180c:	4654      	mov	r4, sl
 800180e:	2000      	movs	r0, #0
 8001810:	f04f 0c0a 	mov.w	ip, #10
 8001814:	4621      	mov	r1, r4
 8001816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800181a:	3b30      	subs	r3, #48	; 0x30
 800181c:	2b09      	cmp	r3, #9
 800181e:	d94d      	bls.n	80018bc <_svfiprintf_r+0x17c>
 8001820:	b1b0      	cbz	r0, 8001850 <_svfiprintf_r+0x110>
 8001822:	9207      	str	r2, [sp, #28]
 8001824:	e014      	b.n	8001850 <_svfiprintf_r+0x110>
 8001826:	eba0 0308 	sub.w	r3, r0, r8
 800182a:	fa09 f303 	lsl.w	r3, r9, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	9304      	str	r3, [sp, #16]
 8001832:	46a2      	mov	sl, r4
 8001834:	e7d2      	b.n	80017dc <_svfiprintf_r+0x9c>
 8001836:	9b03      	ldr	r3, [sp, #12]
 8001838:	1d19      	adds	r1, r3, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	9103      	str	r1, [sp, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	bfbb      	ittet	lt
 8001842:	425b      	neglt	r3, r3
 8001844:	f042 0202 	orrlt.w	r2, r2, #2
 8001848:	9307      	strge	r3, [sp, #28]
 800184a:	9307      	strlt	r3, [sp, #28]
 800184c:	bfb8      	it	lt
 800184e:	9204      	strlt	r2, [sp, #16]
 8001850:	7823      	ldrb	r3, [r4, #0]
 8001852:	2b2e      	cmp	r3, #46	; 0x2e
 8001854:	d10c      	bne.n	8001870 <_svfiprintf_r+0x130>
 8001856:	7863      	ldrb	r3, [r4, #1]
 8001858:	2b2a      	cmp	r3, #42	; 0x2a
 800185a:	d134      	bne.n	80018c6 <_svfiprintf_r+0x186>
 800185c:	9b03      	ldr	r3, [sp, #12]
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	9203      	str	r2, [sp, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	bfb8      	it	lt
 8001868:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800186c:	3402      	adds	r4, #2
 800186e:	9305      	str	r3, [sp, #20]
 8001870:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001938 <_svfiprintf_r+0x1f8>
 8001874:	7821      	ldrb	r1, [r4, #0]
 8001876:	2203      	movs	r2, #3
 8001878:	4650      	mov	r0, sl
 800187a:	f7fe fcb9 	bl	80001f0 <memchr>
 800187e:	b138      	cbz	r0, 8001890 <_svfiprintf_r+0x150>
 8001880:	9b04      	ldr	r3, [sp, #16]
 8001882:	eba0 000a 	sub.w	r0, r0, sl
 8001886:	2240      	movs	r2, #64	; 0x40
 8001888:	4082      	lsls	r2, r0
 800188a:	4313      	orrs	r3, r2
 800188c:	3401      	adds	r4, #1
 800188e:	9304      	str	r3, [sp, #16]
 8001890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001894:	4825      	ldr	r0, [pc, #148]	; (800192c <_svfiprintf_r+0x1ec>)
 8001896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800189a:	2206      	movs	r2, #6
 800189c:	f7fe fca8 	bl	80001f0 <memchr>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d038      	beq.n	8001916 <_svfiprintf_r+0x1d6>
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <_svfiprintf_r+0x1f0>)
 80018a6:	bb1b      	cbnz	r3, 80018f0 <_svfiprintf_r+0x1b0>
 80018a8:	9b03      	ldr	r3, [sp, #12]
 80018aa:	3307      	adds	r3, #7
 80018ac:	f023 0307 	bic.w	r3, r3, #7
 80018b0:	3308      	adds	r3, #8
 80018b2:	9303      	str	r3, [sp, #12]
 80018b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018b6:	4433      	add	r3, r6
 80018b8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ba:	e768      	b.n	800178e <_svfiprintf_r+0x4e>
 80018bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80018c0:	460c      	mov	r4, r1
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7a6      	b.n	8001814 <_svfiprintf_r+0xd4>
 80018c6:	2300      	movs	r3, #0
 80018c8:	3401      	adds	r4, #1
 80018ca:	9305      	str	r3, [sp, #20]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 0c0a 	mov.w	ip, #10
 80018d2:	4620      	mov	r0, r4
 80018d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018d8:	3a30      	subs	r2, #48	; 0x30
 80018da:	2a09      	cmp	r2, #9
 80018dc:	d903      	bls.n	80018e6 <_svfiprintf_r+0x1a6>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0c6      	beq.n	8001870 <_svfiprintf_r+0x130>
 80018e2:	9105      	str	r1, [sp, #20]
 80018e4:	e7c4      	b.n	8001870 <_svfiprintf_r+0x130>
 80018e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80018ea:	4604      	mov	r4, r0
 80018ec:	2301      	movs	r3, #1
 80018ee:	e7f0      	b.n	80018d2 <_svfiprintf_r+0x192>
 80018f0:	ab03      	add	r3, sp, #12
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	462a      	mov	r2, r5
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <_svfiprintf_r+0x1f4>)
 80018f8:	a904      	add	r1, sp, #16
 80018fa:	4638      	mov	r0, r7
 80018fc:	f3af 8000 	nop.w
 8001900:	1c42      	adds	r2, r0, #1
 8001902:	4606      	mov	r6, r0
 8001904:	d1d6      	bne.n	80018b4 <_svfiprintf_r+0x174>
 8001906:	89ab      	ldrh	r3, [r5, #12]
 8001908:	065b      	lsls	r3, r3, #25
 800190a:	f53f af2d 	bmi.w	8001768 <_svfiprintf_r+0x28>
 800190e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001910:	b01d      	add	sp, #116	; 0x74
 8001912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001916:	ab03      	add	r3, sp, #12
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	462a      	mov	r2, r5
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <_svfiprintf_r+0x1f4>)
 800191e:	a904      	add	r1, sp, #16
 8001920:	4638      	mov	r0, r7
 8001922:	f000 f919 	bl	8001b58 <_printf_i>
 8001926:	e7eb      	b.n	8001900 <_svfiprintf_r+0x1c0>
 8001928:	0800210d 	.word	0x0800210d
 800192c:	08002117 	.word	0x08002117
 8001930:	00000000 	.word	0x00000000
 8001934:	0800168d 	.word	0x0800168d
 8001938:	08002113 	.word	0x08002113

0800193c <sbrk_aligned>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	4e0e      	ldr	r6, [pc, #56]	; (8001978 <sbrk_aligned+0x3c>)
 8001940:	460c      	mov	r4, r1
 8001942:	6831      	ldr	r1, [r6, #0]
 8001944:	4605      	mov	r5, r0
 8001946:	b911      	cbnz	r1, 800194e <sbrk_aligned+0x12>
 8001948:	f000 fa7e 	bl	8001e48 <_sbrk_r>
 800194c:	6030      	str	r0, [r6, #0]
 800194e:	4621      	mov	r1, r4
 8001950:	4628      	mov	r0, r5
 8001952:	f000 fa79 	bl	8001e48 <_sbrk_r>
 8001956:	1c43      	adds	r3, r0, #1
 8001958:	d00a      	beq.n	8001970 <sbrk_aligned+0x34>
 800195a:	1cc4      	adds	r4, r0, #3
 800195c:	f024 0403 	bic.w	r4, r4, #3
 8001960:	42a0      	cmp	r0, r4
 8001962:	d007      	beq.n	8001974 <sbrk_aligned+0x38>
 8001964:	1a21      	subs	r1, r4, r0
 8001966:	4628      	mov	r0, r5
 8001968:	f000 fa6e 	bl	8001e48 <_sbrk_r>
 800196c:	3001      	adds	r0, #1
 800196e:	d101      	bne.n	8001974 <sbrk_aligned+0x38>
 8001970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001974:	4620      	mov	r0, r4
 8001976:	bd70      	pop	{r4, r5, r6, pc}
 8001978:	20007d20 	.word	0x20007d20

0800197c <_malloc_r>:
 800197c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001980:	1ccd      	adds	r5, r1, #3
 8001982:	f025 0503 	bic.w	r5, r5, #3
 8001986:	3508      	adds	r5, #8
 8001988:	2d0c      	cmp	r5, #12
 800198a:	bf38      	it	cc
 800198c:	250c      	movcc	r5, #12
 800198e:	2d00      	cmp	r5, #0
 8001990:	4607      	mov	r7, r0
 8001992:	db01      	blt.n	8001998 <_malloc_r+0x1c>
 8001994:	42a9      	cmp	r1, r5
 8001996:	d905      	bls.n	80019a4 <_malloc_r+0x28>
 8001998:	230c      	movs	r3, #12
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	2600      	movs	r6, #0
 800199e:	4630      	mov	r0, r6
 80019a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001a78 <_malloc_r+0xfc>
 80019a8:	f000 f9f8 	bl	8001d9c <__malloc_lock>
 80019ac:	f8d8 3000 	ldr.w	r3, [r8]
 80019b0:	461c      	mov	r4, r3
 80019b2:	bb5c      	cbnz	r4, 8001a0c <_malloc_r+0x90>
 80019b4:	4629      	mov	r1, r5
 80019b6:	4638      	mov	r0, r7
 80019b8:	f7ff ffc0 	bl	800193c <sbrk_aligned>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	4604      	mov	r4, r0
 80019c0:	d155      	bne.n	8001a6e <_malloc_r+0xf2>
 80019c2:	f8d8 4000 	ldr.w	r4, [r8]
 80019c6:	4626      	mov	r6, r4
 80019c8:	2e00      	cmp	r6, #0
 80019ca:	d145      	bne.n	8001a58 <_malloc_r+0xdc>
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d048      	beq.n	8001a62 <_malloc_r+0xe6>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	4631      	mov	r1, r6
 80019d4:	4638      	mov	r0, r7
 80019d6:	eb04 0903 	add.w	r9, r4, r3
 80019da:	f000 fa35 	bl	8001e48 <_sbrk_r>
 80019de:	4581      	cmp	r9, r0
 80019e0:	d13f      	bne.n	8001a62 <_malloc_r+0xe6>
 80019e2:	6821      	ldr	r1, [r4, #0]
 80019e4:	1a6d      	subs	r5, r5, r1
 80019e6:	4629      	mov	r1, r5
 80019e8:	4638      	mov	r0, r7
 80019ea:	f7ff ffa7 	bl	800193c <sbrk_aligned>
 80019ee:	3001      	adds	r0, #1
 80019f0:	d037      	beq.n	8001a62 <_malloc_r+0xe6>
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	442b      	add	r3, r5
 80019f6:	6023      	str	r3, [r4, #0]
 80019f8:	f8d8 3000 	ldr.w	r3, [r8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d038      	beq.n	8001a72 <_malloc_r+0xf6>
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	42a2      	cmp	r2, r4
 8001a04:	d12b      	bne.n	8001a5e <_malloc_r+0xe2>
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	e00f      	b.n	8001a2c <_malloc_r+0xb0>
 8001a0c:	6822      	ldr	r2, [r4, #0]
 8001a0e:	1b52      	subs	r2, r2, r5
 8001a10:	d41f      	bmi.n	8001a52 <_malloc_r+0xd6>
 8001a12:	2a0b      	cmp	r2, #11
 8001a14:	d917      	bls.n	8001a46 <_malloc_r+0xca>
 8001a16:	1961      	adds	r1, r4, r5
 8001a18:	42a3      	cmp	r3, r4
 8001a1a:	6025      	str	r5, [r4, #0]
 8001a1c:	bf18      	it	ne
 8001a1e:	6059      	strne	r1, [r3, #4]
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	bf08      	it	eq
 8001a24:	f8c8 1000 	streq.w	r1, [r8]
 8001a28:	5162      	str	r2, [r4, r5]
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	f104 060b 	add.w	r6, r4, #11
 8001a32:	f000 f9b9 	bl	8001da8 <__malloc_unlock>
 8001a36:	f026 0607 	bic.w	r6, r6, #7
 8001a3a:	1d23      	adds	r3, r4, #4
 8001a3c:	1af2      	subs	r2, r6, r3
 8001a3e:	d0ae      	beq.n	800199e <_malloc_r+0x22>
 8001a40:	1b9b      	subs	r3, r3, r6
 8001a42:	50a3      	str	r3, [r4, r2]
 8001a44:	e7ab      	b.n	800199e <_malloc_r+0x22>
 8001a46:	42a3      	cmp	r3, r4
 8001a48:	6862      	ldr	r2, [r4, #4]
 8001a4a:	d1dd      	bne.n	8001a08 <_malloc_r+0x8c>
 8001a4c:	f8c8 2000 	str.w	r2, [r8]
 8001a50:	e7ec      	b.n	8001a2c <_malloc_r+0xb0>
 8001a52:	4623      	mov	r3, r4
 8001a54:	6864      	ldr	r4, [r4, #4]
 8001a56:	e7ac      	b.n	80019b2 <_malloc_r+0x36>
 8001a58:	4634      	mov	r4, r6
 8001a5a:	6876      	ldr	r6, [r6, #4]
 8001a5c:	e7b4      	b.n	80019c8 <_malloc_r+0x4c>
 8001a5e:	4613      	mov	r3, r2
 8001a60:	e7cc      	b.n	80019fc <_malloc_r+0x80>
 8001a62:	230c      	movs	r3, #12
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4638      	mov	r0, r7
 8001a68:	f000 f99e 	bl	8001da8 <__malloc_unlock>
 8001a6c:	e797      	b.n	800199e <_malloc_r+0x22>
 8001a6e:	6025      	str	r5, [r4, #0]
 8001a70:	e7dc      	b.n	8001a2c <_malloc_r+0xb0>
 8001a72:	605b      	str	r3, [r3, #4]
 8001a74:	deff      	udf	#255	; 0xff
 8001a76:	bf00      	nop
 8001a78:	20007d1c 	.word	0x20007d1c

08001a7c <_printf_common>:
 8001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a80:	4616      	mov	r6, r2
 8001a82:	4699      	mov	r9, r3
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	690b      	ldr	r3, [r1, #16]
 8001a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bfb8      	it	lt
 8001a90:	4613      	movlt	r3, r2
 8001a92:	6033      	str	r3, [r6, #0]
 8001a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a98:	4607      	mov	r7, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	b10a      	cbz	r2, 8001aa2 <_printf_common+0x26>
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6033      	str	r3, [r6, #0]
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	0699      	lsls	r1, r3, #26
 8001aa6:	bf42      	ittt	mi
 8001aa8:	6833      	ldrmi	r3, [r6, #0]
 8001aaa:	3302      	addmi	r3, #2
 8001aac:	6033      	strmi	r3, [r6, #0]
 8001aae:	6825      	ldr	r5, [r4, #0]
 8001ab0:	f015 0506 	ands.w	r5, r5, #6
 8001ab4:	d106      	bne.n	8001ac4 <_printf_common+0x48>
 8001ab6:	f104 0a19 	add.w	sl, r4, #25
 8001aba:	68e3      	ldr	r3, [r4, #12]
 8001abc:	6832      	ldr	r2, [r6, #0]
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	42ab      	cmp	r3, r5
 8001ac2:	dc26      	bgt.n	8001b12 <_printf_common+0x96>
 8001ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ac8:	1e13      	subs	r3, r2, #0
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	bf18      	it	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	0692      	lsls	r2, r2, #26
 8001ad2:	d42b      	bmi.n	8001b2c <_printf_common+0xb0>
 8001ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ad8:	4649      	mov	r1, r9
 8001ada:	4638      	mov	r0, r7
 8001adc:	47c0      	blx	r8
 8001ade:	3001      	adds	r0, #1
 8001ae0:	d01e      	beq.n	8001b20 <_printf_common+0xa4>
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	6922      	ldr	r2, [r4, #16]
 8001ae6:	f003 0306 	and.w	r3, r3, #6
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf02      	ittt	eq
 8001aee:	68e5      	ldreq	r5, [r4, #12]
 8001af0:	6833      	ldreq	r3, [r6, #0]
 8001af2:	1aed      	subeq	r5, r5, r3
 8001af4:	68a3      	ldr	r3, [r4, #8]
 8001af6:	bf0c      	ite	eq
 8001af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001afc:	2500      	movne	r5, #0
 8001afe:	4293      	cmp	r3, r2
 8001b00:	bfc4      	itt	gt
 8001b02:	1a9b      	subgt	r3, r3, r2
 8001b04:	18ed      	addgt	r5, r5, r3
 8001b06:	2600      	movs	r6, #0
 8001b08:	341a      	adds	r4, #26
 8001b0a:	42b5      	cmp	r5, r6
 8001b0c:	d11a      	bne.n	8001b44 <_printf_common+0xc8>
 8001b0e:	2000      	movs	r0, #0
 8001b10:	e008      	b.n	8001b24 <_printf_common+0xa8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	4652      	mov	r2, sl
 8001b16:	4649      	mov	r1, r9
 8001b18:	4638      	mov	r0, r7
 8001b1a:	47c0      	blx	r8
 8001b1c:	3001      	adds	r0, #1
 8001b1e:	d103      	bne.n	8001b28 <_printf_common+0xac>
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b28:	3501      	adds	r5, #1
 8001b2a:	e7c6      	b.n	8001aba <_printf_common+0x3e>
 8001b2c:	18e1      	adds	r1, r4, r3
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	2030      	movs	r0, #48	; 0x30
 8001b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b36:	4422      	add	r2, r4
 8001b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b40:	3302      	adds	r3, #2
 8001b42:	e7c7      	b.n	8001ad4 <_printf_common+0x58>
 8001b44:	2301      	movs	r3, #1
 8001b46:	4622      	mov	r2, r4
 8001b48:	4649      	mov	r1, r9
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	47c0      	blx	r8
 8001b4e:	3001      	adds	r0, #1
 8001b50:	d0e6      	beq.n	8001b20 <_printf_common+0xa4>
 8001b52:	3601      	adds	r6, #1
 8001b54:	e7d9      	b.n	8001b0a <_printf_common+0x8e>
	...

08001b58 <_printf_i>:
 8001b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b5c:	7e0f      	ldrb	r7, [r1, #24]
 8001b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b60:	2f78      	cmp	r7, #120	; 0x78
 8001b62:	4691      	mov	r9, r2
 8001b64:	4680      	mov	r8, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	469a      	mov	sl, r3
 8001b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b6e:	d807      	bhi.n	8001b80 <_printf_i+0x28>
 8001b70:	2f62      	cmp	r7, #98	; 0x62
 8001b72:	d80a      	bhi.n	8001b8a <_printf_i+0x32>
 8001b74:	2f00      	cmp	r7, #0
 8001b76:	f000 80d4 	beq.w	8001d22 <_printf_i+0x1ca>
 8001b7a:	2f58      	cmp	r7, #88	; 0x58
 8001b7c:	f000 80c0 	beq.w	8001d00 <_printf_i+0x1a8>
 8001b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b88:	e03a      	b.n	8001c00 <_printf_i+0xa8>
 8001b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b8e:	2b15      	cmp	r3, #21
 8001b90:	d8f6      	bhi.n	8001b80 <_printf_i+0x28>
 8001b92:	a101      	add	r1, pc, #4	; (adr r1, 8001b98 <_printf_i+0x40>)
 8001b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b98:	08001bf1 	.word	0x08001bf1
 8001b9c:	08001c05 	.word	0x08001c05
 8001ba0:	08001b81 	.word	0x08001b81
 8001ba4:	08001b81 	.word	0x08001b81
 8001ba8:	08001b81 	.word	0x08001b81
 8001bac:	08001b81 	.word	0x08001b81
 8001bb0:	08001c05 	.word	0x08001c05
 8001bb4:	08001b81 	.word	0x08001b81
 8001bb8:	08001b81 	.word	0x08001b81
 8001bbc:	08001b81 	.word	0x08001b81
 8001bc0:	08001b81 	.word	0x08001b81
 8001bc4:	08001d09 	.word	0x08001d09
 8001bc8:	08001c31 	.word	0x08001c31
 8001bcc:	08001cc3 	.word	0x08001cc3
 8001bd0:	08001b81 	.word	0x08001b81
 8001bd4:	08001b81 	.word	0x08001b81
 8001bd8:	08001d2b 	.word	0x08001d2b
 8001bdc:	08001b81 	.word	0x08001b81
 8001be0:	08001c31 	.word	0x08001c31
 8001be4:	08001b81 	.word	0x08001b81
 8001be8:	08001b81 	.word	0x08001b81
 8001bec:	08001ccb 	.word	0x08001ccb
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	602a      	str	r2, [r5, #0]
 8001bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c00:	2301      	movs	r3, #1
 8001c02:	e09f      	b.n	8001d44 <_printf_i+0x1ec>
 8001c04:	6820      	ldr	r0, [r4, #0]
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	0607      	lsls	r7, r0, #24
 8001c0a:	f103 0104 	add.w	r1, r3, #4
 8001c0e:	6029      	str	r1, [r5, #0]
 8001c10:	d501      	bpl.n	8001c16 <_printf_i+0xbe>
 8001c12:	681e      	ldr	r6, [r3, #0]
 8001c14:	e003      	b.n	8001c1e <_printf_i+0xc6>
 8001c16:	0646      	lsls	r6, r0, #25
 8001c18:	d5fb      	bpl.n	8001c12 <_printf_i+0xba>
 8001c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	da03      	bge.n	8001c2a <_printf_i+0xd2>
 8001c22:	232d      	movs	r3, #45	; 0x2d
 8001c24:	4276      	negs	r6, r6
 8001c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c2a:	485a      	ldr	r0, [pc, #360]	; (8001d94 <_printf_i+0x23c>)
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	e012      	b.n	8001c56 <_printf_i+0xfe>
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	1d19      	adds	r1, r3, #4
 8001c36:	6029      	str	r1, [r5, #0]
 8001c38:	0605      	lsls	r5, r0, #24
 8001c3a:	d501      	bpl.n	8001c40 <_printf_i+0xe8>
 8001c3c:	681e      	ldr	r6, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <_printf_i+0xee>
 8001c40:	0641      	lsls	r1, r0, #25
 8001c42:	d5fb      	bpl.n	8001c3c <_printf_i+0xe4>
 8001c44:	881e      	ldrh	r6, [r3, #0]
 8001c46:	4853      	ldr	r0, [pc, #332]	; (8001d94 <_printf_i+0x23c>)
 8001c48:	2f6f      	cmp	r7, #111	; 0x6f
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2308      	moveq	r3, #8
 8001c4e:	230a      	movne	r3, #10
 8001c50:	2100      	movs	r1, #0
 8001c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c56:	6865      	ldr	r5, [r4, #4]
 8001c58:	60a5      	str	r5, [r4, #8]
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	bfa2      	ittt	ge
 8001c5e:	6821      	ldrge	r1, [r4, #0]
 8001c60:	f021 0104 	bicge.w	r1, r1, #4
 8001c64:	6021      	strge	r1, [r4, #0]
 8001c66:	b90e      	cbnz	r6, 8001c6c <_printf_i+0x114>
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	d04b      	beq.n	8001d04 <_printf_i+0x1ac>
 8001c6c:	4615      	mov	r5, r2
 8001c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c72:	fb03 6711 	mls	r7, r3, r1, r6
 8001c76:	5dc7      	ldrb	r7, [r0, r7]
 8001c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c7c:	4637      	mov	r7, r6
 8001c7e:	42bb      	cmp	r3, r7
 8001c80:	460e      	mov	r6, r1
 8001c82:	d9f4      	bls.n	8001c6e <_printf_i+0x116>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d10b      	bne.n	8001ca0 <_printf_i+0x148>
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	07de      	lsls	r6, r3, #31
 8001c8c:	d508      	bpl.n	8001ca0 <_printf_i+0x148>
 8001c8e:	6923      	ldr	r3, [r4, #16]
 8001c90:	6861      	ldr	r1, [r4, #4]
 8001c92:	4299      	cmp	r1, r3
 8001c94:	bfde      	ittt	le
 8001c96:	2330      	movle	r3, #48	; 0x30
 8001c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ca0:	1b52      	subs	r2, r2, r5
 8001ca2:	6122      	str	r2, [r4, #16]
 8001ca4:	f8cd a000 	str.w	sl, [sp]
 8001ca8:	464b      	mov	r3, r9
 8001caa:	aa03      	add	r2, sp, #12
 8001cac:	4621      	mov	r1, r4
 8001cae:	4640      	mov	r0, r8
 8001cb0:	f7ff fee4 	bl	8001a7c <_printf_common>
 8001cb4:	3001      	adds	r0, #1
 8001cb6:	d14a      	bne.n	8001d4e <_printf_i+0x1f6>
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbc:	b004      	add	sp, #16
 8001cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	4833      	ldr	r0, [pc, #204]	; (8001d98 <_printf_i+0x240>)
 8001ccc:	2778      	movs	r7, #120	; 0x78
 8001cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	6829      	ldr	r1, [r5, #0]
 8001cd6:	061f      	lsls	r7, r3, #24
 8001cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cdc:	d402      	bmi.n	8001ce4 <_printf_i+0x18c>
 8001cde:	065f      	lsls	r7, r3, #25
 8001ce0:	bf48      	it	mi
 8001ce2:	b2b6      	uxthmi	r6, r6
 8001ce4:	07df      	lsls	r7, r3, #31
 8001ce6:	bf48      	it	mi
 8001ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8001cec:	6029      	str	r1, [r5, #0]
 8001cee:	bf48      	it	mi
 8001cf0:	6023      	strmi	r3, [r4, #0]
 8001cf2:	b91e      	cbnz	r6, 8001cfc <_printf_i+0x1a4>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f023 0320 	bic.w	r3, r3, #32
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	e7a7      	b.n	8001c50 <_printf_i+0xf8>
 8001d00:	4824      	ldr	r0, [pc, #144]	; (8001d94 <_printf_i+0x23c>)
 8001d02:	e7e4      	b.n	8001cce <_printf_i+0x176>
 8001d04:	4615      	mov	r5, r2
 8001d06:	e7bd      	b.n	8001c84 <_printf_i+0x12c>
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	6826      	ldr	r6, [r4, #0]
 8001d0c:	6961      	ldr	r1, [r4, #20]
 8001d0e:	1d18      	adds	r0, r3, #4
 8001d10:	6028      	str	r0, [r5, #0]
 8001d12:	0635      	lsls	r5, r6, #24
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	d501      	bpl.n	8001d1c <_printf_i+0x1c4>
 8001d18:	6019      	str	r1, [r3, #0]
 8001d1a:	e002      	b.n	8001d22 <_printf_i+0x1ca>
 8001d1c:	0670      	lsls	r0, r6, #25
 8001d1e:	d5fb      	bpl.n	8001d18 <_printf_i+0x1c0>
 8001d20:	8019      	strh	r1, [r3, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	6123      	str	r3, [r4, #16]
 8001d26:	4615      	mov	r5, r2
 8001d28:	e7bc      	b.n	8001ca4 <_printf_i+0x14c>
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	1d1a      	adds	r2, r3, #4
 8001d2e:	602a      	str	r2, [r5, #0]
 8001d30:	681d      	ldr	r5, [r3, #0]
 8001d32:	6862      	ldr	r2, [r4, #4]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4628      	mov	r0, r5
 8001d38:	f7fe fa5a 	bl	80001f0 <memchr>
 8001d3c:	b108      	cbz	r0, 8001d42 <_printf_i+0x1ea>
 8001d3e:	1b40      	subs	r0, r0, r5
 8001d40:	6060      	str	r0, [r4, #4]
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	6123      	str	r3, [r4, #16]
 8001d46:	2300      	movs	r3, #0
 8001d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d4c:	e7aa      	b.n	8001ca4 <_printf_i+0x14c>
 8001d4e:	6923      	ldr	r3, [r4, #16]
 8001d50:	462a      	mov	r2, r5
 8001d52:	4649      	mov	r1, r9
 8001d54:	4640      	mov	r0, r8
 8001d56:	47d0      	blx	sl
 8001d58:	3001      	adds	r0, #1
 8001d5a:	d0ad      	beq.n	8001cb8 <_printf_i+0x160>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	079b      	lsls	r3, r3, #30
 8001d60:	d413      	bmi.n	8001d8a <_printf_i+0x232>
 8001d62:	68e0      	ldr	r0, [r4, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
 8001d66:	4298      	cmp	r0, r3
 8001d68:	bfb8      	it	lt
 8001d6a:	4618      	movlt	r0, r3
 8001d6c:	e7a6      	b.n	8001cbc <_printf_i+0x164>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	4632      	mov	r2, r6
 8001d72:	4649      	mov	r1, r9
 8001d74:	4640      	mov	r0, r8
 8001d76:	47d0      	blx	sl
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d09d      	beq.n	8001cb8 <_printf_i+0x160>
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	68e3      	ldr	r3, [r4, #12]
 8001d80:	9903      	ldr	r1, [sp, #12]
 8001d82:	1a5b      	subs	r3, r3, r1
 8001d84:	42ab      	cmp	r3, r5
 8001d86:	dcf2      	bgt.n	8001d6e <_printf_i+0x216>
 8001d88:	e7eb      	b.n	8001d62 <_printf_i+0x20a>
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	f104 0619 	add.w	r6, r4, #25
 8001d90:	e7f5      	b.n	8001d7e <_printf_i+0x226>
 8001d92:	bf00      	nop
 8001d94:	0800211e 	.word	0x0800211e
 8001d98:	0800212f 	.word	0x0800212f

08001d9c <__malloc_lock>:
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <__malloc_lock+0x8>)
 8001d9e:	f7ff bc73 	b.w	8001688 <__retarget_lock_acquire_recursive>
 8001da2:	bf00      	nop
 8001da4:	20007d18 	.word	0x20007d18

08001da8 <__malloc_unlock>:
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <__malloc_unlock+0x8>)
 8001daa:	f7ff bc6e 	b.w	800168a <__retarget_lock_release_recursive>
 8001dae:	bf00      	nop
 8001db0:	20007d18 	.word	0x20007d18

08001db4 <_realloc_r>:
 8001db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001db8:	4680      	mov	r8, r0
 8001dba:	4614      	mov	r4, r2
 8001dbc:	460e      	mov	r6, r1
 8001dbe:	b921      	cbnz	r1, 8001dca <_realloc_r+0x16>
 8001dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	f7ff bdd9 	b.w	800197c <_malloc_r>
 8001dca:	b92a      	cbnz	r2, 8001dd8 <_realloc_r+0x24>
 8001dcc:	f000 f85a 	bl	8001e84 <_free_r>
 8001dd0:	4625      	mov	r5, r4
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd8:	f000 f8a0 	bl	8001f1c <_malloc_usable_size_r>
 8001ddc:	4284      	cmp	r4, r0
 8001dde:	4607      	mov	r7, r0
 8001de0:	d802      	bhi.n	8001de8 <_realloc_r+0x34>
 8001de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001de6:	d812      	bhi.n	8001e0e <_realloc_r+0x5a>
 8001de8:	4621      	mov	r1, r4
 8001dea:	4640      	mov	r0, r8
 8001dec:	f7ff fdc6 	bl	800197c <_malloc_r>
 8001df0:	4605      	mov	r5, r0
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d0ed      	beq.n	8001dd2 <_realloc_r+0x1e>
 8001df6:	42bc      	cmp	r4, r7
 8001df8:	4622      	mov	r2, r4
 8001dfa:	4631      	mov	r1, r6
 8001dfc:	bf28      	it	cs
 8001dfe:	463a      	movcs	r2, r7
 8001e00:	f000 f832 	bl	8001e68 <memcpy>
 8001e04:	4631      	mov	r1, r6
 8001e06:	4640      	mov	r0, r8
 8001e08:	f000 f83c 	bl	8001e84 <_free_r>
 8001e0c:	e7e1      	b.n	8001dd2 <_realloc_r+0x1e>
 8001e0e:	4635      	mov	r5, r6
 8001e10:	e7df      	b.n	8001dd2 <_realloc_r+0x1e>

08001e12 <memmove>:
 8001e12:	4288      	cmp	r0, r1
 8001e14:	b510      	push	{r4, lr}
 8001e16:	eb01 0402 	add.w	r4, r1, r2
 8001e1a:	d902      	bls.n	8001e22 <memmove+0x10>
 8001e1c:	4284      	cmp	r4, r0
 8001e1e:	4623      	mov	r3, r4
 8001e20:	d807      	bhi.n	8001e32 <memmove+0x20>
 8001e22:	1e43      	subs	r3, r0, #1
 8001e24:	42a1      	cmp	r1, r4
 8001e26:	d008      	beq.n	8001e3a <memmove+0x28>
 8001e28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e30:	e7f8      	b.n	8001e24 <memmove+0x12>
 8001e32:	4402      	add	r2, r0
 8001e34:	4601      	mov	r1, r0
 8001e36:	428a      	cmp	r2, r1
 8001e38:	d100      	bne.n	8001e3c <memmove+0x2a>
 8001e3a:	bd10      	pop	{r4, pc}
 8001e3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e40:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e44:	e7f7      	b.n	8001e36 <memmove+0x24>
	...

08001e48 <_sbrk_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4d06      	ldr	r5, [pc, #24]	; (8001e64 <_sbrk_r+0x1c>)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	602b      	str	r3, [r5, #0]
 8001e54:	f7ff f946 	bl	80010e4 <_sbrk>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d102      	bne.n	8001e62 <_sbrk_r+0x1a>
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	b103      	cbz	r3, 8001e62 <_sbrk_r+0x1a>
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	bd38      	pop	{r3, r4, r5, pc}
 8001e64:	20007d24 	.word	0x20007d24

08001e68 <memcpy>:
 8001e68:	440a      	add	r2, r1
 8001e6a:	4291      	cmp	r1, r2
 8001e6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e70:	d100      	bne.n	8001e74 <memcpy+0xc>
 8001e72:	4770      	bx	lr
 8001e74:	b510      	push	{r4, lr}
 8001e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e7e:	4291      	cmp	r1, r2
 8001e80:	d1f9      	bne.n	8001e76 <memcpy+0xe>
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <_free_r>:
 8001e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d044      	beq.n	8001f14 <_free_r+0x90>
 8001e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e8e:	9001      	str	r0, [sp, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f1a1 0404 	sub.w	r4, r1, #4
 8001e96:	bfb8      	it	lt
 8001e98:	18e4      	addlt	r4, r4, r3
 8001e9a:	f7ff ff7f 	bl	8001d9c <__malloc_lock>
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <_free_r+0x94>)
 8001ea0:	9801      	ldr	r0, [sp, #4]
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	b933      	cbnz	r3, 8001eb4 <_free_r+0x30>
 8001ea6:	6063      	str	r3, [r4, #4]
 8001ea8:	6014      	str	r4, [r2, #0]
 8001eaa:	b003      	add	sp, #12
 8001eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001eb0:	f7ff bf7a 	b.w	8001da8 <__malloc_unlock>
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	d908      	bls.n	8001eca <_free_r+0x46>
 8001eb8:	6825      	ldr	r5, [r4, #0]
 8001eba:	1961      	adds	r1, r4, r5
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	bf01      	itttt	eq
 8001ec0:	6819      	ldreq	r1, [r3, #0]
 8001ec2:	685b      	ldreq	r3, [r3, #4]
 8001ec4:	1949      	addeq	r1, r1, r5
 8001ec6:	6021      	streq	r1, [r4, #0]
 8001ec8:	e7ed      	b.n	8001ea6 <_free_r+0x22>
 8001eca:	461a      	mov	r2, r3
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	b10b      	cbz	r3, 8001ed4 <_free_r+0x50>
 8001ed0:	42a3      	cmp	r3, r4
 8001ed2:	d9fa      	bls.n	8001eca <_free_r+0x46>
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	1855      	adds	r5, r2, r1
 8001ed8:	42a5      	cmp	r5, r4
 8001eda:	d10b      	bne.n	8001ef4 <_free_r+0x70>
 8001edc:	6824      	ldr	r4, [r4, #0]
 8001ede:	4421      	add	r1, r4
 8001ee0:	1854      	adds	r4, r2, r1
 8001ee2:	42a3      	cmp	r3, r4
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	d1e0      	bne.n	8001eaa <_free_r+0x26>
 8001ee8:	681c      	ldr	r4, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	6053      	str	r3, [r2, #4]
 8001eee:	440c      	add	r4, r1
 8001ef0:	6014      	str	r4, [r2, #0]
 8001ef2:	e7da      	b.n	8001eaa <_free_r+0x26>
 8001ef4:	d902      	bls.n	8001efc <_free_r+0x78>
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	6003      	str	r3, [r0, #0]
 8001efa:	e7d6      	b.n	8001eaa <_free_r+0x26>
 8001efc:	6825      	ldr	r5, [r4, #0]
 8001efe:	1961      	adds	r1, r4, r5
 8001f00:	428b      	cmp	r3, r1
 8001f02:	bf04      	itt	eq
 8001f04:	6819      	ldreq	r1, [r3, #0]
 8001f06:	685b      	ldreq	r3, [r3, #4]
 8001f08:	6063      	str	r3, [r4, #4]
 8001f0a:	bf04      	itt	eq
 8001f0c:	1949      	addeq	r1, r1, r5
 8001f0e:	6021      	streq	r1, [r4, #0]
 8001f10:	6054      	str	r4, [r2, #4]
 8001f12:	e7ca      	b.n	8001eaa <_free_r+0x26>
 8001f14:	b003      	add	sp, #12
 8001f16:	bd30      	pop	{r4, r5, pc}
 8001f18:	20007d1c 	.word	0x20007d1c

08001f1c <_malloc_usable_size_r>:
 8001f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f20:	1f18      	subs	r0, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bfbc      	itt	lt
 8001f26:	580b      	ldrlt	r3, [r1, r0]
 8001f28:	18c0      	addlt	r0, r0, r3
 8001f2a:	4770      	bx	lr

08001f2c <_init>:
 8001f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2e:	bf00      	nop
 8001f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f32:	bc08      	pop	{r3}
 8001f34:	469e      	mov	lr, r3
 8001f36:	4770      	bx	lr

08001f38 <_fini>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	bf00      	nop
 8001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3e:	bc08      	pop	{r3}
 8001f40:	469e      	mov	lr, r3
 8001f42:	4770      	bx	lr
