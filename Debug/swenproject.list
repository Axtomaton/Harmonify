
swenproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001410  08001410  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08001410  08001410  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001410  08001410  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08001418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000054  0800146c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  0800146c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001d19  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a75  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00022858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015c  00000000  00000000  00022a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d15e  00000000  00000000  00022bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c51  00000000  00000000  0003fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3be6  00000000  00000000  0004397b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a08  00000000  00000000  00137564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00137f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080013c0 	.word	0x080013c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080013c0 	.word	0x080013c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <read_and_echo_byte>:
#include "printf.h"
#include "UART.h"

static char BUFFER [80];

char read_and_echo_byte(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
    uint8_t byte = USART_Read_Nonblocking(USART2); 
 8000276:	480a      	ldr	r0, [pc, #40]	; (80002a0 <read_and_echo_byte+0x30>)
 8000278:	f000 f9ce 	bl	8000618 <USART_Read_Nonblocking>
 800027c:	4603      	mov	r3, r0
 800027e:	71fb      	strb	r3, [r7, #7]
    putchar (byte);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fa2e 	bl	80006e4 <putchar>
    if (byte == '\r'){
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b0d      	cmp	r3, #13
 800028c:	d102      	bne.n	8000294 <read_and_echo_byte+0x24>
        putchar('\n');
 800028e:	200a      	movs	r0, #10
 8000290:	f000 fa28 	bl	80006e4 <putchar>
    }
    return byte;
 8000294:	79fb      	ldrb	r3, [r7, #7]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40004400 	.word	0x40004400

080002a4 <LED_Init>:

//******************************************************************************************
// User LED = LD2 Green LED = PA.5
//******************************************************************************************

void LED_Init(int pin){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002ac:	4b2b      	ldr	r3, [pc, #172]	; (800035c <LED_Init+0xb8>)
 80002ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <LED_Init+0xb8>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));  
 80002b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2103      	movs	r1, #3
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80002ce:	4013      	ands	r3, r2
 80002d0:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80002d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	2101      	movs	r1, #1
 80002de:	fa01 f303 	lsl.w	r3, r1, r3
 80002e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80002e6:	4313      	orrs	r3, r2
 80002e8:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 80002ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ee:	689a      	ldr	r2, [r3, #8]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	2103      	movs	r1, #3
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000300:	4013      	ands	r3, r2
 8000302:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000304:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000318:	4313      	orrs	r3, r2
 800031a:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 800031c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000320:	685a      	ldr	r2, [r3, #4]
 8000322:	2101      	movs	r1, #1
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	43db      	mvns	r3, r3
 800032c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000330:	4013      	ands	r3, r2
 8000332:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000334:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000338:	68da      	ldr	r2, [r3, #12]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	2103      	movs	r1, #3
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	43db      	mvns	r3, r3
 8000346:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800034a:	4013      	ands	r3, r2
 800034c:	60cb      	str	r3, [r1, #12]
	
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <LED_Toggle>:
}

//******************************************************************************************
// Toggle LED 
//******************************************************************************************
void LED_Toggle(int pin){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	GPIOA->ODR ^= (1UL<<pin);
 8000368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	2101      	movs	r1, #1
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800037a:	4053      	eors	r3, r2
 800037c:	614b      	str	r3, [r1, #20]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <UART2_Init+0x40>)
 8000392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <UART2_Init+0x40>)
 8000396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <UART2_Init+0x40>)
 800039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <UART2_Init+0x40>)
 80003a4:	f023 030c 	bic.w	r3, r3, #12
 80003a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <UART2_Init+0x40>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a06      	ldr	r2, [pc, #24]	; (80003cc <UART2_Init+0x40>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80003bc:	f000 f80a 	bl	80003d4 <UART2_GPIO_Init>
	USART_Init(USART2);
 80003c0:	4803      	ldr	r0, [pc, #12]	; (80003d0 <UART2_Init+0x44>)
 80003c2:	f000 f84f 	bl	8000464 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40004400 	.word	0x40004400

080003d4 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <UART2_GPIO_Init+0x8c>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003dc:	4a20      	ldr	r2, [pc, #128]	; (8000460 <UART2_GPIO_Init+0x8c>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80003f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fe:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000402:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800040e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000412:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	6a1b      	ldr	r3, [r3, #32]
 800041a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800041e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000422:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000424:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800042e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000432:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800043e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000442:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800044e:	f023 030c 	bic.w	r3, r3, #12
 8000452:	6053      	str	r3, [r2, #4]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000

08000464 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f023 0201 	bic.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f242 028d 	movw	r2, #8333	; 0x208d
 80004a2:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f043 020c 	orr.w	r2, r3, #12
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a2c      	ldr	r2, [pc, #176]	; (8000564 <USART_Init+0x100>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d129      	bne.n	800050c <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f043 0220 	orr.w	r2, r3, #32
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f023 0210 	bic.w	r2, r3, #16
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f023 0201 	bic.w	r2, r3, #1
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <USART_Init+0x104>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d10b      	bne.n	800052c <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <USART_Init+0x108>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <USART_Init+0x108>)
 8000526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800052a:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 0201 	orr.w	r2, r3, #1
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000538:	bf00      	nop
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000546:	bf00      	nop
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <USART_Init+0xe4>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40004c00 	.word	0x40004c00
 8000568:	40004400 	.word	0x40004400
 800056c:	40013800 	.word	0x40013800

08000570 <USART_Write>:
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	e014      	b.n	80005ac <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000582:	bf00      	nop
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	69db      	ldr	r3, [r3, #28]
 8000588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b29a      	uxth	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800059e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005a2:	f000 f819 	bl	80005d8 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d8e6      	bhi.n	8000582 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80005b4:	bf00      	nop
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	61da      	str	r2, [r3, #28]
}   
 80005ce:	bf00      	nop
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2264      	movs	r2, #100	; 0x64
 80005e4:	fb03 f202 	mul.w	r2, r3, r2
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <USART_Delay+0x3c>)
 80005ea:	fba3 1302 	umull	r1, r3, r3, r2
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	0852      	lsrs	r2, r2, #1
 80005f2:	4413      	add	r3, r2
 80005f4:	089b      	lsrs	r3, r3, #2
 80005f6:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80005f8:	bf00      	nop
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1f9      	bne.n	80005fa <USART_Delay+0x22>
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	24924925 	.word	0x24924925

08000618 <USART_Read_Nonblocking>:
	} else if (USARTx->ISR & USART_ISR_NE){ 			// Noise Error Flag
		while(1);     
	}	
}

uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if (!(USARTx->ISR & USART_ISR_RXNE)){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0320 	and.w	r3, r3, #32
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <USART_Read_Nonblocking+0x18>
		return 0;
 800062c:	2300      	movs	r3, #0
 800062e:	e003      	b.n	8000638 <USART_Read_Nonblocking+0x20>
	}  // Wait until RXNE (RX not empty) bit is set
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000634:	b29b      	uxth	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <init_systick>:
/**
 * @brief Initialization function for systick
 * 
 * @return struct systick* 
 */
void init_systick() {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
    // Initialize systick
    systick->CSR = 0; // Clear the CSR register
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <init_systick+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
    systick->RVR = 39999999; //set the reload value to 7999999
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <init_systick+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a06      	ldr	r2, [pc, #24]	; (8000670 <init_systick+0x2c>)
 8000656:	605a      	str	r2, [r3, #4]
    systick->CSR = (1 << 2); // Enable the counter to internal clock
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <init_systick+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2204      	movs	r2, #4
 800065e:	601a      	str	r2, [r3, #0]
    systick->CSR != 1; // Enable the counter
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000000 	.word	0x20000000
 8000670:	026259ff 	.word	0x026259ff

08000674 <delay_systick>:

/**
 * @brief This function is to create a delay by consuming CPU cycle on counter
 */
// This fuction is to create delay using SysTick timer counter
void delay_systick() {
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
    // Using the SysTick global structure pointer do the following:
    // Create a for loop that loops 10 times
    for (int i = 0; i < 1; i++) {
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e00a      	b.n	8000696 <delay_systick+0x22>
        // Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
        // register in a loop. When that bit is set exit this inner loop
        while ((systick->CSR & (1 << 16)) == 0) {
 8000680:	bf00      	nop
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <delay_systick+0x38>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f8      	beq.n	8000682 <delay_systick+0xe>
    for (int i = 0; i < 1; i++) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	ddf1      	ble.n	8000680 <delay_systick+0xc>
            // do nothing
        }
    // to do another pass in the outer loop of 10.
    }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000

080006b0 <test_LED>:
#include "UART.h"
#include "Systick.h"
#include "printf.h"
#include "Activity_8.h"

void test_LED(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
    init_systick(); // Initialize SysTick for delay
 80006b6:	f7ff ffc5 	bl	8000644 <init_systick>
    while(1) {
        LED_Toggle(LED_PIN); // Toggle LED pin
 80006ba:	2005      	movs	r0, #5
 80006bc:	f7ff fe50 	bl	8000360 <LED_Toggle>
        // Check for received characters
        char ch = read_and_echo_byte();
 80006c0:	f7ff fdd6 	bl	8000270 <read_and_echo_byte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
        if(ch != 0) {
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d004      	beq.n	80006d8 <test_LED+0x28>
            printf("%c\n", ch); // Echo received character
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <test_LED+0x30>)
 80006d4:	f000 f818 	bl	8000708 <printf>
        }
        delay_systick(); 
 80006d8:	f7ff ffcc 	bl	8000674 <delay_systick>
    while(1) {
 80006dc:	e7ed      	b.n	80006ba <test_LED+0xa>
 80006de:	bf00      	nop
 80006e0:	080013d8 	.word	0x080013d8

080006e4 <putchar>:
	USART_Write (USART2, (unsigned char*) "\r\n", 2);
	return ret;
}


int putchar (int c) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    USART_Write (USART2, (unsigned char*) &c, 1);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2201      	movs	r2, #1
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <putchar+0x20>)
 80006f4:	f7ff ff3c 	bl	8000570 <USART_Write>
    return c;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40004400 	.word	0x40004400

08000708 <printf>:

int printf (const char *format, ...) {
 8000708:	b40f      	push	{r0, r1, r2, r3}
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
   va_list aptr;
   int ret;

   va_start(aptr, format);
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	603b      	str	r3, [r7, #0]
   ret = vsprintf(buffer, format, aptr);
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	6939      	ldr	r1, [r7, #16]
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <printf+0x68>)
 800071c:	f000 f9ca 	bl	8000ab4 <vsiprintf>
 8000720:	6078      	str	r0, [r7, #4]
   va_end(aptr);
   if (buffer [ret - 1] == '\n') {
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <printf+0x68>)
 8000728:	5cd3      	ldrb	r3, [r2, r3]
 800072a:	2b0a      	cmp	r3, #10
 800072c:	d111      	bne.n	8000752 <printf+0x4a>
       buffer [ret - 1] = '\r';
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3b01      	subs	r3, #1
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <printf+0x68>)
 8000734:	210d      	movs	r1, #13
 8000736:	54d1      	strb	r1, [r2, r3]
       buffer [ret] = '\n';
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <printf+0x68>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	220a      	movs	r2, #10
 8000740:	701a      	strb	r2, [r3, #0]
       buffer [ret + 1] = 0;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <printf+0x68>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
       ret++;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
   }

   USART_Write (USART2, (unsigned char*) buffer, ret);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	461a      	mov	r2, r3
 8000756:	4906      	ldr	r1, [pc, #24]	; (8000770 <printf+0x68>)
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <printf+0x6c>)
 800075a:	f7ff ff09 	bl	8000570 <USART_Write>

   return(ret);
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800076a:	b004      	add	sp, #16
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000070 	.word	0x20000070
 8000774:	40004400 	.word	0x40004400

08000778 <run_project>:
// #include "bigToLittleEndian.h"
#include "demo.h"
// #include "Systick.h"


void run_project() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    // printf("Converted value in little endian (uint16_t): %04x\n", little_endian_uint16);
    // printf("Converted value in little endian (uint32_t): %08x\n", little_endian_uint32);
	// display_song_info();

    // struct systick * systick = init_systick();
    test_LED();
 800077c:	f7ff ff98 	bl	80006b0 <test_LED>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800078a:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <System_Clock_Init+0x1b4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a6a      	ldr	r2, [pc, #424]	; (8000938 <System_Clock_Init+0x1b4>)
 8000790:	f023 0307 	bic.w	r3, r3, #7
 8000794:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000796:	4b68      	ldr	r3, [pc, #416]	; (8000938 <System_Clock_Init+0x1b4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a67      	ldr	r2, [pc, #412]	; (8000938 <System_Clock_Init+0x1b4>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80007a2:	4b66      	ldr	r3, [pc, #408]	; (800093c <System_Clock_Init+0x1b8>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a65      	ldr	r2, [pc, #404]	; (800093c <System_Clock_Init+0x1b8>)
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80007ae:	bf00      	nop
 80007b0:	4b62      	ldr	r3, [pc, #392]	; (800093c <System_Clock_Init+0x1b8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f9      	beq.n	80007b0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80007bc:	2310      	movs	r3, #16
 80007be:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80007c0:	4b5e      	ldr	r3, [pc, #376]	; (800093c <System_Clock_Init+0x1b8>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4a5d      	ldr	r2, [pc, #372]	; (800093c <System_Clock_Init+0x1b8>)
 80007c6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80007ca:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80007cc:	4b5b      	ldr	r3, [pc, #364]	; (800093c <System_Clock_Init+0x1b8>)
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	061b      	lsls	r3, r3, #24
 80007d4:	4959      	ldr	r1, [pc, #356]	; (800093c <System_Clock_Init+0x1b8>)
 80007d6:	4313      	orrs	r3, r2
 80007d8:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80007da:	4b58      	ldr	r3, [pc, #352]	; (800093c <System_Clock_Init+0x1b8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a57      	ldr	r2, [pc, #348]	; (800093c <System_Clock_Init+0x1b8>)
 80007e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007e4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 80007e6:	bf00      	nop
 80007e8:	4b54      	ldr	r3, [pc, #336]	; (800093c <System_Clock_Init+0x1b8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007f4:	d0f8      	beq.n	80007e8 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80007f6:	4b51      	ldr	r3, [pc, #324]	; (800093c <System_Clock_Init+0x1b8>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	4a50      	ldr	r2, [pc, #320]	; (800093c <System_Clock_Init+0x1b8>)
 80007fc:	f023 0303 	bic.w	r3, r3, #3
 8000800:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000802:	4b4e      	ldr	r3, [pc, #312]	; (800093c <System_Clock_Init+0x1b8>)
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	4a4d      	ldr	r2, [pc, #308]	; (800093c <System_Clock_Init+0x1b8>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <System_Clock_Init+0x1b8>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000816:	4a49      	ldr	r2, [pc, #292]	; (800093c <System_Clock_Init+0x1b8>)
 8000818:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800081c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800081e:	4b47      	ldr	r3, [pc, #284]	; (800093c <System_Clock_Init+0x1b8>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000826:	4a45      	ldr	r2, [pc, #276]	; (800093c <System_Clock_Init+0x1b8>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800082e:	4b43      	ldr	r3, [pc, #268]	; (800093c <System_Clock_Init+0x1b8>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	4a42      	ldr	r2, [pc, #264]	; (800093c <System_Clock_Init+0x1b8>)
 8000834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000838:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800083a:	4b40      	ldr	r3, [pc, #256]	; (800093c <System_Clock_Init+0x1b8>)
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	4a3f      	ldr	r2, [pc, #252]	; (800093c <System_Clock_Init+0x1b8>)
 8000840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000844:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <System_Clock_Init+0x1b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a3c      	ldr	r2, [pc, #240]	; (800093c <System_Clock_Init+0x1b8>)
 800084c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000850:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000852:	bf00      	nop
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <System_Clock_Init+0x1b8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f9      	beq.n	8000854 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <System_Clock_Init+0x1b8>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	4a35      	ldr	r2, [pc, #212]	; (800093c <System_Clock_Init+0x1b8>)
 8000866:	f023 0303 	bic.w	r3, r3, #3
 800086a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <System_Clock_Init+0x1b8>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <System_Clock_Init+0x1b8>)
 8000872:	f043 0303 	orr.w	r3, r3, #3
 8000876:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000878:	bf00      	nop
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <System_Clock_Init+0x1b8>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 030c 	and.w	r3, r3, #12
 8000882:	2b0c      	cmp	r3, #12
 8000884:	d1f9      	bne.n	800087a <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <System_Clock_Init+0x1b8>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <System_Clock_Init+0x1b8>)
 800088c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000890:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <System_Clock_Init+0x1b8>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	4a29      	ldr	r2, [pc, #164]	; (800093c <System_Clock_Init+0x1b8>)
 8000898:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800089c:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <System_Clock_Init+0x1b8>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4a26      	ldr	r2, [pc, #152]	; (800093c <System_Clock_Init+0x1b8>)
 80008a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008a8:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <System_Clock_Init+0x1b8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <System_Clock_Init+0x1b8>)
 80008b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80008b4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80008b6:	bf00      	nop
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <System_Clock_Init+0x1b8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008c4:	d0f8      	beq.n	80008b8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <System_Clock_Init+0x1b8>)
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <System_Clock_Init+0x1b8>)
 80008cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80008d0:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <System_Clock_Init+0x1b8>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <System_Clock_Init+0x1b8>)
 80008d8:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80008dc:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <System_Clock_Init+0x1b8>)
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <System_Clock_Init+0x1b8>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <System_Clock_Init+0x1b8>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <System_Clock_Init+0x1b8>)
 80008f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f4:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <System_Clock_Init+0x1b8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <System_Clock_Init+0x1b8>)
 80008fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000900:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000902:	bf00      	nop
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <System_Clock_Init+0x1b8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <System_Clock_Init+0x1b8>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <System_Clock_Init+0x1b8>)
 8000918:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <System_Clock_Init+0x1b8>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	4a05      	ldr	r2, [pc, #20]	; (800093c <System_Clock_Init+0x1b8>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40022000 	.word	0x40022000
 800093c:	40021000 	.word	0x40021000

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f000 f8aa 	bl	8000ac8 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20018000 	.word	0x20018000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	20000210 	.word	0x20000210

080009ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <SystemInit+0x64>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <SystemInit+0x64>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <SystemInit+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <SystemInit+0x68>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <SystemInit+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <SystemInit+0x68>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <SystemInit+0x68>)
 80009d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <SystemInit+0x68>)
 80009e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SystemInit+0x68>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <SystemInit+0x68>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SystemInit+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SystemInit+0x64>)
 80009fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a02:	609a      	str	r2, [r3, #8]
#endif
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	40021000 	.word	0x40021000

08000a18 <main>:
#include <stdio.h>




int main(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

//	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000a1c:	f7ff feb2 	bl	8000784 <System_Clock_Init>
	LED_Init(LED_PIN);
 8000a20:	2005      	movs	r0, #5
 8000a22:	f7ff fc3f 	bl	80002a4 <LED_Init>
	UART2_Init();
 8000a26:	f7ff fcb1 	bl	800038c <UART2_Init>
	run_project();
 8000a2a:	f7ff fea5 	bl	8000778 <run_project>
 8000a2e:	2300      	movs	r3, #0
	// LED_Toggle(LED_PIN);
	// LED_Off(LED_PIN);
	// run_demo();
	// read_bytes();
	// readlines();
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff ffb8 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	; (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	; (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f000 f837 	bl	8000ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a66:	f7ff ffd7 	bl	8000a18 <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a78:	08001418 	.word	0x08001418
  ldr r2, =_sbss
 8000a7c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a80:	2000020c 	.word	0x2000020c

08000a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_2_IRQHandler>
	...

08000a88 <_vsiprintf_r>:
 8000a88:	b500      	push	{lr}
 8000a8a:	b09b      	sub	sp, #108	; 0x6c
 8000a8c:	9100      	str	r1, [sp, #0]
 8000a8e:	9104      	str	r1, [sp, #16]
 8000a90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a94:	9105      	str	r1, [sp, #20]
 8000a96:	9102      	str	r1, [sp, #8]
 8000a98:	4905      	ldr	r1, [pc, #20]	; (8000ab0 <_vsiprintf_r+0x28>)
 8000a9a:	9103      	str	r1, [sp, #12]
 8000a9c:	4669      	mov	r1, sp
 8000a9e:	f000 f899 	bl	8000bd4 <_svfiprintf_r>
 8000aa2:	9b00      	ldr	r3, [sp, #0]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	b01b      	add	sp, #108	; 0x6c
 8000aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8000aae:	bf00      	nop
 8000ab0:	ffff0208 	.word	0xffff0208

08000ab4 <vsiprintf>:
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <vsiprintf+0x10>)
 8000abc:	6800      	ldr	r0, [r0, #0]
 8000abe:	f7ff bfe3 	b.w	8000a88 <_vsiprintf_r>
 8000ac2:	bf00      	nop
 8000ac4:	20000050 	.word	0x20000050

08000ac8 <__errno>:
 8000ac8:	4b01      	ldr	r3, [pc, #4]	; (8000ad0 <__errno+0x8>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000050 	.word	0x20000050

08000ad4 <__libc_init_array>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	4d0d      	ldr	r5, [pc, #52]	; (8000b0c <__libc_init_array+0x38>)
 8000ad8:	4c0d      	ldr	r4, [pc, #52]	; (8000b10 <__libc_init_array+0x3c>)
 8000ada:	1b64      	subs	r4, r4, r5
 8000adc:	10a4      	asrs	r4, r4, #2
 8000ade:	2600      	movs	r6, #0
 8000ae0:	42a6      	cmp	r6, r4
 8000ae2:	d109      	bne.n	8000af8 <__libc_init_array+0x24>
 8000ae4:	4d0b      	ldr	r5, [pc, #44]	; (8000b14 <__libc_init_array+0x40>)
 8000ae6:	4c0c      	ldr	r4, [pc, #48]	; (8000b18 <__libc_init_array+0x44>)
 8000ae8:	f000 fc6a 	bl	80013c0 <_init>
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	10a4      	asrs	r4, r4, #2
 8000af0:	2600      	movs	r6, #0
 8000af2:	42a6      	cmp	r6, r4
 8000af4:	d105      	bne.n	8000b02 <__libc_init_array+0x2e>
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afc:	4798      	blx	r3
 8000afe:	3601      	adds	r6, #1
 8000b00:	e7ee      	b.n	8000ae0 <__libc_init_array+0xc>
 8000b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b06:	4798      	blx	r3
 8000b08:	3601      	adds	r6, #1
 8000b0a:	e7f2      	b.n	8000af2 <__libc_init_array+0x1e>
 8000b0c:	08001410 	.word	0x08001410
 8000b10:	08001410 	.word	0x08001410
 8000b14:	08001410 	.word	0x08001410
 8000b18:	08001414 	.word	0x08001414

08000b1c <__retarget_lock_acquire_recursive>:
 8000b1c:	4770      	bx	lr

08000b1e <__retarget_lock_release_recursive>:
 8000b1e:	4770      	bx	lr

08000b20 <__ssputs_r>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	688e      	ldr	r6, [r1, #8]
 8000b26:	461f      	mov	r7, r3
 8000b28:	42be      	cmp	r6, r7
 8000b2a:	680b      	ldr	r3, [r1, #0]
 8000b2c:	4682      	mov	sl, r0
 8000b2e:	460c      	mov	r4, r1
 8000b30:	4690      	mov	r8, r2
 8000b32:	d82c      	bhi.n	8000b8e <__ssputs_r+0x6e>
 8000b34:	898a      	ldrh	r2, [r1, #12]
 8000b36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b3a:	d026      	beq.n	8000b8a <__ssputs_r+0x6a>
 8000b3c:	6965      	ldr	r5, [r4, #20]
 8000b3e:	6909      	ldr	r1, [r1, #16]
 8000b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b44:	eba3 0901 	sub.w	r9, r3, r1
 8000b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b4c:	1c7b      	adds	r3, r7, #1
 8000b4e:	444b      	add	r3, r9
 8000b50:	106d      	asrs	r5, r5, #1
 8000b52:	429d      	cmp	r5, r3
 8000b54:	bf38      	it	cc
 8000b56:	461d      	movcc	r5, r3
 8000b58:	0553      	lsls	r3, r2, #21
 8000b5a:	d527      	bpl.n	8000bac <__ssputs_r+0x8c>
 8000b5c:	4629      	mov	r1, r5
 8000b5e:	f000 f957 	bl	8000e10 <_malloc_r>
 8000b62:	4606      	mov	r6, r0
 8000b64:	b360      	cbz	r0, 8000bc0 <__ssputs_r+0xa0>
 8000b66:	6921      	ldr	r1, [r4, #16]
 8000b68:	464a      	mov	r2, r9
 8000b6a:	f000 fbc7 	bl	80012fc <memcpy>
 8000b6e:	89a3      	ldrh	r3, [r4, #12]
 8000b70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	81a3      	strh	r3, [r4, #12]
 8000b7a:	6126      	str	r6, [r4, #16]
 8000b7c:	6165      	str	r5, [r4, #20]
 8000b7e:	444e      	add	r6, r9
 8000b80:	eba5 0509 	sub.w	r5, r5, r9
 8000b84:	6026      	str	r6, [r4, #0]
 8000b86:	60a5      	str	r5, [r4, #8]
 8000b88:	463e      	mov	r6, r7
 8000b8a:	42be      	cmp	r6, r7
 8000b8c:	d900      	bls.n	8000b90 <__ssputs_r+0x70>
 8000b8e:	463e      	mov	r6, r7
 8000b90:	6820      	ldr	r0, [r4, #0]
 8000b92:	4632      	mov	r2, r6
 8000b94:	4641      	mov	r1, r8
 8000b96:	f000 fb86 	bl	80012a6 <memmove>
 8000b9a:	68a3      	ldr	r3, [r4, #8]
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	60a3      	str	r3, [r4, #8]
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	4433      	add	r3, r6
 8000ba4:	6023      	str	r3, [r4, #0]
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	462a      	mov	r2, r5
 8000bae:	f000 fb4b 	bl	8001248 <_realloc_r>
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d1e0      	bne.n	8000b7a <__ssputs_r+0x5a>
 8000bb8:	6921      	ldr	r1, [r4, #16]
 8000bba:	4650      	mov	r0, sl
 8000bbc:	f000 fbac 	bl	8001318 <_free_r>
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	f8ca 3000 	str.w	r3, [sl]
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd2:	e7e9      	b.n	8000ba8 <__ssputs_r+0x88>

08000bd4 <_svfiprintf_r>:
 8000bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd8:	4698      	mov	r8, r3
 8000bda:	898b      	ldrh	r3, [r1, #12]
 8000bdc:	061b      	lsls	r3, r3, #24
 8000bde:	b09d      	sub	sp, #116	; 0x74
 8000be0:	4607      	mov	r7, r0
 8000be2:	460d      	mov	r5, r1
 8000be4:	4614      	mov	r4, r2
 8000be6:	d50e      	bpl.n	8000c06 <_svfiprintf_r+0x32>
 8000be8:	690b      	ldr	r3, [r1, #16]
 8000bea:	b963      	cbnz	r3, 8000c06 <_svfiprintf_r+0x32>
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	f000 f90f 	bl	8000e10 <_malloc_r>
 8000bf2:	6028      	str	r0, [r5, #0]
 8000bf4:	6128      	str	r0, [r5, #16]
 8000bf6:	b920      	cbnz	r0, 8000c02 <_svfiprintf_r+0x2e>
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	e0d0      	b.n	8000da4 <_svfiprintf_r+0x1d0>
 8000c02:	2340      	movs	r3, #64	; 0x40
 8000c04:	616b      	str	r3, [r5, #20]
 8000c06:	2300      	movs	r3, #0
 8000c08:	9309      	str	r3, [sp, #36]	; 0x24
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c10:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c14:	2330      	movs	r3, #48	; 0x30
 8000c16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000dbc <_svfiprintf_r+0x1e8>
 8000c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c1e:	f04f 0901 	mov.w	r9, #1
 8000c22:	4623      	mov	r3, r4
 8000c24:	469a      	mov	sl, r3
 8000c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c2a:	b10a      	cbz	r2, 8000c30 <_svfiprintf_r+0x5c>
 8000c2c:	2a25      	cmp	r2, #37	; 0x25
 8000c2e:	d1f9      	bne.n	8000c24 <_svfiprintf_r+0x50>
 8000c30:	ebba 0b04 	subs.w	fp, sl, r4
 8000c34:	d00b      	beq.n	8000c4e <_svfiprintf_r+0x7a>
 8000c36:	465b      	mov	r3, fp
 8000c38:	4622      	mov	r2, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	f7ff ff6f 	bl	8000b20 <__ssputs_r>
 8000c42:	3001      	adds	r0, #1
 8000c44:	f000 80a9 	beq.w	8000d9a <_svfiprintf_r+0x1c6>
 8000c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c4a:	445a      	add	r2, fp
 8000c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8000c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 80a1 	beq.w	8000d9a <_svfiprintf_r+0x1c6>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c62:	f10a 0a01 	add.w	sl, sl, #1
 8000c66:	9304      	str	r3, [sp, #16]
 8000c68:	9307      	str	r3, [sp, #28]
 8000c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8000c70:	4654      	mov	r4, sl
 8000c72:	2205      	movs	r2, #5
 8000c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c78:	4850      	ldr	r0, [pc, #320]	; (8000dbc <_svfiprintf_r+0x1e8>)
 8000c7a:	f7ff faa9 	bl	80001d0 <memchr>
 8000c7e:	9a04      	ldr	r2, [sp, #16]
 8000c80:	b9d8      	cbnz	r0, 8000cba <_svfiprintf_r+0xe6>
 8000c82:	06d0      	lsls	r0, r2, #27
 8000c84:	bf44      	itt	mi
 8000c86:	2320      	movmi	r3, #32
 8000c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c8c:	0711      	lsls	r1, r2, #28
 8000c8e:	bf44      	itt	mi
 8000c90:	232b      	movmi	r3, #43	; 0x2b
 8000c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c96:	f89a 3000 	ldrb.w	r3, [sl]
 8000c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c9c:	d015      	beq.n	8000cca <_svfiprintf_r+0xf6>
 8000c9e:	9a07      	ldr	r2, [sp, #28]
 8000ca0:	4654      	mov	r4, sl
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f04f 0c0a 	mov.w	ip, #10
 8000ca8:	4621      	mov	r1, r4
 8000caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cae:	3b30      	subs	r3, #48	; 0x30
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	d94d      	bls.n	8000d50 <_svfiprintf_r+0x17c>
 8000cb4:	b1b0      	cbz	r0, 8000ce4 <_svfiprintf_r+0x110>
 8000cb6:	9207      	str	r2, [sp, #28]
 8000cb8:	e014      	b.n	8000ce4 <_svfiprintf_r+0x110>
 8000cba:	eba0 0308 	sub.w	r3, r0, r8
 8000cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	9304      	str	r3, [sp, #16]
 8000cc6:	46a2      	mov	sl, r4
 8000cc8:	e7d2      	b.n	8000c70 <_svfiprintf_r+0x9c>
 8000cca:	9b03      	ldr	r3, [sp, #12]
 8000ccc:	1d19      	adds	r1, r3, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	9103      	str	r1, [sp, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bfbb      	ittet	lt
 8000cd6:	425b      	neglt	r3, r3
 8000cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8000cdc:	9307      	strge	r3, [sp, #28]
 8000cde:	9307      	strlt	r3, [sp, #28]
 8000ce0:	bfb8      	it	lt
 8000ce2:	9204      	strlt	r2, [sp, #16]
 8000ce4:	7823      	ldrb	r3, [r4, #0]
 8000ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8000ce8:	d10c      	bne.n	8000d04 <_svfiprintf_r+0x130>
 8000cea:	7863      	ldrb	r3, [r4, #1]
 8000cec:	2b2a      	cmp	r3, #42	; 0x2a
 8000cee:	d134      	bne.n	8000d5a <_svfiprintf_r+0x186>
 8000cf0:	9b03      	ldr	r3, [sp, #12]
 8000cf2:	1d1a      	adds	r2, r3, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	9203      	str	r2, [sp, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfb8      	it	lt
 8000cfc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d00:	3402      	adds	r4, #2
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000dcc <_svfiprintf_r+0x1f8>
 8000d08:	7821      	ldrb	r1, [r4, #0]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	f7ff fa5f 	bl	80001d0 <memchr>
 8000d12:	b138      	cbz	r0, 8000d24 <_svfiprintf_r+0x150>
 8000d14:	9b04      	ldr	r3, [sp, #16]
 8000d16:	eba0 000a 	sub.w	r0, r0, sl
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	4082      	lsls	r2, r0
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	3401      	adds	r4, #1
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d28:	4825      	ldr	r0, [pc, #148]	; (8000dc0 <_svfiprintf_r+0x1ec>)
 8000d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d2e:	2206      	movs	r2, #6
 8000d30:	f7ff fa4e 	bl	80001d0 <memchr>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d038      	beq.n	8000daa <_svfiprintf_r+0x1d6>
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <_svfiprintf_r+0x1f0>)
 8000d3a:	bb1b      	cbnz	r3, 8000d84 <_svfiprintf_r+0x1b0>
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	3307      	adds	r3, #7
 8000d40:	f023 0307 	bic.w	r3, r3, #7
 8000d44:	3308      	adds	r3, #8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d4a:	4433      	add	r3, r6
 8000d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4e:	e768      	b.n	8000c22 <_svfiprintf_r+0x4e>
 8000d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d54:	460c      	mov	r4, r1
 8000d56:	2001      	movs	r0, #1
 8000d58:	e7a6      	b.n	8000ca8 <_svfiprintf_r+0xd4>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	3401      	adds	r4, #1
 8000d5e:	9305      	str	r3, [sp, #20]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 0c0a 	mov.w	ip, #10
 8000d66:	4620      	mov	r0, r4
 8000d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d6c:	3a30      	subs	r2, #48	; 0x30
 8000d6e:	2a09      	cmp	r2, #9
 8000d70:	d903      	bls.n	8000d7a <_svfiprintf_r+0x1a6>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0c6      	beq.n	8000d04 <_svfiprintf_r+0x130>
 8000d76:	9105      	str	r1, [sp, #20]
 8000d78:	e7c4      	b.n	8000d04 <_svfiprintf_r+0x130>
 8000d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d7e:	4604      	mov	r4, r0
 8000d80:	2301      	movs	r3, #1
 8000d82:	e7f0      	b.n	8000d66 <_svfiprintf_r+0x192>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	462a      	mov	r2, r5
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <_svfiprintf_r+0x1f4>)
 8000d8c:	a904      	add	r1, sp, #16
 8000d8e:	4638      	mov	r0, r7
 8000d90:	f3af 8000 	nop.w
 8000d94:	1c42      	adds	r2, r0, #1
 8000d96:	4606      	mov	r6, r0
 8000d98:	d1d6      	bne.n	8000d48 <_svfiprintf_r+0x174>
 8000d9a:	89ab      	ldrh	r3, [r5, #12]
 8000d9c:	065b      	lsls	r3, r3, #25
 8000d9e:	f53f af2d 	bmi.w	8000bfc <_svfiprintf_r+0x28>
 8000da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000da4:	b01d      	add	sp, #116	; 0x74
 8000da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000daa:	ab03      	add	r3, sp, #12
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462a      	mov	r2, r5
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <_svfiprintf_r+0x1f4>)
 8000db2:	a904      	add	r1, sp, #16
 8000db4:	4638      	mov	r0, r7
 8000db6:	f000 f919 	bl	8000fec <_printf_i>
 8000dba:	e7eb      	b.n	8000d94 <_svfiprintf_r+0x1c0>
 8000dbc:	080013dc 	.word	0x080013dc
 8000dc0:	080013e6 	.word	0x080013e6
 8000dc4:	00000000 	.word	0x00000000
 8000dc8:	08000b21 	.word	0x08000b21
 8000dcc:	080013e2 	.word	0x080013e2

08000dd0 <sbrk_aligned>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4e0e      	ldr	r6, [pc, #56]	; (8000e0c <sbrk_aligned+0x3c>)
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	6831      	ldr	r1, [r6, #0]
 8000dd8:	4605      	mov	r5, r0
 8000dda:	b911      	cbnz	r1, 8000de2 <sbrk_aligned+0x12>
 8000ddc:	f000 fa7e 	bl	80012dc <_sbrk_r>
 8000de0:	6030      	str	r0, [r6, #0]
 8000de2:	4621      	mov	r1, r4
 8000de4:	4628      	mov	r0, r5
 8000de6:	f000 fa79 	bl	80012dc <_sbrk_r>
 8000dea:	1c43      	adds	r3, r0, #1
 8000dec:	d00a      	beq.n	8000e04 <sbrk_aligned+0x34>
 8000dee:	1cc4      	adds	r4, r0, #3
 8000df0:	f024 0403 	bic.w	r4, r4, #3
 8000df4:	42a0      	cmp	r0, r4
 8000df6:	d007      	beq.n	8000e08 <sbrk_aligned+0x38>
 8000df8:	1a21      	subs	r1, r4, r0
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f000 fa6e 	bl	80012dc <_sbrk_r>
 8000e00:	3001      	adds	r0, #1
 8000e02:	d101      	bne.n	8000e08 <sbrk_aligned+0x38>
 8000e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e08:	4620      	mov	r0, r4
 8000e0a:	bd70      	pop	{r4, r5, r6, pc}
 8000e0c:	20000204 	.word	0x20000204

08000e10 <_malloc_r>:
 8000e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e14:	1ccd      	adds	r5, r1, #3
 8000e16:	f025 0503 	bic.w	r5, r5, #3
 8000e1a:	3508      	adds	r5, #8
 8000e1c:	2d0c      	cmp	r5, #12
 8000e1e:	bf38      	it	cc
 8000e20:	250c      	movcc	r5, #12
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	4607      	mov	r7, r0
 8000e26:	db01      	blt.n	8000e2c <_malloc_r+0x1c>
 8000e28:	42a9      	cmp	r1, r5
 8000e2a:	d905      	bls.n	8000e38 <_malloc_r+0x28>
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	2600      	movs	r6, #0
 8000e32:	4630      	mov	r0, r6
 8000e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f0c <_malloc_r+0xfc>
 8000e3c:	f000 f9f8 	bl	8001230 <__malloc_lock>
 8000e40:	f8d8 3000 	ldr.w	r3, [r8]
 8000e44:	461c      	mov	r4, r3
 8000e46:	bb5c      	cbnz	r4, 8000ea0 <_malloc_r+0x90>
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	f7ff ffc0 	bl	8000dd0 <sbrk_aligned>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	4604      	mov	r4, r0
 8000e54:	d155      	bne.n	8000f02 <_malloc_r+0xf2>
 8000e56:	f8d8 4000 	ldr.w	r4, [r8]
 8000e5a:	4626      	mov	r6, r4
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d145      	bne.n	8000eec <_malloc_r+0xdc>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d048      	beq.n	8000ef6 <_malloc_r+0xe6>
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	4631      	mov	r1, r6
 8000e68:	4638      	mov	r0, r7
 8000e6a:	eb04 0903 	add.w	r9, r4, r3
 8000e6e:	f000 fa35 	bl	80012dc <_sbrk_r>
 8000e72:	4581      	cmp	r9, r0
 8000e74:	d13f      	bne.n	8000ef6 <_malloc_r+0xe6>
 8000e76:	6821      	ldr	r1, [r4, #0]
 8000e78:	1a6d      	subs	r5, r5, r1
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f7ff ffa7 	bl	8000dd0 <sbrk_aligned>
 8000e82:	3001      	adds	r0, #1
 8000e84:	d037      	beq.n	8000ef6 <_malloc_r+0xe6>
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	442b      	add	r3, r5
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d038      	beq.n	8000f06 <_malloc_r+0xf6>
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	42a2      	cmp	r2, r4
 8000e98:	d12b      	bne.n	8000ef2 <_malloc_r+0xe2>
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	e00f      	b.n	8000ec0 <_malloc_r+0xb0>
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	1b52      	subs	r2, r2, r5
 8000ea4:	d41f      	bmi.n	8000ee6 <_malloc_r+0xd6>
 8000ea6:	2a0b      	cmp	r2, #11
 8000ea8:	d917      	bls.n	8000eda <_malloc_r+0xca>
 8000eaa:	1961      	adds	r1, r4, r5
 8000eac:	42a3      	cmp	r3, r4
 8000eae:	6025      	str	r5, [r4, #0]
 8000eb0:	bf18      	it	ne
 8000eb2:	6059      	strne	r1, [r3, #4]
 8000eb4:	6863      	ldr	r3, [r4, #4]
 8000eb6:	bf08      	it	eq
 8000eb8:	f8c8 1000 	streq.w	r1, [r8]
 8000ebc:	5162      	str	r2, [r4, r5]
 8000ebe:	604b      	str	r3, [r1, #4]
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	f104 060b 	add.w	r6, r4, #11
 8000ec6:	f000 f9b9 	bl	800123c <__malloc_unlock>
 8000eca:	f026 0607 	bic.w	r6, r6, #7
 8000ece:	1d23      	adds	r3, r4, #4
 8000ed0:	1af2      	subs	r2, r6, r3
 8000ed2:	d0ae      	beq.n	8000e32 <_malloc_r+0x22>
 8000ed4:	1b9b      	subs	r3, r3, r6
 8000ed6:	50a3      	str	r3, [r4, r2]
 8000ed8:	e7ab      	b.n	8000e32 <_malloc_r+0x22>
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	6862      	ldr	r2, [r4, #4]
 8000ede:	d1dd      	bne.n	8000e9c <_malloc_r+0x8c>
 8000ee0:	f8c8 2000 	str.w	r2, [r8]
 8000ee4:	e7ec      	b.n	8000ec0 <_malloc_r+0xb0>
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	6864      	ldr	r4, [r4, #4]
 8000eea:	e7ac      	b.n	8000e46 <_malloc_r+0x36>
 8000eec:	4634      	mov	r4, r6
 8000eee:	6876      	ldr	r6, [r6, #4]
 8000ef0:	e7b4      	b.n	8000e5c <_malloc_r+0x4c>
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	e7cc      	b.n	8000e90 <_malloc_r+0x80>
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4638      	mov	r0, r7
 8000efc:	f000 f99e 	bl	800123c <__malloc_unlock>
 8000f00:	e797      	b.n	8000e32 <_malloc_r+0x22>
 8000f02:	6025      	str	r5, [r4, #0]
 8000f04:	e7dc      	b.n	8000ec0 <_malloc_r+0xb0>
 8000f06:	605b      	str	r3, [r3, #4]
 8000f08:	deff      	udf	#255	; 0xff
 8000f0a:	bf00      	nop
 8000f0c:	20000200 	.word	0x20000200

08000f10 <_printf_common>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	4616      	mov	r6, r2
 8000f16:	4699      	mov	r9, r3
 8000f18:	688a      	ldr	r2, [r1, #8]
 8000f1a:	690b      	ldr	r3, [r1, #16]
 8000f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bfb8      	it	lt
 8000f24:	4613      	movlt	r3, r2
 8000f26:	6033      	str	r3, [r6, #0]
 8000f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f2c:	4607      	mov	r7, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	b10a      	cbz	r2, 8000f36 <_printf_common+0x26>
 8000f32:	3301      	adds	r3, #1
 8000f34:	6033      	str	r3, [r6, #0]
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	0699      	lsls	r1, r3, #26
 8000f3a:	bf42      	ittt	mi
 8000f3c:	6833      	ldrmi	r3, [r6, #0]
 8000f3e:	3302      	addmi	r3, #2
 8000f40:	6033      	strmi	r3, [r6, #0]
 8000f42:	6825      	ldr	r5, [r4, #0]
 8000f44:	f015 0506 	ands.w	r5, r5, #6
 8000f48:	d106      	bne.n	8000f58 <_printf_common+0x48>
 8000f4a:	f104 0a19 	add.w	sl, r4, #25
 8000f4e:	68e3      	ldr	r3, [r4, #12]
 8000f50:	6832      	ldr	r2, [r6, #0]
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	dc26      	bgt.n	8000fa6 <_printf_common+0x96>
 8000f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f5c:	1e13      	subs	r3, r2, #0
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	bf18      	it	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	0692      	lsls	r2, r2, #26
 8000f66:	d42b      	bmi.n	8000fc0 <_printf_common+0xb0>
 8000f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	4638      	mov	r0, r7
 8000f70:	47c0      	blx	r8
 8000f72:	3001      	adds	r0, #1
 8000f74:	d01e      	beq.n	8000fb4 <_printf_common+0xa4>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	6922      	ldr	r2, [r4, #16]
 8000f7a:	f003 0306 	and.w	r3, r3, #6
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf02      	ittt	eq
 8000f82:	68e5      	ldreq	r5, [r4, #12]
 8000f84:	6833      	ldreq	r3, [r6, #0]
 8000f86:	1aed      	subeq	r5, r5, r3
 8000f88:	68a3      	ldr	r3, [r4, #8]
 8000f8a:	bf0c      	ite	eq
 8000f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f90:	2500      	movne	r5, #0
 8000f92:	4293      	cmp	r3, r2
 8000f94:	bfc4      	itt	gt
 8000f96:	1a9b      	subgt	r3, r3, r2
 8000f98:	18ed      	addgt	r5, r5, r3
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	341a      	adds	r4, #26
 8000f9e:	42b5      	cmp	r5, r6
 8000fa0:	d11a      	bne.n	8000fd8 <_printf_common+0xc8>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	e008      	b.n	8000fb8 <_printf_common+0xa8>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4652      	mov	r2, sl
 8000faa:	4649      	mov	r1, r9
 8000fac:	4638      	mov	r0, r7
 8000fae:	47c0      	blx	r8
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	d103      	bne.n	8000fbc <_printf_common+0xac>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbc:	3501      	adds	r5, #1
 8000fbe:	e7c6      	b.n	8000f4e <_printf_common+0x3e>
 8000fc0:	18e1      	adds	r1, r4, r3
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	2030      	movs	r0, #48	; 0x30
 8000fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fca:	4422      	add	r2, r4
 8000fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	e7c7      	b.n	8000f68 <_printf_common+0x58>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4622      	mov	r2, r4
 8000fdc:	4649      	mov	r1, r9
 8000fde:	4638      	mov	r0, r7
 8000fe0:	47c0      	blx	r8
 8000fe2:	3001      	adds	r0, #1
 8000fe4:	d0e6      	beq.n	8000fb4 <_printf_common+0xa4>
 8000fe6:	3601      	adds	r6, #1
 8000fe8:	e7d9      	b.n	8000f9e <_printf_common+0x8e>
	...

08000fec <_printf_i>:
 8000fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff0:	7e0f      	ldrb	r7, [r1, #24]
 8000ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ff4:	2f78      	cmp	r7, #120	; 0x78
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	4680      	mov	r8, r0
 8000ffa:	460c      	mov	r4, r1
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001002:	d807      	bhi.n	8001014 <_printf_i+0x28>
 8001004:	2f62      	cmp	r7, #98	; 0x62
 8001006:	d80a      	bhi.n	800101e <_printf_i+0x32>
 8001008:	2f00      	cmp	r7, #0
 800100a:	f000 80d4 	beq.w	80011b6 <_printf_i+0x1ca>
 800100e:	2f58      	cmp	r7, #88	; 0x58
 8001010:	f000 80c0 	beq.w	8001194 <_printf_i+0x1a8>
 8001014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800101c:	e03a      	b.n	8001094 <_printf_i+0xa8>
 800101e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001022:	2b15      	cmp	r3, #21
 8001024:	d8f6      	bhi.n	8001014 <_printf_i+0x28>
 8001026:	a101      	add	r1, pc, #4	; (adr r1, 800102c <_printf_i+0x40>)
 8001028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800102c:	08001085 	.word	0x08001085
 8001030:	08001099 	.word	0x08001099
 8001034:	08001015 	.word	0x08001015
 8001038:	08001015 	.word	0x08001015
 800103c:	08001015 	.word	0x08001015
 8001040:	08001015 	.word	0x08001015
 8001044:	08001099 	.word	0x08001099
 8001048:	08001015 	.word	0x08001015
 800104c:	08001015 	.word	0x08001015
 8001050:	08001015 	.word	0x08001015
 8001054:	08001015 	.word	0x08001015
 8001058:	0800119d 	.word	0x0800119d
 800105c:	080010c5 	.word	0x080010c5
 8001060:	08001157 	.word	0x08001157
 8001064:	08001015 	.word	0x08001015
 8001068:	08001015 	.word	0x08001015
 800106c:	080011bf 	.word	0x080011bf
 8001070:	08001015 	.word	0x08001015
 8001074:	080010c5 	.word	0x080010c5
 8001078:	08001015 	.word	0x08001015
 800107c:	08001015 	.word	0x08001015
 8001080:	0800115f 	.word	0x0800115f
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	1d1a      	adds	r2, r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	602a      	str	r2, [r5, #0]
 800108c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001094:	2301      	movs	r3, #1
 8001096:	e09f      	b.n	80011d8 <_printf_i+0x1ec>
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	0607      	lsls	r7, r0, #24
 800109e:	f103 0104 	add.w	r1, r3, #4
 80010a2:	6029      	str	r1, [r5, #0]
 80010a4:	d501      	bpl.n	80010aa <_printf_i+0xbe>
 80010a6:	681e      	ldr	r6, [r3, #0]
 80010a8:	e003      	b.n	80010b2 <_printf_i+0xc6>
 80010aa:	0646      	lsls	r6, r0, #25
 80010ac:	d5fb      	bpl.n	80010a6 <_printf_i+0xba>
 80010ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	da03      	bge.n	80010be <_printf_i+0xd2>
 80010b6:	232d      	movs	r3, #45	; 0x2d
 80010b8:	4276      	negs	r6, r6
 80010ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010be:	485a      	ldr	r0, [pc, #360]	; (8001228 <_printf_i+0x23c>)
 80010c0:	230a      	movs	r3, #10
 80010c2:	e012      	b.n	80010ea <_printf_i+0xfe>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	6820      	ldr	r0, [r4, #0]
 80010c8:	1d19      	adds	r1, r3, #4
 80010ca:	6029      	str	r1, [r5, #0]
 80010cc:	0605      	lsls	r5, r0, #24
 80010ce:	d501      	bpl.n	80010d4 <_printf_i+0xe8>
 80010d0:	681e      	ldr	r6, [r3, #0]
 80010d2:	e002      	b.n	80010da <_printf_i+0xee>
 80010d4:	0641      	lsls	r1, r0, #25
 80010d6:	d5fb      	bpl.n	80010d0 <_printf_i+0xe4>
 80010d8:	881e      	ldrh	r6, [r3, #0]
 80010da:	4853      	ldr	r0, [pc, #332]	; (8001228 <_printf_i+0x23c>)
 80010dc:	2f6f      	cmp	r7, #111	; 0x6f
 80010de:	bf0c      	ite	eq
 80010e0:	2308      	moveq	r3, #8
 80010e2:	230a      	movne	r3, #10
 80010e4:	2100      	movs	r1, #0
 80010e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010ea:	6865      	ldr	r5, [r4, #4]
 80010ec:	60a5      	str	r5, [r4, #8]
 80010ee:	2d00      	cmp	r5, #0
 80010f0:	bfa2      	ittt	ge
 80010f2:	6821      	ldrge	r1, [r4, #0]
 80010f4:	f021 0104 	bicge.w	r1, r1, #4
 80010f8:	6021      	strge	r1, [r4, #0]
 80010fa:	b90e      	cbnz	r6, 8001100 <_printf_i+0x114>
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	d04b      	beq.n	8001198 <_printf_i+0x1ac>
 8001100:	4615      	mov	r5, r2
 8001102:	fbb6 f1f3 	udiv	r1, r6, r3
 8001106:	fb03 6711 	mls	r7, r3, r1, r6
 800110a:	5dc7      	ldrb	r7, [r0, r7]
 800110c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001110:	4637      	mov	r7, r6
 8001112:	42bb      	cmp	r3, r7
 8001114:	460e      	mov	r6, r1
 8001116:	d9f4      	bls.n	8001102 <_printf_i+0x116>
 8001118:	2b08      	cmp	r3, #8
 800111a:	d10b      	bne.n	8001134 <_printf_i+0x148>
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	07de      	lsls	r6, r3, #31
 8001120:	d508      	bpl.n	8001134 <_printf_i+0x148>
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	6861      	ldr	r1, [r4, #4]
 8001126:	4299      	cmp	r1, r3
 8001128:	bfde      	ittt	le
 800112a:	2330      	movle	r3, #48	; 0x30
 800112c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001130:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001134:	1b52      	subs	r2, r2, r5
 8001136:	6122      	str	r2, [r4, #16]
 8001138:	f8cd a000 	str.w	sl, [sp]
 800113c:	464b      	mov	r3, r9
 800113e:	aa03      	add	r2, sp, #12
 8001140:	4621      	mov	r1, r4
 8001142:	4640      	mov	r0, r8
 8001144:	f7ff fee4 	bl	8000f10 <_printf_common>
 8001148:	3001      	adds	r0, #1
 800114a:	d14a      	bne.n	80011e2 <_printf_i+0x1f6>
 800114c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001150:	b004      	add	sp, #16
 8001152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	4833      	ldr	r0, [pc, #204]	; (800122c <_printf_i+0x240>)
 8001160:	2778      	movs	r7, #120	; 0x78
 8001162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	6829      	ldr	r1, [r5, #0]
 800116a:	061f      	lsls	r7, r3, #24
 800116c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001170:	d402      	bmi.n	8001178 <_printf_i+0x18c>
 8001172:	065f      	lsls	r7, r3, #25
 8001174:	bf48      	it	mi
 8001176:	b2b6      	uxthmi	r6, r6
 8001178:	07df      	lsls	r7, r3, #31
 800117a:	bf48      	it	mi
 800117c:	f043 0320 	orrmi.w	r3, r3, #32
 8001180:	6029      	str	r1, [r5, #0]
 8001182:	bf48      	it	mi
 8001184:	6023      	strmi	r3, [r4, #0]
 8001186:	b91e      	cbnz	r6, 8001190 <_printf_i+0x1a4>
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f023 0320 	bic.w	r3, r3, #32
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	2310      	movs	r3, #16
 8001192:	e7a7      	b.n	80010e4 <_printf_i+0xf8>
 8001194:	4824      	ldr	r0, [pc, #144]	; (8001228 <_printf_i+0x23c>)
 8001196:	e7e4      	b.n	8001162 <_printf_i+0x176>
 8001198:	4615      	mov	r5, r2
 800119a:	e7bd      	b.n	8001118 <_printf_i+0x12c>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	6826      	ldr	r6, [r4, #0]
 80011a0:	6961      	ldr	r1, [r4, #20]
 80011a2:	1d18      	adds	r0, r3, #4
 80011a4:	6028      	str	r0, [r5, #0]
 80011a6:	0635      	lsls	r5, r6, #24
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	d501      	bpl.n	80011b0 <_printf_i+0x1c4>
 80011ac:	6019      	str	r1, [r3, #0]
 80011ae:	e002      	b.n	80011b6 <_printf_i+0x1ca>
 80011b0:	0670      	lsls	r0, r6, #25
 80011b2:	d5fb      	bpl.n	80011ac <_printf_i+0x1c0>
 80011b4:	8019      	strh	r1, [r3, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	6123      	str	r3, [r4, #16]
 80011ba:	4615      	mov	r5, r2
 80011bc:	e7bc      	b.n	8001138 <_printf_i+0x14c>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	1d1a      	adds	r2, r3, #4
 80011c2:	602a      	str	r2, [r5, #0]
 80011c4:	681d      	ldr	r5, [r3, #0]
 80011c6:	6862      	ldr	r2, [r4, #4]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4628      	mov	r0, r5
 80011cc:	f7ff f800 	bl	80001d0 <memchr>
 80011d0:	b108      	cbz	r0, 80011d6 <_printf_i+0x1ea>
 80011d2:	1b40      	subs	r0, r0, r5
 80011d4:	6060      	str	r0, [r4, #4]
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	6123      	str	r3, [r4, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011e0:	e7aa      	b.n	8001138 <_printf_i+0x14c>
 80011e2:	6923      	ldr	r3, [r4, #16]
 80011e4:	462a      	mov	r2, r5
 80011e6:	4649      	mov	r1, r9
 80011e8:	4640      	mov	r0, r8
 80011ea:	47d0      	blx	sl
 80011ec:	3001      	adds	r0, #1
 80011ee:	d0ad      	beq.n	800114c <_printf_i+0x160>
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	079b      	lsls	r3, r3, #30
 80011f4:	d413      	bmi.n	800121e <_printf_i+0x232>
 80011f6:	68e0      	ldr	r0, [r4, #12]
 80011f8:	9b03      	ldr	r3, [sp, #12]
 80011fa:	4298      	cmp	r0, r3
 80011fc:	bfb8      	it	lt
 80011fe:	4618      	movlt	r0, r3
 8001200:	e7a6      	b.n	8001150 <_printf_i+0x164>
 8001202:	2301      	movs	r3, #1
 8001204:	4632      	mov	r2, r6
 8001206:	4649      	mov	r1, r9
 8001208:	4640      	mov	r0, r8
 800120a:	47d0      	blx	sl
 800120c:	3001      	adds	r0, #1
 800120e:	d09d      	beq.n	800114c <_printf_i+0x160>
 8001210:	3501      	adds	r5, #1
 8001212:	68e3      	ldr	r3, [r4, #12]
 8001214:	9903      	ldr	r1, [sp, #12]
 8001216:	1a5b      	subs	r3, r3, r1
 8001218:	42ab      	cmp	r3, r5
 800121a:	dcf2      	bgt.n	8001202 <_printf_i+0x216>
 800121c:	e7eb      	b.n	80011f6 <_printf_i+0x20a>
 800121e:	2500      	movs	r5, #0
 8001220:	f104 0619 	add.w	r6, r4, #25
 8001224:	e7f5      	b.n	8001212 <_printf_i+0x226>
 8001226:	bf00      	nop
 8001228:	080013ed 	.word	0x080013ed
 800122c:	080013fe 	.word	0x080013fe

08001230 <__malloc_lock>:
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <__malloc_lock+0x8>)
 8001232:	f7ff bc73 	b.w	8000b1c <__retarget_lock_acquire_recursive>
 8001236:	bf00      	nop
 8001238:	200001fc 	.word	0x200001fc

0800123c <__malloc_unlock>:
 800123c:	4801      	ldr	r0, [pc, #4]	; (8001244 <__malloc_unlock+0x8>)
 800123e:	f7ff bc6e 	b.w	8000b1e <__retarget_lock_release_recursive>
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc

08001248 <_realloc_r>:
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	4680      	mov	r8, r0
 800124e:	4614      	mov	r4, r2
 8001250:	460e      	mov	r6, r1
 8001252:	b921      	cbnz	r1, 800125e <_realloc_r+0x16>
 8001254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001258:	4611      	mov	r1, r2
 800125a:	f7ff bdd9 	b.w	8000e10 <_malloc_r>
 800125e:	b92a      	cbnz	r2, 800126c <_realloc_r+0x24>
 8001260:	f000 f85a 	bl	8001318 <_free_r>
 8001264:	4625      	mov	r5, r4
 8001266:	4628      	mov	r0, r5
 8001268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800126c:	f000 f8a0 	bl	80013b0 <_malloc_usable_size_r>
 8001270:	4284      	cmp	r4, r0
 8001272:	4607      	mov	r7, r0
 8001274:	d802      	bhi.n	800127c <_realloc_r+0x34>
 8001276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800127a:	d812      	bhi.n	80012a2 <_realloc_r+0x5a>
 800127c:	4621      	mov	r1, r4
 800127e:	4640      	mov	r0, r8
 8001280:	f7ff fdc6 	bl	8000e10 <_malloc_r>
 8001284:	4605      	mov	r5, r0
 8001286:	2800      	cmp	r0, #0
 8001288:	d0ed      	beq.n	8001266 <_realloc_r+0x1e>
 800128a:	42bc      	cmp	r4, r7
 800128c:	4622      	mov	r2, r4
 800128e:	4631      	mov	r1, r6
 8001290:	bf28      	it	cs
 8001292:	463a      	movcs	r2, r7
 8001294:	f000 f832 	bl	80012fc <memcpy>
 8001298:	4631      	mov	r1, r6
 800129a:	4640      	mov	r0, r8
 800129c:	f000 f83c 	bl	8001318 <_free_r>
 80012a0:	e7e1      	b.n	8001266 <_realloc_r+0x1e>
 80012a2:	4635      	mov	r5, r6
 80012a4:	e7df      	b.n	8001266 <_realloc_r+0x1e>

080012a6 <memmove>:
 80012a6:	4288      	cmp	r0, r1
 80012a8:	b510      	push	{r4, lr}
 80012aa:	eb01 0402 	add.w	r4, r1, r2
 80012ae:	d902      	bls.n	80012b6 <memmove+0x10>
 80012b0:	4284      	cmp	r4, r0
 80012b2:	4623      	mov	r3, r4
 80012b4:	d807      	bhi.n	80012c6 <memmove+0x20>
 80012b6:	1e43      	subs	r3, r0, #1
 80012b8:	42a1      	cmp	r1, r4
 80012ba:	d008      	beq.n	80012ce <memmove+0x28>
 80012bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80012c4:	e7f8      	b.n	80012b8 <memmove+0x12>
 80012c6:	4402      	add	r2, r0
 80012c8:	4601      	mov	r1, r0
 80012ca:	428a      	cmp	r2, r1
 80012cc:	d100      	bne.n	80012d0 <memmove+0x2a>
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80012d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80012d8:	e7f7      	b.n	80012ca <memmove+0x24>
	...

080012dc <_sbrk_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4d06      	ldr	r5, [pc, #24]	; (80012f8 <_sbrk_r+0x1c>)
 80012e0:	2300      	movs	r3, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	f7ff fb2a 	bl	8000940 <_sbrk>
 80012ec:	1c43      	adds	r3, r0, #1
 80012ee:	d102      	bne.n	80012f6 <_sbrk_r+0x1a>
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	b103      	cbz	r3, 80012f6 <_sbrk_r+0x1a>
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	20000208 	.word	0x20000208

080012fc <memcpy>:
 80012fc:	440a      	add	r2, r1
 80012fe:	4291      	cmp	r1, r2
 8001300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001304:	d100      	bne.n	8001308 <memcpy+0xc>
 8001306:	4770      	bx	lr
 8001308:	b510      	push	{r4, lr}
 800130a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800130e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001312:	4291      	cmp	r1, r2
 8001314:	d1f9      	bne.n	800130a <memcpy+0xe>
 8001316:	bd10      	pop	{r4, pc}

08001318 <_free_r>:
 8001318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800131a:	2900      	cmp	r1, #0
 800131c:	d044      	beq.n	80013a8 <_free_r+0x90>
 800131e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001322:	9001      	str	r0, [sp, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f1a1 0404 	sub.w	r4, r1, #4
 800132a:	bfb8      	it	lt
 800132c:	18e4      	addlt	r4, r4, r3
 800132e:	f7ff ff7f 	bl	8001230 <__malloc_lock>
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <_free_r+0x94>)
 8001334:	9801      	ldr	r0, [sp, #4]
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	b933      	cbnz	r3, 8001348 <_free_r+0x30>
 800133a:	6063      	str	r3, [r4, #4]
 800133c:	6014      	str	r4, [r2, #0]
 800133e:	b003      	add	sp, #12
 8001340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001344:	f7ff bf7a 	b.w	800123c <__malloc_unlock>
 8001348:	42a3      	cmp	r3, r4
 800134a:	d908      	bls.n	800135e <_free_r+0x46>
 800134c:	6825      	ldr	r5, [r4, #0]
 800134e:	1961      	adds	r1, r4, r5
 8001350:	428b      	cmp	r3, r1
 8001352:	bf01      	itttt	eq
 8001354:	6819      	ldreq	r1, [r3, #0]
 8001356:	685b      	ldreq	r3, [r3, #4]
 8001358:	1949      	addeq	r1, r1, r5
 800135a:	6021      	streq	r1, [r4, #0]
 800135c:	e7ed      	b.n	800133a <_free_r+0x22>
 800135e:	461a      	mov	r2, r3
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	b10b      	cbz	r3, 8001368 <_free_r+0x50>
 8001364:	42a3      	cmp	r3, r4
 8001366:	d9fa      	bls.n	800135e <_free_r+0x46>
 8001368:	6811      	ldr	r1, [r2, #0]
 800136a:	1855      	adds	r5, r2, r1
 800136c:	42a5      	cmp	r5, r4
 800136e:	d10b      	bne.n	8001388 <_free_r+0x70>
 8001370:	6824      	ldr	r4, [r4, #0]
 8001372:	4421      	add	r1, r4
 8001374:	1854      	adds	r4, r2, r1
 8001376:	42a3      	cmp	r3, r4
 8001378:	6011      	str	r1, [r2, #0]
 800137a:	d1e0      	bne.n	800133e <_free_r+0x26>
 800137c:	681c      	ldr	r4, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	6053      	str	r3, [r2, #4]
 8001382:	440c      	add	r4, r1
 8001384:	6014      	str	r4, [r2, #0]
 8001386:	e7da      	b.n	800133e <_free_r+0x26>
 8001388:	d902      	bls.n	8001390 <_free_r+0x78>
 800138a:	230c      	movs	r3, #12
 800138c:	6003      	str	r3, [r0, #0]
 800138e:	e7d6      	b.n	800133e <_free_r+0x26>
 8001390:	6825      	ldr	r5, [r4, #0]
 8001392:	1961      	adds	r1, r4, r5
 8001394:	428b      	cmp	r3, r1
 8001396:	bf04      	itt	eq
 8001398:	6819      	ldreq	r1, [r3, #0]
 800139a:	685b      	ldreq	r3, [r3, #4]
 800139c:	6063      	str	r3, [r4, #4]
 800139e:	bf04      	itt	eq
 80013a0:	1949      	addeq	r1, r1, r5
 80013a2:	6021      	streq	r1, [r4, #0]
 80013a4:	6054      	str	r4, [r2, #4]
 80013a6:	e7ca      	b.n	800133e <_free_r+0x26>
 80013a8:	b003      	add	sp, #12
 80013aa:	bd30      	pop	{r4, r5, pc}
 80013ac:	20000200 	.word	0x20000200

080013b0 <_malloc_usable_size_r>:
 80013b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013b4:	1f18      	subs	r0, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bfbc      	itt	lt
 80013ba:	580b      	ldrlt	r3, [r1, r0]
 80013bc:	18c0      	addlt	r0, r0, r3
 80013be:	4770      	bx	lr

080013c0 <_init>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	bf00      	nop
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr

080013cc <_fini>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	bf00      	nop
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr
